<?xml version="1.0"?>
<doc>
    <assembly>
        <name>OpenBots.Server.Web</name>
    </assembly>
    <members>
        <member name="T:OpenBots.Server.Web.Controllers.AgentsController">
            <summary>
            Controller for agents
            </summary>
        </member>
        <member name="M:OpenBots.Server.Web.Controllers.AgentsController.#ctor(OpenBots.Server.DataAccess.Repositories.IAgentRepository,OpenBots.Server.DataAccess.Repositories.IPersonRepository,OpenBots.Server.DataAccess.Repositories.IAspNetUsersRepository,OpenBots.Server.DataAccess.Repositories.IAgentHeartbeatRepository,OpenBots.Server.Business.IMembershipManager,OpenBots.Server.Web.Webhooks.IWebhookPublisher,OpenBots.Server.Security.ApplicationIdentityUserManager,OpenBots.Server.Business.IAgentManager,Microsoft.AspNetCore.Http.IHttpContextAccessor,Microsoft.Extensions.Configuration.IConfiguration)">
            <summary>
            AgentsController constructor
            </summary>
            <param name="agentRepository"></param>
            <param name="personRepository"></param>
            <param name="usersRepository"></param>
            <param name="membershipManager"></param>
            <param name="userManager"></param>
            <param name="agentManager"></param>
            <param name="accessor"></param>
            <param name="configuration"></param>
            <param name="webhookPublisher"></param>
        </member>
        <member name="M:OpenBots.Server.Web.Controllers.AgentsController.Get(System.String,System.String,System.Int32,System.Int32)">
            <summary>
            Provides a list of all Agents
            </summary>
            <param name="filter"></param>
            <param name="orderBy"></param>
            <param name="skip"></param>
            <param name="top"></param>
            <response code="200">OK,a Paginated list of all Agents</response>
            <response code="400">BadRequest</response>
            <response code="403">Forbidden, unauthorized access</response>  
            <response code="404">Not found</response>
            <response code="422">Unprocessable entity</response>
            <returns>Paginated list of all agents</returns>
        </member>
        <member name="M:OpenBots.Server.Web.Controllers.AgentsController.View(System.String,System.String,System.Int32,System.Int32)">
            <summary>
            Provides a view model list of all Agents and their most recent heartbeat information
            </summary>
            <param name="top"></param>
            <param name="skip"></param>
            <param name="orderBy"></param>
            <param name="filter"></param>
            <response code="200">Ok, a paginated list of all Agents</response>
            <response code="400">Bad request</response>
            <response code="403">Forbidden, unauthorized access</response>  
            <response code="404">Not found</response>
            <response code="422">Unprocessable entity</response>
            <returns>Paginated list of all Agents</returns>
        </member>
        <member name="M:OpenBots.Server.Web.Controllers.AgentsController.Count(System.String)">
            <summary>
            Provides a count of agents 
            </summary>
            <param name="filter"></param>
            <response code="200">Ok, total count of agents</response>
            <response code="400">Bad request</response>
            <response code="403">Forbidden, unauthorized access</response>
            <response code="404">Not found</response>
            <response code="422">Unprocessable entity</response>
            <returns>Count of all agents</returns>
        </member>
        <!-- Badly formed XML comment ignored for member "M:OpenBots.Server.Web.Controllers.AgentsController.Get(System.String)" -->
        <member name="M:OpenBots.Server.Web.Controllers.AgentsController.Post(OpenBots.Server.ViewModel.AgentViewModels.CreateAgentViewModel)">
            <summary>
            Adds a new agent to the existing agents and create a new agent application user
            </summary>
            <remarks>
            Adds the agent with unique agent id to the existing agents
            </remarks>
            <param name="request"></param>
            <response code="200">Ok, new agent created and returned</response>
            <response code="400">Bad request, when the agent value is not in proper format</response>
            <response code="403">Forbidden, unauthorized access</response>
            <response code="409">Conflict, concurrency error</response> 
            <response code="422">Unprocessabile entity, when a duplicate record is being entered</response>
            <returns>Newly created unique agent id with route name</returns>
        </member>
        <member name="M:OpenBots.Server.Web.Controllers.AgentsController.Put(System.String,OpenBots.Server.Model.Agent)">
            <summary>
            Updates an Agent 
            </summary>
            <remarks>
            Provides an action to update an agent, when agent id and the new details of agent are given
            </remarks>
            <param name="id">Agent id, produces bad request if id is null or ids don't match</param>
            <param name="request">Agent details to be updated</param>
            <response code="200">Ok, if the agent details for the given agent id have been updated</response>
            <response code="400">Bad request, if the agent id is null or ids don't match</response>
            <response code="403">Forbidden, unauthorized access</response>
            <response code="409">Conflict</response>
            <response code="422">Unprocessabl entity</response>
            <returns>Ok response with the updated value</returns>
        </member>
        <member name="M:OpenBots.Server.Web.Controllers.AgentsController.Delete(System.String)">
            <summary>
            Deletes an agent with a specified id from the agents
            </summary>
            <param name="id">Agent id to be deleted - throws bad request if null or empty Guid</param>
            <response code="200">Ok, when agent is soft deleted, (isDeleted flag is set to true in database)</response>
            <response code="400">Bad request, if agent id is null or empty Guid</response>
            <response code="403">Forbidden</response>
            <returns>Ok response</returns>
        </member>
        <member name="M:OpenBots.Server.Web.Controllers.AgentsController.Patch(System.String,Microsoft.AspNetCore.JsonPatch.JsonPatchDocument{OpenBots.Server.Model.Agent})">
            <summary>
            Updates partial details of agent
            </summary>
            <param name="id">Agent identifier</param>
            <param name="request">Value of the agent to be updated</param>
            <response code="200">Ok, if update of agent is successful</response>
            <response code="400">Bad request, if the id is null or ids don't match</response>
            <response code="403">Forbidden, unauthorized access</response>
            <response code="422">Unprocessable entity, validation error</response>
            <returns>Ok response, if the partial agent values have been updated</returns>
        </member>
        <member name="M:OpenBots.Server.Web.Controllers.AgentsController.Connect(System.String,OpenBots.Server.ViewModel.AgentViewModels.ConnectAgentViewModel)">
            <summary>
            Provides an agent id and name if the provided machine matches an agent and updates the isConnected field
            </summary>
            <response code="200">Ok, agent id</response>
            <response code="400">Bad request</response>
            <response code="403">Forbidden, unauthorized access</response>
            <response code="404">Not found</response>
            <response code="422">UnprocessableE entity</response>
            <returns>Connected view model that matches the provided machine details</returns>
        </member>
        <member name="M:OpenBots.Server.Web.Controllers.AgentsController.Disconnect(System.String,OpenBots.Server.ViewModel.AgentViewModels.ConnectAgentViewModel)">
            <summary>
            Updates the isConnected field if the disconnect details are correct
            </summary>
            <response code="200">Ok, if update of agent is successful</response>
            <response code="400">Badrequest</response>
            <response code="403">Forbidden, unauthorized access</response>  
            <response code="404">Not found</response>
            <response code="422">Unprocessable entity</response>
            <returns>Ok response, if the isConnected field was updated</returns>
        </member>
        <member name="M:OpenBots.Server.Web.Controllers.AgentsController.AddHeartbeat(OpenBots.Server.Model.AgentHeartbeat,System.String)">
            <summary>
            Creates a new heartbeat for the specified AgentId
            </summary>
            <param name="agentId">Agent identifier</param>
            <param name="request">Heartbeat values to be updated</param>
            <response code="200">Ok, if update of agent is successful</response>
            <response code="400">Bad request, if the id is null or ids don't match</response>
            <response code="403">Forbidden, unauthorized access</response>
            <response code="422">Unprocessable entity, validation error</response>
            <returns>Newly created Agent heartbeat</returns>
        </member>
        <member name="M:OpenBots.Server.Web.Controllers.AgentsController.AgentHeartbeats(System.String,System.String,System.String,System.Int32,System.Int32)">
            <summary>
            Provides a list of heartbeat details for a particular agent id
            </summary>
            <param name="agentId">Agent id</param>
            <response code="200">Ok, if a heartbeat exists for the given agent id</response>
            <response code="304">Not modified</response>
            <response code="400">Bad request, if agent id is not in the proper format or a proper Guid</response>
            <response code="403">Forbidden</response>
            <response code="422">Unprocessable entity</response>
            <response code="404">Not found, when no agent exists for the given agent id</response>
            <returns>Agent heaetbeat details for the given id</returns>
        </member>
        <member name="M:OpenBots.Server.Web.Controllers.AgentsController.GetLookup">
            <summary>
            Lookup list of all agents
            </summary>
            <response code="200">Ok, a lookup list of all agents</response>
            <response code="400">Bad request</response>
            <response code="403">Forbidden, unauthorized access</response>
            <response code="404">Not found</response>
            <response code="422">Unprocessable entity</response>
            <returns>Lookup list of all agents</returns>
        </member>
        <member name="T:OpenBots.Server.Web.Controllers.AuditLogsController">
            <summary>
            Controller for audit logs
            </summary>
        </member>
        <member name="M:OpenBots.Server.Web.Controllers.AuditLogsController.#ctor(OpenBots.Server.DataAccess.Repositories.IAuditLogRepository,OpenBots.Server.Business.IMembershipManager,OpenBots.Server.Security.ApplicationIdentityUserManager,Microsoft.AspNetCore.Http.IHttpContextAccessor,Microsoft.Extensions.Configuration.IConfiguration,OpenBots.Server.Business.IAuditLogManager)">
            <summary>
            AuditLogController constructor
            </summary>
            <param name="repository"></param>
            <param name="membershipManager"></param>
            <param name="userManager"></param>
            <param name="httpContextAccessor"></param>
            <param name="manager"></param>
            <param name="configuration"></param>
        </member>
        <member name="M:OpenBots.Server.Web.Controllers.AuditLogsController.Get(System.String,System.String,System.Int32,System.Int32)">
            <summary>
            Provides a list of all audit logs
            </summary>
            <param name="filter"></param>
            <param name="top"></param>
            <param name="skip"></param>
            <param name="orderBy"></param>
            <response code="200">Ok, a paginated list of all audit logs</response>
            <response code="400">Bad request</response>
            <response code="403">Forbidden, unauthorized access</response>
            <response code="404">Not found</response>
            <response code="422">Unprocessable entity</response>
            <returns>Paginated list of all audit logs</returns>
        </member>
        <member name="M:OpenBots.Server.Web.Controllers.AuditLogsController.GetView(System.String,System.String,System.Int32,System.Int32)">
            <summary>
            Provides a ViewModel list of all audit logs
            </summary>
            <param name="filter"></param>
            <param name="top"></param>
            <param name="skip"></param>
            <param name="orderBy"></param>
            <response code="200">Ok, a paginated list of all audit logs</response>
            <response code="400">Bad request</response>
            <response code="403">Forbidden, unauthorized access</response>
            <response code="404">Not found</response>
            <response code="422">Unprocessable entity</response>
            <returns>Paginated ViewModel list of all audit logs</returns>
        </member>
        <member name="M:OpenBots.Server.Web.Controllers.AuditLogsController.GetCount(System.String)">
            <summary>
            Gets count of AuditLogs in database
            </summary>
            <param name="filter"></param>
            <response code="200">Ok, count of all audit logs</response>
            <response code="400">Bad request</response>
            <response code="403">Forbidden</response>
            <response code="404">Not found</response>
            <response code="422">Unprocessable entity</response>
            <returns>Count of all audit logs</returns>
        </member>
        <member name="M:OpenBots.Server.Web.Controllers.AuditLogsController.GetDetails(System.Guid)">
            <summary>
            Provides additional details on a specific audit Log
            </summary>
            <param name="id">Audit log id</param>
            <response code="200">Ok, if an audit log exists with the given id</response>
            <response code="304">Not modified</response>
            <response code="400">Bad request, if audit log id is not in proper format</response>
            <response code="403">Forbidden</response>
            <response code="404">Not found, when no audit Log exists for the given audit log id</response>
            <response code="422">Unprocessable entity</response>
            <returns>Audit log details for the given id</returns>
        </member>
        <member name="M:OpenBots.Server.Web.Controllers.AuditLogsController.GetDetailsView(System.Guid)">
            <summary>
            Provides additional ViewModel details on a specific audit Log
            </summary>
            <param name="id">Audit log id</param>
            <response code="200">Ok, if an audit log exists with the given id</response>
            <response code="304">Not modified</response>
            <response code="400">Bad request, if audit log id is not in proper format</response>
            <response code="403">Forbidden</response>
            <response code="404">Not found, when no audit Log exists for the given audit log id</response>
            <response code="422">Unprocessable entity</response>
            <returns>Audit log details for the given id</returns>
        </member>
        <member name="M:OpenBots.Server.Web.Controllers.AuditLogsController.AllAuditLogs">
            <summary>
            Provides a list of all audit logs by name
            </summary>
            <response code="200">Ok, a list of all audit bogs</response>
            <response code="400">Bad request</response>
            <response code="403">Forbidden, unauthorized access</response>
            <response code="404">Not found</response>
            <response code="422">Unprocessable entity</response>
            <returns>List of all audit logs</returns>
        </member>
        <member name="M:OpenBots.Server.Web.Controllers.AuditLogsController.Export(System.String,System.String,System.Int32,System.Int32,System.String)">
            <summary>
            Exports audit logs into a downloadable file
            </summary>
            <param name="fileType">Specifies the file type to be downloaded: csv, zip or, json</param>
            <param name="orderBy"></param>
            <param name="skip"></param>
            <param name="top"></param>
            <param name="filter"></param>
            <response code="200">Ok, if a log exists with the given filters</response>
            <response code="400">Bad request</response>
            <response code="403">Forbidden, unauthorized access</response>
            <response code="422">Unprocessable entity</response>
            <returns>Downloadable file</returns>
        </member>
        <member name="T:OpenBots.Server.Web.Controllers.AutomationsController">
            <summary>
            Controller for Studio automations
            </summary>
        </member>
        <member name="M:OpenBots.Server.Web.Controllers.AutomationsController.#ctor(OpenBots.Server.DataAccess.Repositories.IAutomationRepository,OpenBots.Server.Business.IAutomationManager,OpenBots.Server.Business.IMembershipManager,OpenBots.Server.Security.ApplicationIdentityUserManager,Microsoft.AspNetCore.Http.IHttpContextAccessor,OpenBots.Server.DataAccess.Repositories.IBinaryObjectRepository,OpenBots.Server.Business.IBinaryObjectManager,Microsoft.Extensions.Configuration.IConfiguration,OpenBots.Server.Web.Webhooks.IWebhookPublisher,OpenBots.Server.DataAccess.Repositories.Interfaces.IAutomationVersionRepository,OpenBots.Server.DataAccess.StorageContext)">
            <summary>
            Automation Controller constructor
            </summary>
            <param name="repository"></param>
            <param name="membershipManager"></param>
            <param name="manager"></param>
            <param name="userManager"></param>
            <param name="httpContextAccessor"></param>
            <param name="binaryObjectManager"></param>
            <param name="binaryObjectRepo"></param>
            <param name="configuration"></param>
            <param name="webhookPublisher"></param>
            <param name="automationVersionRepo"></param>
            <param name="dbContext"></param>
        </member>
        <member name="M:OpenBots.Server.Web.Controllers.AutomationsController.Get(System.String,System.String,System.Int32,System.Int32)">
            <summary>
            Provides a list of all automations
            </summary>
            <response code="200">Ok, a paginated list of all automations</response>
            <response code="400">Bad request</response>
            <response code="403">Forbidden, unauthorized access</response>
            <response code="404">Not found</response>
            <response code="422">Unprocessable entity</response>
            <returns>Paginated list of all automations</returns>
        </member>
        <member name="M:OpenBots.Server.Web.Controllers.AutomationsController.View(System.String,System.String,System.Int32,System.Int32)">
            <summary>
            Provides a view model list of all automations and corresponding automation version information
            </summary>
            <param name="top"></param>
            <param name="skip"></param>
            <param name="orderBy"></param>
            <param name="filter"></param>
            <response code="200">Ok, a paginated list of all automationes</response>
            <response code="400">Bad request</response>
            <response code="403">Forbidden, unauthorized access</response>  
            <response code="404">Not found</response>
            <response code="422">Unprocessable entity</response>
            <returns>Paginated list of all automationes</returns>
        </member>
        <member name="M:OpenBots.Server.Web.Controllers.AutomationsController.GetCount(System.String)">
            <summary>
            Gets count of automations in database
            </summary>
            <param name="filter"></param>
            <response code="200">Ok, a count of all automations</response>
            <response code="400">Bad request</response>
            <response code="403">Forbidden, unauthorized access</response>
            <response code="404">Not found</response>
            <response code="422">Unprocessable entity</response>
            <returns>Count of all automations</returns>
        </member>
        <member name="M:OpenBots.Server.Web.Controllers.AutomationsController.Get(System.String)">
            <summary>
            Get automation by id
            </summary>
            <param name="id"></param>
            <response code="200">Ok, if a automation exists with the given id</response>
            <response code="304">Not modified</response>
            <response code="400">Bad request, if automation id is not in proper format or a proper Guid</response>
            <response code="403">Forbidden</response>
            <response code="404">Not found, when no automation exists for the given automation id</response>
            <response code="422">Unprocessable entity</response>
            <returns>Automation entity</returns>
        </member>
        <member name="M:OpenBots.Server.Web.Controllers.AutomationsController.View(System.String)">
            <summary>
            Provides an automation's view model details for a particular automation id
            </summary>
            <param name="id">Automation id</param>
            <response code="200">Ok, if a automation exists with the given id</response>
            <response code="304">Not modified</response>
            <response code="400">Bad request, if automation id is not in the proper format or a proper Guid</response>
            <response code="403">Forbidden</response>
            <response code="404">Not found, when no automation exists for the given automation id</response>
            <response code="422">Unprocessable entity</response>
            <returns>Automation view model details for the given id</returns>
        </member>
        <member name="M:OpenBots.Server.Web.Controllers.AutomationsController.Post(OpenBots.Server.ViewModel.AutomationViewModel)">
            <summary>
            Create a new automation entity
            </summary>
            <param name="request"></param>
            <response code="200">Ok, new automation created and returned</response>
            <response code="400">Bad request, when the automation value is not in proper format</response>
            <response code="403">Forbidden, unauthorized access</response>
            <response code="409">Conflict, concurrency error</response> 
            <response code="422">Unprocessabile entity, when a duplicate record is being entered</response>
            <returns>Newly created automation details</returns>
        </member>
        <member name="M:OpenBots.Server.Web.Controllers.AutomationsController.Post(System.String,Microsoft.AspNetCore.Http.IFormFile)">
            <summary>
            Create a new binary object and upload automation file
            </summary>
            <param name="id"></param>
            <param name="file"></param>
            <response code="200">Ok, automation updated and returned</response>
            <response code="400">Bad request, when the automation value is not in proper format</response>
            <response code="403">Forbidden, unauthorized access</response>
            <response code="409">Conflict, concurrency error</response> 
            <response code="422">Unprocessabile entity, when a duplicate record is being entered</response>
            <returns>Newly updated automation details</returns>
        </member>
        <member name="M:OpenBots.Server.Web.Controllers.AutomationsController.Update(System.String,OpenBots.Server.ViewModel.AutomationViewModel)">
            <summary>
            Update automation with file 
            </summary>
            <remarks>
            Provides an action to update a automation, when automation id and the new details of automation are given
            </remarks>
            <param name="id">Automation id, produces bad request if id is null or ids don't match</param>
            <param name="request">Automation details to be updated</param>
            <response code="200">Ok, if the automation details for the given automation id have been updated</response>
            <response code="400">Bad request, if the automation id is null or ids don't match</response>
            <response code="403">Forbidden, unauthorized access</response>
            <response code="409">Conflict</response>
            <response code="422">Unprocessable entity</response>
            <returns>Ok response with the updated value details</returns>
        </member>
        <member name="M:OpenBots.Server.Web.Controllers.AutomationsController.Put(System.String,OpenBots.Server.ViewModel.AutomationViewModel)">
            <summary>
            Update a Automation 
            </summary>
            <remarks>
            Provides an action to update a automation, when automation id and the new details of automation are given
            </remarks>
            <param name="id">Automation id, produces bad request if id is null or ids don't match</param>
            <param name="value">Automation details to be updated</param>
            <response code="200">Ok, if the automation details for the given automation id have been updated</response>
            <response code="400">Bad request, if the automation id is null or ids don't match</response>
            <response code="403">Forbidden, unauthorized access</response>
            <response code="422">Unprocessable entity</response>
            <returns>Ok response with the updated value details</returns>
        </member>
        <member name="M:OpenBots.Server.Web.Controllers.AutomationsController.Patch(System.String,Microsoft.AspNetCore.JsonPatch.JsonPatchDocument{OpenBots.Server.Model.Automation})">
            <summary>
            Updates partial details of an automation
            </summary>
            <param name="id">Automation identifier</param>
            <param name="request">Value of the automation to be updated</param>
            <response code="200">Ok, if update of automation is successful</response>
            <response code="400">Bad request, if the id is null or ids don't match</response>
            <response code="403">Forbidden, unauthorized access</response>
            <response code="422">Unprocessable entity ,validation error</response>
            <returns>Ok response, if the partial automation values have been updated</returns>
        </member>
        <member name="M:OpenBots.Server.Web.Controllers.AutomationsController.Export(System.String)">
            <summary>
            Export/download a automation
            </summary>
            <param name="id"></param>
            <response code="200">Ok, if a automation exists with the given id</response>
            <response code="304">Not modified</response>
            <response code="400">Bad request, if automation id is not in proper format or a proper Guid</response>
            <response code="403">Forbidden</response>
            <response code="404">Not found, when no automation exists for the given automation id</response>
            <response code="422">Unprocessable entity</response>
            <returns>Downloaded automation file</returns>        
        </member>
        <member name="M:OpenBots.Server.Web.Controllers.AutomationsController.Delete(System.String)">
            <summary>
            Delete automation with a specified id from list of automationes
            </summary>
            <param name="id">Automation id to be deleted - throws bad request if null or empty Guid</param>
            <response code="200">Ok, when automation is soft deleted, (isDeleted flag is set to true in database)</response>
            <response code="400">Bad request, if automation id is null or empty Guid</response>
            <response code="403">Forbidden</response>
            <returns>Ok response</returns>
        </member>
        <member name="M:OpenBots.Server.Web.Controllers.AutomationsController.GetLookup">
            <summary>
            Lookup list of all automationes
            </summary>
            <response code="200">Ok, a lookup list of all automationes</response>
            <response code="400">Bad request</response>
            <response code="403">Forbidden, unauthorized access</response>
            <response code="404">Not found</response>
            <response code="422">Unprocessable entity</response>
            <returns>Lookup list of all automationes</returns>
        </member>
        <member name="T:OpenBots.Server.Web.Controllers.BinaryObjectsController">
            <summary>
            Controller for binary object files
            </summary>
        </member>
        <member name="M:OpenBots.Server.Web.Controllers.BinaryObjectsController.#ctor(OpenBots.Server.DataAccess.Repositories.IBinaryObjectRepository,OpenBots.Server.Business.IMembershipManager,OpenBots.Server.Security.ApplicationIdentityUserManager,OpenBots.Server.Business.IBinaryObjectManager,Microsoft.AspNetCore.Http.IHttpContextAccessor,Microsoft.Extensions.Configuration.IConfiguration,OpenBots.Server.Business.IOrganizationManager,OpenBots.Server.Web.Webhooks.IWebhookPublisher)">
            <summary>
            BinaryObjectsController constructor
            </summary>
            <param name="repository"></param>
            <param name="membershipManager"></param>
            <param name="userManager"></param>
            <param name="binaryObjectManager"></param>
            <param name="httpContextAccessor"></param>
            <param name="webhookPublisher"></param>
        </member>
        <member name="M:OpenBots.Server.Web.Controllers.BinaryObjectsController.Get(System.String)">
            <summary>
            Provides a list of all binary objects
            </summary>
            <param name="filter"></param>
            <response code="200">Ok, a paginated list of all binary objects</response>
            <response code="400">Bad request</response>
            <response code="403">Forbidden, unauthorized access</response> 
            <response code="404">Not found</response>
            <response code="422">Unprocessable entity</response>
            <returns>Paginated list of all binary objects</returns>
        </member>
        <member name="M:OpenBots.Server.Web.Controllers.BinaryObjectsController.GetCount(System.String)">
            <summary>
            Gets count of BinaryObjects in database
            </summary>
            <param name="filter"></param>
            <response code="200">Ok, count of binary objects</response>
            <response code="400">Bad request</response>
            <response code="403">Forbidden</response>
            <response code="404">Not found</response>
            <response code="422">Unprocessable entity</response>
            <returns>Count of all binary objects</returns>
        </member>
        <member name="M:OpenBots.Server.Web.Controllers.BinaryObjectsController.GetBinaryObject(System.String)">
            <summary>
            Provides binary object details for a particular binary object id
            </summary>
            <param name="id">Binary object id</param>
            <response code="200">Ok, if a binary object exists with the given id</response>
            <response code="304">Not modified</response>
            <response code="400">Bad request, if binary object id is not in proper format or proper Guid</response>
            <response code="403">Forbidden</response>
            <response code="404">Not found, when no binary object exists for the given binary object id</response>
            <response code="422">Unprocessable entity</response>
            <returns>Binary object details</returns>
        </member>
        <member name="M:OpenBots.Server.Web.Controllers.BinaryObjectsController.Post(OpenBots.Server.Model.BinaryObject)">
            <summary>
            Creates binary object entity in database
            </summary>
            <param name="request"></param>
            <response code="200">Ok, new binary object entity created and returned</response>
            <response code="400">Bad request, when the binary object value is not in proper format</response>
            <response code="403">Forbidden, unauthorized access</response>
            <response code="409">Conflict, concurrency error</response> 
            <response code="422">Unprocessabile entity, when a duplicate record is being entered</response>
            <returns>Newly created binary object details</returns>
        </member>
        <member name="M:OpenBots.Server.Web.Controllers.BinaryObjectsController.Post(System.String,Microsoft.AspNetCore.Http.IFormFile)">
            <summary>
            Creates binary object file and updates entity in database
            </summary>
            <param name="id"></param>
            <param name="file"></param>
            <response code="200">Ok, new binary object entity created and returned</response>
            <response code="400">Bad request, when the binary object value is not in proper format</response>
            <response code="403">Forbidden, unauthorized access</response>
            <response code="409">Conflict, concurrency error</response> 
            <response code="422">Unprocessabile entity, when a duplicate record is being entered</response>
            <returns>Updated binary object details</returns>
        </member>
        <member name="M:OpenBots.Server.Web.Controllers.BinaryObjectsController.Download(System.String)">
            <summary>
            Export/Download a binary object
            </summary>
            <param name="id"></param>
            <response code="200">Ok, if a binary object exists with the given id</response>
            <response code="304">Not modified</response>
            <response code="400">Bad request, if binary object id is not in proper format or a proper Guid</response>
            <response code="403">Forbidden</response>
            <response code="404">Not found, when no binary object exists for the given binary object id</response>
            <response code="422">Unprocessable entity</response>
            <returns>Binary object file converted back to original file format</returns>
        </member>
        <member name="M:OpenBots.Server.Web.Controllers.BinaryObjectsController.Put(System.String,OpenBots.Server.Model.BinaryObject)">
            <summary>
            Updates a binary object 
            </summary>
            <remarks>
            Provides an action to update a binary object, when binary object id and the new details of binary object are given
            </remarks>
            <param name="id">Binary object id, produces bad request if id is null or ids don't match</param>
            <param name="request">Binary object details to be updated</param>
            <response code="200">Ok, if the binary object details for the given binary object id has been updated</response>
            <response code="400">Bad request, if the binary object id is null or ids don't match</response>
            <response code="403">Forbidden, unauthorized access</response>
            <response code="409">Conflict</response>
            <response code="422">Unprocessable entity</response>
            <returns>Ok response with the updated value</returns>
        </member>
        <member name="M:OpenBots.Server.Web.Controllers.BinaryObjectsController.Update(System.String,OpenBots.Server.ViewModel.BinaryObjectViewModel)">
            <summary>
            Updates a binary object with file
            </summary>
            <param name="id"></param>
            <param name="request"></param>
            <response code="200">Ok, updated binary object details</response>
            <response code="400">Bad request</response>
            <response code="403">Forbidden</response>
            <response code="409">Conflict</response>
            <response code="422">Unprocessable entity</response>
            <returns>Updated binary object details</returns>
        </member>
        <member name="M:OpenBots.Server.Web.Controllers.BinaryObjectsController.Delete(System.String)">
            <summary>
            Deletes a binary object with a specified id from the database
            </summary>
            <param name="id">Binary object id to be deleted - throws bad request if null or empty Guid</param>
            <response code="200">Ok, when binary object is soft deleted, (isDeleted flag is set to true in database)</response>
            <response code="400">Bad request, if binary object id is null or empty Guid</response>
            <response code="403">Forbidden</response>
            <returns>Ok response</returns>
        </member>
        <member name="M:OpenBots.Server.Web.Controllers.BinaryObjectsController.Patch(System.String,Microsoft.AspNetCore.JsonPatch.JsonPatchDocument{OpenBots.Server.Model.BinaryObject})">
            <summary>
            Updates partial details of a binary object
            </summary>
            <param name="id">Binary object identifier</param>
            <param name="request">Value of the binary object to be updated</param>
            <response code="200">Ok, if update of binary object is successful</response>
            <response code="400">Bad request, if the id is null or ids don't match</response>
            <response code="403">Forbidden, unauthorized access</response>
            <response code="422">Unprocessable entity, validation error</response>
            <returns>Ok response, if the partial binary object values have been updated</returns>
        </member>
        <member name="T:OpenBots.Server.Web.Controllers.Core.ConfigurationValuesController">
            <summary>
            Controller for Configuration Values
            </summary>
        </member>
        <member name="M:OpenBots.Server.Web.Controllers.Core.ConfigurationValuesController.#ctor(OpenBots.Server.DataAccess.Repositories.Interfaces.IConfigurationValueRepository,OpenBots.Server.Security.ApplicationIdentityUserManager,Microsoft.AspNetCore.Http.IHttpContextAccessor,OpenBots.Server.Business.IMembershipManager,Microsoft.Extensions.Configuration.IConfiguration)">
            <summary>
            ConfigurationValues constructor
            </summary>
            <param name="repository"></param>
            <param name="userManager"></param>
            <param name="httpContextAccessor"></param>
            <param name="membershipManager"></param>
            <param name="configuration"></param>
        </member>
        <member name="M:OpenBots.Server.Web.Controllers.Core.ConfigurationValuesController.Get(System.String,System.String,System.Int32,System.Int32)">
            <summary>
            Provides a list of all configuration values
            </summary>
            <response code="200">Ok, a Paginated list of all configuration values</response>
            <response code="400">Bad request</response>
            <response code="403">Forbidden, unauthorized access</response>        
            <response code="422">Unprocessable entity</response>
            <returns>Paginated list of all configuration values</returns>
        </member>
        <member name="M:OpenBots.Server.Web.Controllers.Core.ConfigurationValuesController.GetCount(System.String)">
            <summary>
            Gets count of configuration values in database
            </summary>
            <param name="filter"></param>
            <response code="200">Ok, a count of all configuration values</response>
            <response code="400">Bad request</response>
            <response code="403">Forbidden, unauthorized access</response>
            <response code="404">Not found</response>
            <response code="422">Unprocessable entity</response>
            <returns>Count of configuration values</returns>
        </member>
        <member name="M:OpenBots.Server.Web.Controllers.Core.ConfigurationValuesController.Get(System.String)">
            <summary>
            Get configuration value by id
            </summary>
            <param name="id"></param>
            <response code="200">Ok, if a cofiguration value exists with the given id</response>
            <response code="304">Not modified</response>
            <response code="400">Bad request, if configuration value id is not in proper format or proper Guid</response>
            <response code="403">Forbidden</response>
            <response code="404">Not found, when no configuration value exists for the given email setting id</response>
            <response code="422">Unprocessable entity</response>
            <returns>Configuration value details</returns>
        </member>
        <member name="M:OpenBots.Server.Web.Controllers.Core.ConfigurationValuesController.Post(OpenBots.Server.Model.Configuration.ConfigurationValue)">
             <summary>
             Adds a new configuration value to the existing configuration values
             </summary>
             <param name="request"></param>
             <response code="200">Ok, new confiuration value created and returned</response>
             <response code="400">Bad request, when the configuration value's value is not in proper format</response>
             <response code="403">Forbidden, unauthorized access</response>
            <response code="409">Conflict, concurrency error</response> 
             <response code="422">Unprocessabile entity, when a duplicate record is being entered</response>
             <returns>Newly created unique configuration value</returns>
        </member>
        <member name="M:OpenBots.Server.Web.Controllers.Core.ConfigurationValuesController.Put(System.String,OpenBots.Server.Model.Configuration.ConfigurationValue)">
            <summary>
            Updates configuration value
            </summary>
            <remarks>
            Provides an action to update a configuration value, when configuration value id and the new details of configuration value are given
            </remarks>
            <param name="id">Configuration value id, produces bad request if id is null or ids don't match</param>
            <param name="request">Configuration value details to be updated</param>
            <response code="200">Ok, if the configuration setting details for the given configuration value id have been updated.</response>
            <response code="400">Bad request, if the configuration value id is null or ids don't match</response>
            <response code="403">Forbidden, unauthorized access</response>
            <response code="409">Conflict</response>
            <response code="422">Unprocessable entity</response>
            <returns>Ok response with the updated value</returns>
        </member>
        <member name="M:OpenBots.Server.Web.Controllers.Core.ConfigurationValuesController.Patch(System.String,Microsoft.AspNetCore.JsonPatch.JsonPatchDocument{OpenBots.Server.Model.Configuration.ConfigurationValue})">
            <summary>
            Updates partial details of configuration value
            </summary>
            <param name="id"></param>
            <param name="request"></param>
            <response code="200">Ok, if update of configuration value is successful</response>
            <response code="400">Bad request, if the id is null or ids don't match</response>
            <response code="403">Forbidden, unauthorized access</response>
            <response code="422">Unprocessable entity, validation error</response>
            <returns>Ok response</returns>
        </member>
        <member name="M:OpenBots.Server.Web.Controllers.Core.ConfigurationValuesController.Delete(System.String)">
            <summary>
            Delete configuration value with a specified id from configuration value data table
            </summary>
            <param name="id">Configuration value id to be deleted - throws bad request if null or empty Guid</param>
            <response code="200">Ok, when configuration value is soft deleted, (isDeleted flag is set to true in database)</response>
            <response code="400">Bad request, if configuration value id is null or empty Guid</response>
            <response code="403">Forbidden</response>
            <returns>Ok response</returns>
        </member>
        <member name="T:OpenBots.Server.Web.Controllers.LoggerController">
            <summary>
            Controller for logging Serilogs
            </summary>
        </member>
        <member name="M:OpenBots.Server.Web.Controllers.LoggerController.#ctor(Microsoft.Extensions.Configuration.IConfiguration)">
            <summary>
            LoggerController constructor
            </summary>
            <param name="configuration"></param>
        </member>
        <member name="M:OpenBots.Server.Web.Controllers.LoggerController.Post(System.Object,System.String)">
            <summary>
            Adds serilog logs from the agent to the automation logs table
            </summary>
            <param name="request"></param>
            <response code="200">Ok, all logs were stored correctly</response>
            <response code="400">Bad request, when the log value is not in proper format</response>
            <response code="403">Forbidden, unauthorized access</response>
            <response code="409">Conflict, concurrency error</response> 
            <response code="422">Unprocessabile entity, when a duplicate record is being entered</response>
            <returns>Ok response if the logs were successfully stored</returns>
        </member>
        <member name="T:OpenBots.Server.Web.Controllers.EmailConfiguration.EmailAccountsController">
            <summary>
            Controller for email accounts
            </summary>
        </member>
        <member name="M:OpenBots.Server.Web.Controllers.EmailConfiguration.EmailAccountsController.#ctor(OpenBots.Server.DataAccess.Repositories.IEmailAccountRepository,OpenBots.Server.Business.IMembershipManager,OpenBots.Server.Security.ApplicationIdentityUserManager,Microsoft.Extensions.Configuration.IConfiguration,Microsoft.AspNetCore.Http.IHttpContextAccessor)">
            <summary>
            EmailLogsController constructor
            </summary>
            <param name="repository"></param>
            <param name="membershipManager"></param>
            <param name="userManager"></param>
            <param name="httpContextAccessor"></param>
            <param name="configuration"></param>
        </member>
        <member name="M:OpenBots.Server.Web.Controllers.EmailConfiguration.EmailAccountsController.Get(System.String,System.String,System.Int32,System.Int32)">
            <summary>
            Provides a list of all email accounts
            </summary>
            <param name="top"></param>
            <param name="skip"></param>
            <param name="orderBy"></param>
            <param name="filter"></param>
            <response code="200">Ok, a paginated list of all email accounts</response>
            <response code="400">Bad request</response>
            <response code="403">Forbidden, unauthorized access</response>
            <response code="422">Unprocessable entity</response>
            <returns>Paginated list of all email accounts</returns>
        </member>
        <member name="M:OpenBots.Server.Web.Controllers.EmailConfiguration.EmailAccountsController.GetCount(System.String)">
            <summary>
            Gets count of email accounts in database
            </summary>
            <param name="filter"></param>
            <response code="200">Ok, a count of all email accounts</response>
            <response code="400">Bad request</response>
            <response code="403">Forbidden, unauthorized access</response>
            <response code="404">Not found</response>
            <response code="422">Unprocessable etity</response>
            <returns>Count of all email accounts</returns>
        </member>
        <member name="M:OpenBots.Server.Web.Controllers.EmailConfiguration.EmailAccountsController.Get(System.String)">
            <summary>
            Get email account by id
            </summary>
            <param name="id"></param>
            <response code="200">Ok, if an email account exists with the given id</response>
            <response code="304">Not modified</response>
            <response code="400">Bad request, if email account id is not in proper format or proper Guid</response>
            <response code="403">Forbidden</response>
            <response code="404">Not found, when no email account exists for the given email account id</response>
            <response code="422">Unprocessable entity</response>
            <returns>Email account details</returns>
        </member>
        <member name="M:OpenBots.Server.Web.Controllers.EmailConfiguration.EmailAccountsController.Post(OpenBots.Server.Model.Configuration.EmailAccount)">
             <summary>
             Adds a new email account to the existing email accounts
             </summary>
             <remarks>
             Adds the email account with unique email account id to the existing email accounts
             </remarks>
             <param name="request"></param>
             <response code="200">Ok, new email account created and returned</response>
             <response code="400">Bad request, when the email account value is not in proper format</response>
             <response code="403">Forbidden, unauthorized access</response>
            <response code="409">Conflict, concurrency error</response> 
             <response code="422">Unprocessabile entity, when a duplicate record is being entered</response>
             <returns> Newly created unique email account </returns>
        </member>
        <member name="M:OpenBots.Server.Web.Controllers.EmailConfiguration.EmailAccountsController.Put(System.String,OpenBots.Server.Model.Configuration.EmailAccount)">
            <summary>
            Updates an email account
            </summary>
            <remarks>
            Provides an action to update an email account, when email account id and the new details of email account are given
            </remarks>
            <param name="id">Email account id, produces bad request if id is null or ids don't match</param>
            <param name="request">Email account details to be updated</param>
            <response code="200">Ok, if the email account details for the given email account id have been updated.</response>
            <response code="400">Bad request, if the email account id is null or ids don't match</response>
            <response code="403">Forbidden, unauthorized access</response>
            <response code="409">Conflict</response>
            <response code="422">Unprocessable entity</response>
            <returns>Ok response with the updated value</returns>
        </member>
        <member name="M:OpenBots.Server.Web.Controllers.EmailConfiguration.EmailAccountsController.Patch(System.String,Microsoft.AspNetCore.JsonPatch.JsonPatchDocument{OpenBots.Server.Model.Configuration.EmailAccount})">
            <summary>
            Updates partial details of an email account.
            </summary>
            <param name="id"></param>
            <param name="request"></param>
            <response code="200">Ok, if update of email account is successful</response>
            <response code="400">Bad request, if the id is null or ids dont match.</response>
            <response code="403">Forbidden, unauthorized access</response>
            <response code="422">Unprocessable entity, validation error</response>
            <returns>Ok response</returns>
        </member>
        <member name="M:OpenBots.Server.Web.Controllers.EmailConfiguration.EmailAccountsController.Delete(System.String)">
            <summary>
            Delete email account with a specified id from list of email accounts
            </summary>
            <param name="id">Email account id to be deleted - throws  bad request if null or empty Guid/</param>
            <response code="200">Ok, when email account is soft deleted,(isDeleted flag is set to true in database)</response>
            <response code="400">Bad request, if email account id is null or empty Guid</response>
            <response code="403">Forbidden</response>
            <returns>Ok response</returns>
        </member>
        <member name="M:OpenBots.Server.Web.Controllers.EmailConfiguration.EmailAccountsController.GetLookup">
            <summary>
            Lookup list of all email accounts
            </summary>
            <response code="200">Ok, a lookup list of all email accounts</response>
            <response code="400">Bad request</response>
            <response code="403">Forbidden, unauthorized access</response>
            <response code="404">Not found</response>
            <response code="422">Unprocessable entity</response>
            <returns>Lookup list of all email accounts</returns>
        </member>
        <member name="T:OpenBots.Server.Web.Controllers.EmailConfiguration.EmailsController">
            <summary>
            Controller for emails
            </summary>
        </member>
        <member name="M:OpenBots.Server.Web.Controllers.EmailConfiguration.EmailsController.#ctor(OpenBots.Server.DataAccess.Repositories.IEmailRepository,OpenBots.Server.Business.IMembershipManager,OpenBots.Server.Security.ApplicationIdentityUserManager,Microsoft.Extensions.Configuration.IConfiguration,Microsoft.AspNetCore.Http.IHttpContextAccessor,OpenBots.Server.DataAccess.Repositories.IBinaryObjectRepository,OpenBots.Server.Business.IEmailManager,OpenBots.Server.DataAccess.Repositories.Interfaces.IEmailAttachmentRepository)">
            <summary>
            EmailsController constructor
            </summary>
            <param name="repository"></param>
            <param name="membershipManager"></param>
            <param name="userManager"></param>
            <param name="httpContextAccessor"></param>
            <param name="configuration"></param>
            <param name="binaryObjectRepository"></param>
            <param name="manager"></param>
            <param name="emailAttachmentRepository"></param>
        </member>
        <member name="M:OpenBots.Server.Web.Controllers.EmailConfiguration.EmailsController.Get(System.String,System.String,System.Int32,System.Int32)">
            <summary>
            Provides all emails
            </summary>
            <param name="filter"></param>
            <param name="orderBy"></param>
            <param name="skip"></param>
            <param name="top"></param>
            <response code="200">Ok, a paginated list of emails</response>
            <response code="400">Bad request</response>
            <response code="403">Forbidden, unauthorized access</response>
            <response code="404">Not found</response>
            <response code="422">Unprocessable entity</response>
            <returns>Paginated list of emails</returns>
        </member>
        <member name="M:OpenBots.Server.Web.Controllers.EmailConfiguration.EmailsController.GetCount(System.String)">
            <summary>
            Gets count of emails in database
            </summary>
            <param name="filter"></param>
            <response code="200">Ok, a count of all emails</response>
            <response code="400">Bad request</response>
            <response code="403">Forbidden, unauthorized access</response>
            <response code="404">Not found</response>
            <response code="422">Unprocessable entity</response>
            <returns>Count of all emails</returns>
        </member>
        <member name="M:OpenBots.Server.Web.Controllers.EmailConfiguration.EmailsController.Get(System.String)">
            <summary>
            Get email by id
            </summary>
            <param name="id"></param>
            <response code="200">Ok, if an email exists with the given id</response>
            <response code="304">Not modified</response>
            <response code="400">Bad request, if email id is not in proper format or proper Guid</response>
            <response code="403">Forbidden</response>
            <response code="404">Not found, when no email exists for the given email id</response>
            <response code="422">Unprocessable entity</response>
            <returns>Email details</returns>
        </member>
        <member name="M:OpenBots.Server.Web.Controllers.EmailConfiguration.EmailsController.GetView(System.String)">
            <summary>
            Get email by id view
            </summary>
            <param name="id"></param>
            <response code="200">Ok, if an email exists with the given id</response>
            <response code="304">Not modified</response>
            <response code="400">Bad request, if email id is not in proper format or proper Guid</response>
            <response code="403">Forbidden</response>
            <response code="404">Not found, when no email exists for the given email id</response>
            <response code="422">Unprocessable entity</response>
            <returns>Email details</returns>
        </member>
        <member name="M:OpenBots.Server.Web.Controllers.EmailConfiguration.EmailsController.Post(OpenBots.Server.ViewModel.Email.AddEmailViewModel)">
             <summary>
             Adds a new draft email to the existing emails
             </summary>
             <remarks>
             Adds the email with unique email id to the existing emails
             </remarks>
             <param name="request"></param>
             <response code="200">Ok, new email created and returned</response>
             <response code="400">Bad request, when the email value is not in proper format</response>
             <response code="403">Forbidden, unauthorized access</response>
            <response code="409">Conflict, concurrency error</response> 
             <response code="422">Unprocessabile entity</response>
             <returns> Newly created unique email and attachments, if any</returns>
        </member>
        <member name="M:OpenBots.Server.Web.Controllers.EmailConfiguration.EmailsController.Send(System.String,OpenBots.Server.ViewModel.Email.SendEmailViewModel,System.String)">
            <summary>
            Send email draft with file attachments
            </summary>
            <param name="id"></param>
            <param name="request"></param>
            <param name="emailAccountName"></param>
            <response code="200">Ok, if the email details for the given email id have been updated</response>
            <response code="400">Bad request, if the email id is null or ids don't match</response>
            <response code="403">Forbidden, unauthorized access</response>
            <response code="409">Conflict</response>
            <response code="422">Unprocessable entity</response>
            <returns>200 Ok response</returns>
        </member>
        <member name="M:OpenBots.Server.Web.Controllers.EmailConfiguration.EmailsController.Post(OpenBots.Server.ViewModel.Email.SendEmailViewModel,System.String)">
             <summary>
             Sends a new email
             </summary>
             <remarks>
             Creates an EmailMessage with file attachments to send to an email address
             </remarks>
             <param name="request"></param>
             <param name="accountName"></param>
             <response code="200">Ok, new email message created and sent</response>
             <response code="400">Bad request, when the email message value is not in proper format</response>
             <response code="403">Forbidden, unauthorized access</response>
            <response code="409">Conflict, concurrency error</response> 
             <response code="422">Unprocessabile entity, when a duplicate record is being entered</response>
             <returns>Ok response</returns>
        </member>
        <member name="M:OpenBots.Server.Web.Controllers.EmailConfiguration.EmailsController.Put(System.String,OpenBots.Server.Model.Configuration.Email)">
            <summary>
            Updates email
            </summary>
            <remarks>
            Provides an action to update email, when email id and the new details of email are given
            </remarks>
            <param name="id">Email id, produces bad request if id is null or ids don't match</param>
            <param name="request">Email details to be updated</param>
            <response code="200">Ok, if the email details for the given email id have been updated</response>
            <response code="400">Bad request, if the email id is null or ids don't match</response>
            <response code="403">Forbidden, unauthorized access</response>
            <response code="409">Conflict</response>
            <response code="422">Unprocessable entity</response>
            <returns>Ok response with the updated value</returns>
        </member>
        <member name="M:OpenBots.Server.Web.Controllers.EmailConfiguration.EmailsController.UpdateFiles(System.String,OpenBots.Server.ViewModel.Email.UpdateEmailViewModel)">
            <summary>
            Update the email with file attachments
            </summary>
            <param name="id"></param>
            <param name="request"></param>
            <response code="200">Ok response</response>
            <response code="403">Forbidden, unauthorized access</response>
            <response code="422">Unprocessable entity, validation error</response>
            <returns>Ok response</returns>
        </member>
        <member name="M:OpenBots.Server.Web.Controllers.EmailConfiguration.EmailsController.Patch(System.String,Microsoft.AspNetCore.JsonPatch.JsonPatchDocument{OpenBots.Server.Model.Configuration.Email})">
            <summary>
            Updates partial details of email
            </summary>
            <param name="id"></param>
            <param name="request"></param>
            <response code="200">Ok, if update of email is successful</response>
            <response code="400">Bad request, if the id is null or ids dont match</response>
            <response code="403">Forbidden, unauthorized access</response>
            <response code="422">Unprocessable entity, validation error</response>
            <returns>Ok response</returns>
        </member>
        <member name="M:OpenBots.Server.Web.Controllers.EmailConfiguration.EmailsController.Delete(System.String)">
            <summary>
            Delete email with a specified id from list of emails
            </summary>
            <param name="id">Email id to be deleted - throws bad request if null or empty Guid/</param>
            <response code="200">Ok, when email is soft deleted, (isDeleted flag is set to true in database)</response>
            <response code="400">Bad request, if email id is null or empty Guid</response>
            <response code="403">Forbidden</response>
            <returns>Ok response</returns>
        </member>
        <member name="T:OpenBots.Server.Web.Controllers.EmailConfiguration.EmailSettingsController">
            <summary>
            Controller for email settings
            </summary>
        </member>
        <member name="M:OpenBots.Server.Web.Controllers.EmailConfiguration.EmailSettingsController.#ctor(OpenBots.Server.DataAccess.Repositories.IEmailSettingsRepository,OpenBots.Server.Business.IMembershipManager,OpenBots.Server.Security.ApplicationIdentityUserManager,Microsoft.Extensions.Configuration.IConfiguration,Microsoft.AspNetCore.Http.IHttpContextAccessor,OpenBots.Server.Business.IOrganizationManager)">
            <summary>
            EmailSettingsController constructor
            </summary>
            <param name="repository"></param>
            <param name="membershipManager"></param>
            <param name="userManager"></param>
            <param name="httpContextAccessor"></param>
            <param name="configuration"></param>
            <param name="organizationManager"></param>
        </member>
        <member name="M:OpenBots.Server.Web.Controllers.EmailConfiguration.EmailSettingsController.Get(System.String,System.String,System.Int32,System.Int32)">
            <summary>
            Provides all email settings
            </summary>
            <param name="filter"></param>
            <param name="orderBy"></param>
            <param name="skip"></param>
            <param name="top"></param>
            <response code="200">Ok, a paginated list of email settings</response>
            <response code="400">Bad request</response>
            <response code="403">Forbidden, unauthorized access</response>
            <response code="404">Not found</response>
            <response code="422">Unprocessable entity</response>
            <returns>Paginated list of email settings</returns>
        </member>
        <member name="M:OpenBots.Server.Web.Controllers.EmailConfiguration.EmailSettingsController.GetCount(System.String)">
            <summary>
            Gets count of email settings in database
            </summary>
            <param name="filter"></param>
            <response code="200">Ok, a count of all email settings</response>
            <response code="400">Bad request</response>
            <response code="403">Forbidden, unauthorized access</response>
            <response code="404">Not found</response>
            <response code="422">Unprocessable entity</response>
            <returns>Count of email settings</returns>
        </member>
        <member name="M:OpenBots.Server.Web.Controllers.EmailConfiguration.EmailSettingsController.Get(System.String)">
            <summary>
            Get email setting by id
            </summary>
            <param name="id"></param>
            <response code="200">Ok, if an email setting exists with the given id</response>
            <response code="304">Not modified</response>
            <response code="400">Bad request, if email setting id is not in proper format or proper Guid</response>
            <response code="403">Forbidden</response>
            <response code="404">Not found, when no email setting exists for the given email setting id</response>
            <response code="422">Unprocessable entity</response>
            <returns>Email setting details</returns>
        </member>
        <member name="M:OpenBots.Server.Web.Controllers.EmailConfiguration.EmailSettingsController.Post(OpenBots.Server.Model.Configuration.EmailSettings)">
             <summary>
             Adds a new email setting to the existing email settings
             </summary>
             <param name="request"></param>
             <response code="200">Ok, new email setting created and returned</response>
             <response code="400">Bad request, when the email setting value is not in proper format</response>
             <response code="403">Forbidden, unauthorized access</response>
            <response code="409">Conflict, concurrency error</response> 
             <response code="422">Unprocessabile entity, when a duplicate record is being entered</response>
             <returns>Newly created unique email settings</returns>
        </member>
        <member name="M:OpenBots.Server.Web.Controllers.EmailConfiguration.EmailSettingsController.Put(System.String,OpenBots.Server.Model.Configuration.EmailSettings)">
            <summary>
            Updates email settings
            </summary>
            <remarks>
            Provides an action to update email settings, when email setting id and the new details of email setting are given
            </remarks>
            <param name="id">Email setting id, produces bad request if id is null or ids don't match</param>
            <param name="request">Email setting details to be updated</param>
            <response code="200">Ok, if the email setting details for the given email setting id have been updated</response>
            <response code="400">Bad request, if the email setting id is null or ids don't match</response>
            <response code="403">Forbidden, unauthorized access</response>
            <response code="409">Conflict</response>
            <response code="422">Unprocessable entity</response>
            <returns>Ok response with the updated value</returns>
        </member>
        <member name="M:OpenBots.Server.Web.Controllers.EmailConfiguration.EmailSettingsController.Patch(System.String,Microsoft.AspNetCore.JsonPatch.JsonPatchDocument{OpenBots.Server.Model.Configuration.EmailSettings})">
            <summary>
            Updates partial details of email settings
            </summary>
            <param name="id"></param>
            <param name="request"></param>
            <response code="200">Ok, if update of email settings is successful</response>
            <response code="400">Bad request, if the id is null or ids don't match</response>
            <response code="403">Forbidden, unauthorized access</response>
            <response code="422">Unprocessable entity, validation error</response>
            <returns>Ok response</returns>
        </member>
        <member name="M:OpenBots.Server.Web.Controllers.EmailConfiguration.EmailSettingsController.Delete(System.String)">
            <summary>
            Delete email settings with a specified id from email settings data table.
            </summary>
            <param name="id">Email setting id to be deleted - throws bad request if null or empty Guid</param>
            <response code="200">Ok, when email setting is soft deleted, (isDeleted flag is set to true in database)</response>
            <response code="400">Bad request, if email setting id is null or empty Guid</response>
            <response code="403">Forbidden</response>
            <returns>Ok response</returns>
        </member>
        <member name="T:OpenBots.Server.Web.Controllers.Email.EmailAttachmentsController">
            <summary>
            Controller for email attachments
            </summary>
        </member>
        <member name="M:OpenBots.Server.Web.Controllers.Email.EmailAttachmentsController.#ctor(OpenBots.Server.DataAccess.Repositories.Interfaces.IEmailAttachmentRepository,Microsoft.AspNetCore.Http.IHttpContextAccessor,OpenBots.Server.Security.ApplicationIdentityUserManager,OpenBots.Server.Business.IMembershipManager,Microsoft.Extensions.Configuration.IConfiguration,OpenBots.Server.DataAccess.Repositories.IBinaryObjectRepository,OpenBots.Server.Business.IBinaryObjectManager)">
            <summary>
            EmailAttachmentsController constuctor
            </summary>
            <param name="repository"></param>
            <param name="httpContextAccessor"></param>
            <param name="userManager"></param>
            <param name="membershipManager"></param>
            <param name="configuration"></param>
            <param name="binaryObjectRepository"></param>
            <param name="binaryObjectManager"></param>
        </member>
        <member name="M:OpenBots.Server.Web.Controllers.Email.EmailAttachmentsController.Get(System.String,System.String,System.String,System.Int32,System.Int32)">
            <summary>
            Provides all email attachments for an email
            </summary>
            <param name="emailId"></param>
            <param name="filter"></param>
            <param name="orderBy"></param>
            <param name="skip"></param>
            <param name="top"></param>
            <response code="200">Ok, a paginated list of email attachments</response>
            <response code="400">Bad request</response>
            <response code="403">Forbidden, unauthorized access</response>
            <response code="404">Not found</response>
            <response code="422">Unprocessable entity</response>
            <returns>Paginated list of email attachments</returns>
        </member>
        <member name="M:OpenBots.Server.Web.Controllers.Email.EmailAttachmentsController.GetCount(System.String,System.String)">
            <summary>
            Gets count of email attachments related to an email in the database
            </summary>
            <param name="emailId"></param>
            <param name="filter"></param>
            <response code="200">Ok, a count of all email attachments</response>
            <response code="400">Bad request</response>
            <response code="403">Forbidden, unauthorized access</response>
            <response code="404">Not found</response>
            <response code="422">Unprocessable entity</response>
            <returns>Count of all email attachments</returns>
        </member>
        <member name="M:OpenBots.Server.Web.Controllers.Email.EmailAttachmentsController.Get(System.String)">
            <summary>
            Get email attachment by id
            </summary>
            <param name="id"></param>
            <response code="200">Ok, if an email attachment exists with the given id</response>
            <response code="304">Not modified</response>
            <response code="400">Bad request, if email attachment id is not in proper format or proper Guid</response>
            <response code="403">Forbidden</response>
            <response code="404">Not found, when no email attachment exists for the given email attachment id</response>
            <response code="422">Unprocessable entity</response>
            <returns>Email attachment details</returns>
        </member>
        <member name="M:OpenBots.Server.Web.Controllers.Email.EmailAttachmentsController.Post(System.String,System.String[])">
             <summary>
             Adds email attachments using existing binary objects to the existing email attachments
             </summary>
             <remarks>
             Adds the email attachments with unique email attachment ids to the existing email attachments
             </remarks>
             <param name="emailId"></param>
             <param name="requests"></param>
             <response code="200">Ok, new email attachments created and returned</response>
             <response code="400">Bad request, when the email attachment values are not in proper format</response>
             <response code="403">Forbidden, unauthorized access</response>
            <response code="409">Conflict, concurrency error</response> 
             <response code="422">Unprocessabile entity</response>
             <returns> Newly created unique email attachments</returns>
        </member>
        <member name="M:OpenBots.Server.Web.Controllers.Email.EmailAttachmentsController.Attach(System.String,Microsoft.AspNetCore.Http.IFormFile[])">
             <summary>
             Attach files to an email
             </summary>
             <param name="emailId"></param>
             <param name="files"></param>
             <response code="200">Ok, new binary object created and returned</response>
             <response code="400">Bad request, when the binary object value is not in proper format</response>
             <response code="403">Forbidden, unauthorized access</response>
            <response code="409">Conflict, concurrency error</response> 
             <response code="422">Unprocessabile entity</response>
             <returns> Newly created unique binary object</returns>
        </member>
        <member name="M:OpenBots.Server.Web.Controllers.Email.EmailAttachmentsController.Put(System.String,OpenBots.Server.Model.Core.EmailAttachment)">
            <summary>
            Updates email attachment
            </summary>
            <remarks>
            Provides an action to update email attachment, when email attachment id and the new details of email attachment are given
            </remarks>
            <param name="id">Email attachment id, produces bad request if id is null or ids don't match</param>
            <param name="request">Email attachment details to be updated</param>
            <response code="200">Ok, if the email attachment details for the given email attachment id have been updated</response>
            <response code="400">Bad request, if the email attachment id is null or ids don't match</response>
            <response code="403">Forbidden, unauthorized access</response>
            <response code="409">Conflict</response>
            <response code="422">Unprocessable entity</response>
            <returns>Ok response with the updated value</returns>
        </member>
        <member name="M:OpenBots.Server.Web.Controllers.Email.EmailAttachmentsController.Put(System.String,OpenBots.Server.ViewModel.Email.UpdateEmailAttachmentViewModel)">
            <summary>
            Updates an email attachment with file 
            </summary>
            <remarks>
            Provides an action to update an email attachment with file, when email attachment id and the new details of the email attachment are given
            </remarks>
            <param name="id">Email attachment id, produces bad request if id is null or ids don't match</param>
            <param name="request">New file to update email attachment</param>
            <response code="200">Ok, if the email attachment details for the given email attachment id have been updated</response>
            <response code="400">Bad request, if the email attachment id is null or ids don't match</response>
            <response code="403">Forbidden, unauthorized access</response>
            <response code="422">Unprocessable entity</response>
            <returns>Ok response with the updated email attachment value</returns>
        </member>
        <member name="M:OpenBots.Server.Web.Controllers.Email.EmailAttachmentsController.Patch(System.String,Microsoft.AspNetCore.JsonPatch.JsonPatchDocument{OpenBots.Server.Model.Core.EmailAttachment})">
            <summary>
            Updates partial details of email attachment
            </summary>
            <param name="id"></param>
            <param name="request"></param>
            <response code="200">Ok, if update of email attachment is successful</response>
            <response code="400">Bad request, if the id is null or ids dont match</response>
            <response code="403">Forbidden, unauthorized access</response>
            <response code="422">Unprocessable entity, validation error</response>
            <returns>Ok response</returns>
        </member>
        <member name="M:OpenBots.Server.Web.Controllers.Email.EmailAttachmentsController.Delete(System.String)">
            <summary>
            Delete all email attachments with a specified email id from list of email attachments
            </summary>
            <param name="emailId">Email id to delete all email attachments from - throws bad request if null or empty Guid/</param>
            <response code="200">Ok, when email attachments are soft deleted, (isDeleted flag is set to true in database)</response>
            <response code="400">Bad request, if email id is null or empty Guid</response>
            <response code="403">Forbidden</response>
            <returns>Ok response</returns>
        </member>
        <member name="M:OpenBots.Server.Web.Controllers.Email.EmailAttachmentsController.DeleteAttachment(System.String)">
            <summary>
            Delete specific email attachment from list of email attachments
            </summary>
            <param name="id">Email attachment id to be deleted - throws bad request if null or empty Guid/</param>
            <response code="200">Ok, when email attachment is soft deleted, (isDeleted flag is set to true in database)</response>
            <response code="400">Bad request, if email attachment id is null or empty Guid</response>
            <response code="403">Forbidden</response>
            <returns>Ok response</returns>
        </member>
        <member name="T:OpenBots.Server.Web.Controllers.Queue.QueueItemAttachmentsController">
            <summary>
            Controller for queue item attachments
            </summary>
        </member>
        <member name="M:OpenBots.Server.Web.Controllers.Queue.QueueItemAttachmentsController.#ctor(OpenBots.Server.DataAccess.Repositories.Interfaces.IQueueItemAttachmentRepository,Microsoft.AspNetCore.Http.IHttpContextAccessor,OpenBots.Server.Security.ApplicationIdentityUserManager,OpenBots.Server.Business.IMembershipManager,Microsoft.Extensions.Configuration.IConfiguration,OpenBots.Server.Business.IBinaryObjectManager,OpenBots.Server.DataAccess.Repositories.IBinaryObjectRepository,OpenBots.Server.DataAccess.Repositories.IQueueItemRepository,OpenBots.Server.Business.IQueueItemManager,OpenBots.Server.Web.Webhooks.IWebhookPublisher)">
            <summary>
            QueueItemAttachmentsController constructor
            </summary>
            <param name="repository"></param>
            <param name="httpContextAccessor"></param>
            <param name="userManager"></param>
            <param name="membershipManager"></param>
            <param name="configuration"></param>
            <param name="binaryObjectManager"></param>
            <param name="binaryObjectRepository"></param>
            <param name="queueItemRepository"></param>
            <param name="manager"></param>
            <param name="webhookPublisher"></param>
        </member>
        <member name="M:OpenBots.Server.Web.Controllers.Queue.QueueItemAttachmentsController.Get(System.String,System.String,System.String,System.Int32,System.Int32)">
            <summary>
            Provides all queue item attachments for a queue item
            </summary>
            <param name="queueItemId"></param>
            <param name="filter"></param>
            <param name="orderBy"></param>
            <param name="skip"></param>
            <param name="top"></param>
            <response code="200">Ok, a paginated list of queue item attachments</response>
            <response code="400">Bad request</response>
            <response code="403">Forbidden, unauthorized access</response>
            <response code="404">Not found</response>
            <response code="422">Unprocessable entity</response>
            <returns>Paginated list of queue item attachments</returns>
        </member>
        <member name="M:OpenBots.Server.Web.Controllers.Queue.QueueItemAttachmentsController.GetView(System.String,System.String,System.String,System.Int32,System.Int32)">
            <summary>
            Provides all queue item attachments view for a queue item
            </summary>
            <param name="filter"></param>
            <param name="orderBy"></param>
            <param name="skip"></param>
            <param name="top"></param>
            <response code="200">Ok, a paginated list of queue item attachments view</response>
            <response code="400">Bad request</response>
            <response code="403">Forbidden, unauthorized access</response>
            <response code="404">Not found</response>
            <response code="422">Unprocessable entity</response>
            <returns>Paginated list of queue item attachments view</returns>
        </member>
        <member name="M:OpenBots.Server.Web.Controllers.Queue.QueueItemAttachmentsController.GetCount(System.String,System.String)">
            <summary>
            Gets count of queue item attachments related to a queue item in the database
            </summary>
            <param name="queueItemId"></param>
            <param name="filter"></param>
            <response code="200">Ok, a count of all queue item attachments</response>
            <response code="400">Bad request</response>
            <response code="403">Forbidden, unauthorized access</response>
            <response code="404">Not found</response>
            <response code="422">Unprocessable entity</response>
            <returns>Count of all queue item attachments</returns>
        </member>
        <member name="M:OpenBots.Server.Web.Controllers.Queue.QueueItemAttachmentsController.Get(System.String)">
            <summary>
            Get queue item attachment by id
            </summary>
            <param name="id"></param>
            <response code="200">Ok, if a queue item attachment exists with the given id</response>
            <response code="304">Not modified</response>
            <response code="400">Bad request, if queue item attachment id is not in proper format or proper Guid</response>
            <response code="403">Forbidden</response>
            <response code="404">Not found, when no queue item attachment exists for the given queue item attachment id</response>
            <response code="422">Unprocessable entity</response>
            <returns>Queue item attachment details</returns>
        </member>
        <member name="M:OpenBots.Server.Web.Controllers.Queue.QueueItemAttachmentsController.Post(System.String,System.String[])">
             <summary>
             Adds queue item attachments using existing binary objects to the existing queue item attachments
             </summary>
             <remarks>
             Adds the queue item attachments with unique queue item attachment ids to the existing queue item attachments
             </remarks>
             <param name="queueItemId"></param>
             <param name="requests"></param>
             <response code="200">Ok, new queue item attachments created and returned</response>
             <response code="400">Bad request, when the queue item attachment values are not in proper format</response>
             <response code="403">Forbidden, unauthorized access</response>
            <response code="409">Conflict, concurrency error</response> 
             <response code="422">Unprocessabile entity</response>
             <returns> Newly created unique queue item attachments</returns>
        </member>
        <member name="M:OpenBots.Server.Web.Controllers.Queue.QueueItemAttachmentsController.Attach(System.String,Microsoft.AspNetCore.Http.IFormFile[])">
             <summary>
             Attach files to a queue item
             </summary>
             <param name="queueItemId"></param>
             <param name="files"></param>
             <response code="200">Ok, new binary object created and returned</response>
             <response code="400">Bad request, when the binary object value is not in proper format</response>
             <response code="403">Forbidden, unauthorized access</response>
            <response code="409">Conflict, concurrency error</response> 
             <response code="422">Unprocessabile entity</response>
             <returns> Newly created unique binary object</returns>
        </member>
        <member name="M:OpenBots.Server.Web.Controllers.Queue.QueueItemAttachmentsController.Put(System.String,System.String,Microsoft.AspNetCore.Http.IFormFile)">
            <summary>
            Updates a queue item attachment with file 
            </summary>
            <remarks>
            Provides an action to update a queue item attachment with file, when queue item attachment id and the new details of the queue item attachment are given
            </remarks>
            <param name="queueItemId">Queue item id</param>
            <param name="id">Queue item attachment id, produces bad request if id is null or ids don't match</param>
            <param name="file">New file to update queue item attachment</param>
            <response code="200">Ok, if the queue item attachment details for the given queue item attachment id have been updated</response>
            <response code="400">Bad request, if the queue item attachment id is null or ids don't match</response>
            <response code="403">Forbidden, unauthorized access</response>
            <response code="422">Unprocessable entity</response>
            <returns>Ok response with the updated queue item attachment value</returns>
        </member>
        <member name="M:OpenBots.Server.Web.Controllers.Queue.QueueItemAttachmentsController.Patch(System.String,Microsoft.AspNetCore.JsonPatch.JsonPatchDocument{OpenBots.Server.Model.QueueItemAttachment})">
            <summary>
            Updates partial details of queue item attachment
            </summary>
            <param name="id"></param>
            <param name="request"></param>
            <response code="200">Ok, if update of queue item attachment is successful</response>
            <response code="400">Bad request, if the id is null or ids dont match</response>
            <response code="403">Forbidden, unauthorized access</response>
            <response code="422">Unprocessable entity, validation error</response>
            <returns>Ok response</returns>
        </member>
        <member name="M:OpenBots.Server.Web.Controllers.Queue.QueueItemAttachmentsController.Delete(System.String)">
            <summary>
            Delete all queue item attachments with a specified queue item id from list of queue item attachments
            </summary>
            <param name="queueItemId">Queue item id to delete all queue item attachments from - throws bad request if null or empty Guid/</param>
            <response code="200">Ok, when queue item attachments are soft deleted, (isDeleted flag is set to true in database)</response>
            <response code="400">Bad request, if queue item id is null or empty Guid</response>
            <response code="403">Forbidden</response>
            <returns>Ok response</returns>
        </member>
        <member name="M:OpenBots.Server.Web.Controllers.Queue.QueueItemAttachmentsController.DeleteAttachment(System.String)">
            <summary>
            Delete specific queue item attachment from list of queue item attachments
            </summary>
            <param name="id">Queue item attachment id to be deleted - throws bad request if null or empty Guid/</param>
            <response code="200">Ok, when queue item attachment is soft deleted, (isDeleted flag is set to true in database)</response>
            <response code="400">Bad request, if queue item attachment id is null or empty Guid</response>
            <response code="403">Forbidden</response>
            <returns>Ok response</returns>
        </member>
        <member name="T:OpenBots.Server.Web.Controllers.QueueItemsController">
            <summary>
            Controller for QueueItems
            </summary>
        </member>
        <member name="M:OpenBots.Server.Web.Controllers.QueueItemsController.#ctor(OpenBots.Server.DataAccess.Repositories.IQueueItemRepository,OpenBots.Server.DataAccess.Repositories.IQueueRepository,OpenBots.Server.Business.IQueueItemManager,OpenBots.Server.Business.IMembershipManager,OpenBots.Server.Security.ApplicationIdentityUserManager,Microsoft.AspNetCore.SignalR.IHubContext{OpenBots.Server.Web.Hubs.NotificationHub},Microsoft.AspNetCore.Http.IHttpContextAccessor,OpenBots.Server.Web.Hubs.IHubManager,OpenBots.Server.DataAccess.Repositories.IScheduleRepository,Microsoft.Extensions.Configuration.IConfiguration,OpenBots.Server.DataAccess.Repositories.IBinaryObjectRepository,OpenBots.Server.DataAccess.Repositories.Interfaces.IQueueItemAttachmentRepository,OpenBots.Server.Web.Webhooks.IWebhookPublisher)">
            <summary>
            QueueItemsController constructor
            </summary>
            <param name="repository"></param>
            <param name="manager"></param>
            <param name="membershipManager"></param>
            <param name="userManager"></param>
            <param name="hub"></param>
            <param name="httpContextAccessor"></param>
            <param name="binaryObjectRepository"></param>
            <param name="configuration"></param>
            <param name="hubManager"></param>
            <param name="queueItemAttachmentRepository"></param>
            <param name="queueRepository"></param>
            <param name="scheduleRepository"></param>
            <param name="webhookPublisher"></param>
        </member>
        <member name="M:OpenBots.Server.Web.Controllers.QueueItemsController.Get(System.String,System.String,System.Int32,System.Int32)">
            <summary>
            Provides a list of all queue items
            </summary>
            <response code="200">Ok, a paginated list of all queue items</response>
            <response code="400">Bad request</response>
            <response code="403">Forbidden, unauthorized access</response>   
            <response code="404">Not found</response>
            <response code="422">Unprocessable entity</response>
            <returns>Paginated list of all queue items</returns>
        </member>
        <member name="M:OpenBots.Server.Web.Controllers.QueueItemsController.View(System.String,System.String,System.Int32,System.Int32)">
            <summary>
            Provides a view model list of all queue items and corresponding binary object ids
            </summary>
            <param name="top"></param>
            <param name="skip"></param>
            <param name="orderBy"></param>
            <param name="filter"></param>
            <response code="200">Ok, a paginated list of all queue items</response>
            <response code="400">Bad request</response>
            <response code="403">Forbidden, unauthorized access</response>  
            <response code="404">Not found</response>
            <response code="422">Unprocessable entity</response>
            <returns>Paginated list of all queue items</returns>
        </member>
        <member name="M:OpenBots.Server.Web.Controllers.QueueItemsController.Get(System.String)">
            <summary>
            Provides queue item details for a particular queue item id
            </summary>
            <param name="id">queue item id</param>
            <response code="200">Ok, if queue item exists with the given id</response>
            <response code="304">Not modified</response>
            <response code="400">Bad request, if queue item id is not in proper format or proper Guid</response>
            <response code="403">Forbidden</response>
            <response code="404">Not found, when no queue item exists for the given queue item id</response>
            <response code="422">Unprocessable entity</response>
            <returns>Queue item details for the given id</returns>
        </member>
        <member name="M:OpenBots.Server.Web.Controllers.QueueItemsController.View(System.String)">
            <summary>
            Provides a queue item's view model details for a particular queue item id
            </summary>
            <param name="id">Queue item id</param>
            <response code="200">Ok, if a queue item exists with the given id</response>
            <response code="304">Not modified</response>
            <response code="400">Bad request, if queue item id is not in the proper format or a proper Guid</response>
            <response code="403">Forbidden</response>
            <response code="404">Not found, when no queue item exists for the given queue item id</response>
            <response code="422">Unprocessable entity</response>
            <returns>Queue item view model details for the given id</returns>
        </member>
        <member name="M:OpenBots.Server.Web.Controllers.QueueItemsController.GetCount(System.String)">
            <summary>
            Gets count of queue items in database
            </summary>
            <param name="filter"></param>
            <response code="200">Ok, count of all queue items</response>
            <response code="400">Bad request</response>
            <response code="403">Forbidden</response>
            <response code="404">Not found</response>
            <response code="422">Unprocessable entity</response>
            <returns>Count of queue items</returns>
        </member>
        <member name="M:OpenBots.Server.Web.Controllers.QueueItemsController.Delete(System.String)">
            <summary>
            Deletes a queue item with a specified id from the queue items
            </summary>
            <param name="id">Queue item id to be deleted - throws bad request if null or empty Guid</param>
            <response code="200">Ok, when queue item is soft deleted, (isDeleted flag is set to true in database)</response>
            <response code="400">Bad request, if queue item id is null or empty Guid</response>
            <response code="403">Forbidden</response>
            <returns>Ok response</returns>
        </member>
        <member name="M:OpenBots.Server.Web.Controllers.QueueItemsController.Patch(System.String,Microsoft.AspNetCore.JsonPatch.JsonPatchDocument{OpenBots.Server.Model.QueueItem})">
            <summary>
            Updates partial details of queue item
            </summary>
            <param name="id">Queue item identifier</param>
            <param name="request">Value of the queue item to be updated</param>
            <response code="200">Ok, if update of queue item is successful</response>
            <response code="400">Bad request, if the id is null or ids don't match</response>
            <response code="403">Forbidden, unauthorized access</response>
            <response code="422">Unprocessable entity, validation error</response>
            <returns>Ok response, if the partial queue item values have been updated</returns>
        </member>
        <member name="M:OpenBots.Server.Web.Controllers.QueueItemsController.Enqueue(OpenBots.Server.Model.QueueItem)">
            <summary>
            Enqueue queue item
            </summary>
            <param name="request">Value of the queue item to be added</param>
            <response code="200">Ok, queue item details</response>
            <response code="403">Forbidden, unauthorized access</response>
            <response code="422">Unprocessable entity, validation error</response>
            <returns>Ok response with queue item details</returns>
        </member>
        <member name="M:OpenBots.Server.Web.Controllers.QueueItemsController.Dequeue(System.String,System.String)">
            <summary>
            Dequeue queue item
            </summary>
            <param name="agentId"></param>
            <param name="queueId"></param>
            <response code="200">Ok, queue item</response>
            <response code="403">Forbidden, unauthorized access</response>
            <response code="422">Unprocessable entity, validation error</response>
            <returns>Dequeued queue item</returns>
        </member>
        <member name="M:OpenBots.Server.Web.Controllers.QueueItemsController.Commit(System.String,System.String)">
            <summary>
            Commit queue item
            </summary>
            <param name="transactionKey">Transaction key id to be verified</param>
            <response code="200">Ok response</response>
            <response code="403">Forbidden, unauthorized access</response>
            <response code="422">Unprocessable entity, validation error</response>
            <returns>Ok response</returns>
        </member>
        <member name="M:OpenBots.Server.Web.Controllers.QueueItemsController.Rollback(System.String,System.String,System.String,System.Boolean)">
            <summary>
            Rollback queue item
            </summary>
            <param name="transactionKey">Transaction key id to be verified</param>
            <param name="errorCode">Error code that has occurred while processing queue item</param>
            <param name="errorMessage">Error message that has occurred while processing queue item</param>
            <param name="isFatal">Limit to how many retries a queue item can have</param>
            <response code="200">Ok response</response>
            <response code="403">Forbidden, unauthorized access</response>
            <response code="422">Unprocessable entity, validation error</response>
            <returns>Ok response</returns>
        </member>
        <member name="M:OpenBots.Server.Web.Controllers.QueueItemsController.Extend(System.String)">
            <summary>
            Extend queue item
            </summary>
            <param name="transactionKey">Transaction key id to be verified</param>
            <response code="200">Ok response</response>
            <response code="403">Forbidden, unauthorized access</response>
            <response code="422">Unprocessable entity, validation error</response>
            <returns>Ok response</returns>
        </member>
        <member name="M:OpenBots.Server.Web.Controllers.QueueItemsController.UpdateState(System.String,System.String,System.String,System.String,System.String)">
            <summary>
            Updates the state and state message of the queue item
            </summary>
            <param name="transactionKey"></param>
            <param name="state"></param>
            <param name="stateMessage"></param>
            <param name="errorCode"></param>
            <param name="errorMessage"></param>
            <response code="200">Ok response</response>
            <response code="403">Forbidden, unauthorized access</response>
            <response code="422">Unprocessable entity, validation error</response>
            <returns>Ok response</returns>
        </member>
        <member name="M:OpenBots.Server.Web.Controllers.QueueItemsController.UpdateFiles(System.String,OpenBots.Server.ViewModel.QueueItem.UpdateQueueItemViewModel)">
            <summary>
            Update the queue item with file attachments
            </summary>
            <param name="request"></param>
            <param name="id"></param>
            <response code="200">Ok response</response>
            <response code="403">Forbidden, unauthorized access</response>
            <response code="422">Unprocessable entity, validation error</response>
            <returns>Ok response</returns>
        </member>
        <member name="T:OpenBots.Server.Web.Controllers.QueuesController">
            <summary>
            Controller for Queues
            </summary>
        </member>
        <member name="M:OpenBots.Server.Web.Controllers.QueuesController.#ctor(OpenBots.Server.DataAccess.Repositories.IQueueRepository,OpenBots.Server.Business.IQueueManager,OpenBots.Server.Business.IMembershipManager,OpenBots.Server.Security.ApplicationIdentityUserManager,OpenBots.Server.Web.Webhooks.IWebhookPublisher,Microsoft.Extensions.Configuration.IConfiguration,Microsoft.AspNetCore.Http.IHttpContextAccessor)">
            <summary>
            QueuesController constructor
            </summary>
            <param name="configuration"></param>
            <param name="httpContextAccessor"></param>
            <param name="membershipManager"></param>
            <param name="queueManager"></param>
            <param name="repository"></param>
            <param name="userManager"></param>
            <param name="webhookPublisher"></param>
        </member>
        <member name="M:OpenBots.Server.Web.Controllers.QueuesController.Get(System.String,System.String,System.Int32,System.Int32)">
            <summary>
            Provides a list of all queues
            </summary>
            <response code="200">Ok, a paginated list of all queues</response>
            <response code="400">Bad request</response>
            <response code="403">Forbidden, unauthorized access</response>
            <response code="404">Not found</response>
            <response code="422">Unprocessable entity</response>
            <returns>Paginated list of all queues</returns>
        </member>
        <member name="M:OpenBots.Server.Web.Controllers.QueuesController.GetCount(System.String)">
            <summary>
            Gets count of queues in database
            </summary>
            <param name="filter"></param>
            <response code="200">Ok with count of all queues</response>
            <response code="400">Bad request</response>
            <response code="403">Forbidden</response>
            <response code="404">Not found</response>
            <response code="422">Unprocessable entity</response>
            <returns>Count of all queues</returns>
        </member>
        <member name="M:OpenBots.Server.Web.Controllers.QueuesController.Get(System.String)">
            <summary>
            Provides queue details for a particular queue id
            </summary>
            <param name="id">Queue id</param>
            <response code="200">Ok, if queue exists with the given id</response>
            <response code="304">Not modified</response>
            <response code="400">Bad request, if queue id is not in proper format or proper Guid</response>
            <response code="403">Forbidden</response>
            <response code="404">Not found, when no queue exists for the given id</response>
            <response code="422">Unprocessable entity</response>
            <returns>Queue details for the given id</returns>
        </member>
        <member name="M:OpenBots.Server.Web.Controllers.QueuesController.Post(OpenBots.Server.Model.Queue)">
             <summary>
             Adds a new queue
             </summary>
             <param name="request"></param>
             <response code="200">Ok, new queue created and returned</response>
             <response code="400">Bad request, when the queue value is not in proper format</response>
             <response code="403">Forbidden, unauthorized access</response>
            <response code="409">Conflict, concurrency error</response> 
             <response code="422">Unprocessabile entity, when a duplicate record is being entered</response>
             <returns>Newly created unique queue id with route name</returns>
        </member>
        <member name="M:OpenBots.Server.Web.Controllers.QueuesController.Put(System.String,OpenBots.Server.ViewModel.QueueViewModel)">
            <summary>
            Updates a queue 
            </summary>
            <remarks>
            Provides an action to update an queue, when queue id and the new details of the queue are given
            </remarks>
            <param name="id">Queue id, produces bad request if id is null or ids don't match</param>
            <param name="request">Queue details to be updated</param>
            <response code="200">Ok, if the queue details for the given queue id have been updated</response>
            <response code="400">Bad request, if the queue id is null or ids don't match</response>
            <response code="403">Forbidden, unauthorized access</response>
            <response code="409">Conflict</response>
            <response code="422">Unprocessable entity</response>
            <returns>Ok response with the updated value</returns>
        </member>
        <member name="M:OpenBots.Server.Web.Controllers.QueuesController.Delete(System.String)">
            <summary>
            Deletes a queue with a specified id from the queues
            </summary>
            <param name="id">Queue id to be deleted - throws bad request if null or empty Guid</param>
            <response code="200">Ok, when queue is soft deleted, (isDeleted flag is set to true in database)</response>
            <response code="400">Bad request, if queue id is null or empty Guid</response>
            <response code="403">Forbidden</response>
            <returns>Ok response</returns>
        </member>
        <member name="M:OpenBots.Server.Web.Controllers.QueuesController.Patch(System.String,Microsoft.AspNetCore.JsonPatch.JsonPatchDocument{OpenBots.Server.Model.Queue})">
            <summary>
            Updates partial details of queue
            </summary>
            <param name="id">Queue identifier</param>
            <param name="request">Value of the queue to be updated</param>
            <response code="200">Ok, if update of queue is successful</response>
            <response code="400">Bad request, if the id is null or ids don't match</response>
            <response code="403">Forbidden, unauthorized access</response>
            <response code="422">Unprocessable entity, validation error</response>
            <returns>Ok response, if the partial queue values have been updated</returns>
        </member>
        <member name="T:OpenBots.Server.Web.Controllers.SchedulesController">
            <summary>
            Controller for Schedules
            </summary>
        </member>
        <member name="M:OpenBots.Server.Web.Controllers.SchedulesController.#ctor(OpenBots.Server.DataAccess.Repositories.IScheduleRepository,OpenBots.Server.Business.IMembershipManager,OpenBots.Server.Security.ApplicationIdentityUserManager,OpenBots.Server.Business.IScheduleManager,Hangfire.IBackgroundJobClient,Microsoft.AspNetCore.Http.IHttpContextAccessor,OpenBots.Server.Web.Hubs.IHubManager,Microsoft.Extensions.Configuration.IConfiguration,Hangfire.IRecurringJobManager,OpenBots.Server.DataAccess.Repositories.IScheduleParameterRepository)">
            <summary>
            SchedulesController constructor
            </summary>
            <param name="repository"></param>
            <param name="membershipManager"></param>
            <param name="userManager"></param>
            <param name="manager"></param>
            <param name="backgroundJobClient"></param>
            <param name="httpContextAccessor"></param>
            <param name="hubManager"></param>
            <param name="configuration"></param>
            <param name="recurringJobManager"></param>
        </member>
        <member name="M:OpenBots.Server.Web.Controllers.SchedulesController.Get(System.String,System.String,System.Int32,System.Int32)">
            <summary>
            Provides a list of all schedules
            </summary>
            <param name="filter"></param>
            <param name="orderBy"></param>
            <param name="skip"></param>
            <param name="top"></param>
            <response code="200">Ok,a paginated list of all schedules</response>
            <response code="400">Bad request</response>
            <response code="403">Forbidden, unauthorized access</response>
            <response code="404">Not found</response>
            <response code="422">Unprocessable entity</response>
            <returns>Paginated list of all schedules </returns>
        </member>
        <member name="M:OpenBots.Server.Web.Controllers.SchedulesController.GetCount(System.String)">
            <summary>
            Gets count of Schedules in database
            </summary>
            <param name="filter"></param>
            <response code="200">Ok, a count of all schedules</response>
            <response code="400">Bad request</response>
            <response code="403">Forbidden</response>
            <response code="404">Not found</response>
            <response code="422">Unprocessable entity</response>
            <returns>Count of all schedules</returns>
        </member>
        <member name="M:OpenBots.Server.Web.Controllers.SchedulesController.Get(System.String)">
            <summary>
            Provides schedule details for a particular schedule id
            </summary>
            <param name="id">Schedule id</param>
            <response code="200">Ok, if a schedule exists with the given id</response>
            <response code="304">Not modified</response>
            <response code="400">Bad request, if schedule id is not in proper format or proper Guid</response>
            <response code="403">Forbidden</response>
            <response code="404">Not found, when no schedule exists for the given schedule id</response>
            <response code="422">Unprocessable entity</response>
            <returns>Schedule details for the given id</returns>
        </member>
        <member name="M:OpenBots.Server.Web.Controllers.SchedulesController.View(System.String)">
            <summary>
            Provides schedule view model details for a particular schedule id
            </summary>
            <param name="id">Schedule id</param>
            <response code="200">Ok, if a schedule exists with the given id</response>
            <response code="304">Not modified</response>
            <response code="400">Bad request, if schedule id is not in proper format or proper Guid</response>
            <response code="403">Forbidden</response>
            <response code="404">Not found, when no schedule exists for the given schedule id</response>
            <response code="422">Unprocessable entity</response>
            <returns>Schedule view model details for the given id</returns>
        </member>
        <member name="M:OpenBots.Server.Web.Controllers.SchedulesController.Post(OpenBots.Server.ViewModel.CreateScheduleViewModel)">
            <summary>
            Adds a new schedule to the existing schedules
            </summary>
            <remarks>
            Adds the schedule with unique schedule id to the existing schedules
            </remarks>
            <param name="request"></param>
            <response code="200">Ok ,new schedule created and returned</response>
            <response code="400">Bad request, when the schedule value is not in proper format</response>
            <response code="403">Forbidden, unauthorized access</response>
            <response code="409">Conflict, concurrency error</response> 
            <response code="422">Unprocessabile entity, when a duplicate record is being entered</response>
            <returns>Newly created unique schedule id with route name</returns>
        </member>
        <member name="M:OpenBots.Server.Web.Controllers.SchedulesController.Put(System.String,OpenBots.Server.ViewModel.CreateScheduleViewModel)">
            <summary>
            Updates a schedule 
            </summary>
            <remarks>
            Provides an action to update a schedule, when schedule id and the new details of the schedule are given
            </remarks>
            <param name="id">Schedule id,produces bad request if id is null or ids don't match</param>
            <param name="request">Schedule details to be updated</param>
            <response code="200">Ok, if the schedule details for the given schedule id have been updated</response>
            <response code="400">Bad request, if the schedule id is null or ids don't match</response>
            <response code="403">Forbidden, unauthorized access</response>
            <response code="409">Conflict</response>
            <response code="422">Unprocessable entity</response>
            <returns>Ok response with the updated value</returns>
        </member>
        <member name="M:OpenBots.Server.Web.Controllers.SchedulesController.Delete(System.String)">
            <summary>
            Deletes a schedule with a specified id from the schedules
            </summary>
            <param name="id">Schedule id to be deleted - throws bad request if null or empty Guid/</param>
            <response code="200">Ok, when schedule is soft deleted,(isDeleted flag is set to true in database)</response>
            <response code="400">Bad request, if schedule id is null or empty Guid</response>
            <response code="403">Forbidden</response>
            <returns>Ok response</returns>
        </member>
        <member name="M:OpenBots.Server.Web.Controllers.SchedulesController.Patch(System.String,Microsoft.AspNetCore.JsonPatch.JsonPatchDocument{OpenBots.Server.Model.Schedule})">
            <summary>
            Updates partial details of Schedule.
            </summary>
            <param name="id">Schedule identifier</param>
            <param name="request">Value of the Schedule to be updated.</param>
            <response code="200">OK,If update of Schedule is successful. </response>
            <response code="400">BadRequest,if the Id is null or Id's dont match.</response>
            <response code="403">Forbidden,unauthorized access</response>
            <response code="422">Unprocessable entity,validation error</response>
            <returns>Ok response, if the partial Schedule values has been updated</returns>
        </member>
        <member name="M:OpenBots.Server.Web.Controllers.SchedulesController.RunNow(OpenBots.Server.ViewModel.RunNowViewModel)">
            <summary>
            API to run a job now
            </summary>
            <param name="automationId">Automation id, against which job will be created</param>
            <param name="agentId">Agent id, against which job will be created</param>
            <response code="200">Ok, if the job enqueues successfully</response>
            <response code="400">Bad request, if the automation id is null or ids don't match</response>
            <response code="403">Forbidden, unauthorized access</response>
            <response code="409">Conflict</response>
            <response code="422">Unprocessable entity</response>
            <returns>Ok response</returns>
        </member>
        <member name="T:OpenBots.Server.Web.Controllers.WebHooksApi.IntegrationEventLogsController">
            <summary>
            ReadOnlyController for IntegrationEventLog
            </summary>
        </member>
        <member name="M:OpenBots.Server.Web.Controllers.WebHooksApi.IntegrationEventLogsController.#ctor(OpenBots.Server.DataAccess.Repositories.IIntegrationEventLogRepository,OpenBots.Server.Business.IMembershipManager,OpenBots.Server.Security.ApplicationIdentityUserManager,Microsoft.Extensions.Configuration.IConfiguration,Microsoft.AspNetCore.Http.IHttpContextAccessor)">
            <summary>
            IntegrationEventLogsController constructor
            </summary>
            <param name="repository"></param>
            <param name="membershipManager"></param>
            <param name="userManager"></param>
            <param name="configuration"></param>
            <param name="httpContextAccessor"></param>
        </member>
        <member name="M:OpenBots.Server.Web.Controllers.WebHooksApi.IntegrationEventLogsController.Get(System.String,System.String,System.Int32,System.Int32)">
            <summary>
            Provides a list of all IntegrationEventLogs
            </summary>
            <param name="filter"></param>
            <param name="orderBy"></param>
            <param name="skip"></param>
            <param name="top"></param>
            <response code="200">Ok, a paginated list of all IntegrationEventLogs</response>
            <response code="400">Bad request</response>
            <response code="403">Forbidden, unauthorized access</response>        
            <response code="422">Unprocessable entity</response>
            <returns>Paginated list of all IntegrationEventLogs</returns>
        </member>
        <member name="M:OpenBots.Server.Web.Controllers.WebHooksApi.IntegrationEventLogsController.Get(System.String)">
            <summary>
            Provides an IntegrationEventLog's details for a particular IntegrationEventLog id
            </summary>
            <param name="id">IntegrationEventLog id</param>
            <response code="200">Ok, if an IntegrationEventLog exists with the given id</response>
            <response code="304">Not modified</response>
            <response code="400">Bad request, if IntegrationEventLog id is not in proper format or a proper Guid</response>
            <response code="403">Forbidden</response>
            <response code="404">Not found, when no IntegrationEventLog exists for the given IntegrationEventLog id</response>
            <response code="422">Unprocessable entity</response>
            <returns>IntegrationEventLog details for the given id</returns>
        </member>
        <member name="M:OpenBots.Server.Web.Controllers.WebHooksApi.IntegrationEventLogsController.AllIntegrationEventLogs">
            <summary>
            Provides a list of all integration event logs by name
            </summary>
            <response code="200">Ok, a list of all event logs</response>
            <response code="400">Bad request</response>
            <response code="403">Forbidden, unauthorized access</response>
            <response code="404">Not found</response>
            <response code="422">Unprocessable entity</response>
            <returns>List of all event logs</returns>
        </member>
        <member name="M:OpenBots.Server.Web.Controllers.WebHooksApi.IntegrationEventLogsController.Export(System.String)">
            <summary>
            Exports the JSONPayload for the specified IntegrationEventLog
            </summary>
            <param name="id"></param>
            <response code="200">Ok, if a IntegrationEventLog exists with the given filters</response>
            <response code="400">Bad request</response>
            <response code="403">Forbidden, unauthorized access</response>
            <response code="422">Unprocessable entity</response>
            <returns> Downloadable JSON file containing the event's payload</returns>
        </member>
        <member name="T:OpenBots.Server.Web.Controllers.WebHooksApi.IntegrationEventsController">
            <summary>
            Controller for Integration events
            </summary>
        </member>
        <member name="M:OpenBots.Server.Web.Controllers.WebHooksApi.IntegrationEventsController.#ctor(OpenBots.Server.DataAccess.Repositories.IIntegrationEventRepository,OpenBots.Server.Business.IMembershipManager,OpenBots.Server.Security.ApplicationIdentityUserManager,Microsoft.Extensions.Configuration.IConfiguration,Microsoft.AspNetCore.Http.IHttpContextAccessor)">
            <summary>
            IntegrationEventsController constructor
            </summary>
            <param name="repository"></param>
            <param name="membershipManager"></param>
            <param name="userManager"></param>
            <param name="configuration"></param>
            <param name="httpContextAccessor"></param>
        </member>
        <member name="M:OpenBots.Server.Web.Controllers.WebHooksApi.IntegrationEventsController.Get(System.String,System.String,System.Int32,System.Int32)">
            <summary>
            Provides a list of all IntegrationEvents
            </summary>
            <param name="filter"></param>
            <param name="orderBy"></param>
            <param name="skip"></param>
            <param name="top"></param>
            <response code="200">Ok, a paginated list of all IntegrationEvents</response>
            <response code="400">Bad request</response>
            <response code="403">Forbidden, unauthorized access</response>        
            <response code="422">Unprocessable entity</response>
            <returns>Paginated list of all IntegrationEvents</returns>
        </member>
        <member name="M:OpenBots.Server.Web.Controllers.WebHooksApi.IntegrationEventsController.Get(System.String)">
            <summary>
            Provides an IntegrationEvent's details for a particular IntegrationEvent id
            </summary>
            <param name="id">IntegrationEvent id</param>
            <response code="200">Ok, if an IntegrationEvent exists with the given id</response>
            <response code="304">Not modified</response>
            <response code="400">Bad request, if IntegrationEvent id is not in proper format or a proper Guid</response>
            <response code="403">Forbidden</response>
            <response code="404">Not found, when no IntegrationEvent exists for the given IntegrationEvent id</response>
            <response code="422">Unprocessable entity</response>
            <returns>IntegrationEvent details for the given id</returns>
        </member>
        <member name="M:OpenBots.Server.Web.Controllers.WebHooksApi.IntegrationEventsController.AllIntegrationEvents">
            <summary>
            Provides a list of all IntegrationEvent Entity names
            </summary>
            <response code="200">Ok, a list of all event Entity names</response>
            <response code="400">Bad request</response>
            <response code="403">Forbidden, unauthorized access</response>
            <response code="404">Not found</response>
            <response code="422">Unprocessable entity</response>
            <returns>List of all names in IntegrationEvents table</returns>
        </member>
        <member name="T:OpenBots.Server.Web.Controllers.WebHooksApi.IntegrationEventSubscriptionAttemptsController">
            <summary>
            ReadOnlyController for IntegrationEventSubscriptionAttempts events
            </summary>
        </member>
        <member name="M:OpenBots.Server.Web.Controllers.WebHooksApi.IntegrationEventSubscriptionAttemptsController.#ctor(OpenBots.Server.DataAccess.Repositories.IIntegrationEventSubscriptionAttemptRepository,OpenBots.Server.Business.IIntegrationEventSubscriptionAttemptManager,OpenBots.Server.Business.IMembershipManager,OpenBots.Server.Security.ApplicationIdentityUserManager,Microsoft.Extensions.Configuration.IConfiguration,Microsoft.AspNetCore.Http.IHttpContextAccessor)">
            <summary>
            IntegrationEventSubscriptionAttemptsController costructor
            </summary>
            <param name="repository"></param>
            <param name="attemptManager"></param>
            <param name="membershipManager"></param>
            <param name="userManager"></param>
            <param name="configuration"></param>
            <param name="httpContextAccessor"></param>
        </member>
        <member name="M:OpenBots.Server.Web.Controllers.WebHooksApi.IntegrationEventSubscriptionAttemptsController.Get(System.String,System.String,System.Int32,System.Int32)">
            <summary>
            Provides a list of all IntegrationEventSubscriptionAttempts
            </summary>
            <param name="filter"></param>
            <param name="orderBy"></param>
            <param name="skip"></param>
            <param name="top"></param>
            <response code="200">Ok, a paginated list of all IntegrationEventSubscriptionAttempts</response>
            <response code="400">Bad request</response>
            <response code="403">Forbidden, unauthorized access</response>        
            <response code="422">Unprocessable entity</response>
            <returns>Paginated list of all  IntegrationEventSubscriptionAttempt</returns>
        </member>
        <member name="M:OpenBots.Server.Web.Controllers.WebHooksApi.IntegrationEventSubscriptionAttemptsController.View(System.String,System.String,System.Int32,System.Int32)">
            <summary>
            Provides a view model list of all SubscriptionAttempts
            </summary>
            <param name="top"></param>
            <param name="skip"></param>
            <param name="orderBy"></param>
            <param name="filter"></param>
            <response code="200">Ok, a paginated list of all SubscriptionAttempts</response>
            <response code="400">Bad request</response>
            <response code="403">Forbidden, unauthorized access</response>  
            <response code="404">Not found</response>
            <response code="422">Unprocessable entity</response>
            <returns>Paginated list of all SubscriptionAttempts</returns>
        </member>
        <member name="M:OpenBots.Server.Web.Controllers.WebHooksApi.IntegrationEventSubscriptionAttemptsController.Get(System.String)">
            <summary>
            Provides an IntegrationEventSubscriptionAttempt's details for a particular id
            </summary>
            <param name="id">IntegrationEventSubscriptionAttempt id</param>
            <response code="200">Ok, if an IntegrationEventSubscriptionAttempt exists with the given id</response>
            <response code="304">Not modified</response>
            <response code="400">Bad request, if IntegrationEventSubscriptionAttempt id is not in proper format or a proper Guid</response>
            <response code="403">Forbidden</response>
            <response code="404">Not found, when no IntegrationEventSubscriptionAttempt exists for the given id</response>
            <response code="422">Unprocessable entity</response>
            <returns>IntegrationEventSubscriptionAttempt details for the given id</returns>
        </member>
        <member name="M:OpenBots.Server.Web.Controllers.WebHooksApi.IntegrationEventSubscriptionAttemptsController.View(System.String)">
            <summary>
            Provides a SubscriptionAttempt's view model details for a particular SubscriptionAttempt id
            </summary>
            <param name="id">SubscriptionAttempt id</param>
            <response code="200">Ok, if a SubscriptionAttempt exists with the given id</response>
            <response code="304">Not modified</response>
            <response code="400">Bad request, if SubscriptionAttempt id is not in the proper format or a proper Guid</response>
            <response code="403">Forbidden</response>
            <response code="404">Not found, when no SubscriptionAttempt exists for the given SubscriptionAttempt id</response>
            <response code="422">Unprocessable entity</response>
            <returns>SubscriptionAttempt view model details for the given id</returns>
        </member>
        <member name="T:OpenBots.Server.Web.Controllers.WebHooksApi.IntegrationEventSubscriptionsController">
            <summary>
            Controller for Integration Event Subscriptions
            </summary>
        </member>
        <member name="M:OpenBots.Server.Web.Controllers.WebHooksApi.IntegrationEventSubscriptionsController.#ctor(OpenBots.Server.DataAccess.Repositories.IIntegrationEventSubscriptionRepository,OpenBots.Server.Business.IMembershipManager,OpenBots.Server.Security.ApplicationIdentityUserManager,Microsoft.Extensions.Configuration.IConfiguration,Microsoft.AspNetCore.Http.IHttpContextAccessor)">
            <summary>
            IntegrationEventSubscriptionsController constructor
            </summary>
            <param name="repository"></param>
            <param name="membershipManager"></param>
            <param name="userManager"></param>
            <param name="configuration"></param>
            <param name="httpContextAccessor"></param>
        </member>
        <member name="M:OpenBots.Server.Web.Controllers.WebHooksApi.IntegrationEventSubscriptionsController.Get(System.String,System.String,System.Int32,System.Int32)">
            <summary>
            Provides a list of all Integration Event Subscriptions
            </summary>
            <param name="filter"></param>
            <param name="orderBy"></param>
            <param name="skip"></param>
            <param name="top"></param>
            <response code="200">Ok, a paginated list of all Integration Event Subscriptions</response>
            <response code="400">Bad request</response>
            <response code="403">Forbidden, unauthorized access</response>        
            <response code="422">Unprocessable entity</response>
            <returns>Paginated list of all IntegrationEventSubscription</returns>
        </member>
        <member name="M:OpenBots.Server.Web.Controllers.WebHooksApi.IntegrationEventSubscriptionsController.Get(System.String)">
            <summary>
            Provides an IntegrationEventSubscription's details for a particular IntegrationEventSubscription id
            </summary>
            <param name="id">IntegrationEventSubscription id</param>
            <response code="200">Ok, if an IntegrationEventSubscription exists with the given id</response>
            <response code="304">Not modified</response>
            <response code="400">Bad request, if IntegrationEventSubscription id is not in proper format or a proper Guid</response>
            <response code="403">Forbidden</response>
            <response code="404">Not found, when no IntegrationEventSubscription exists for the given IntegrationEventSubscription id</response>
            <response code="422">Unprocessable entity</response>
            <returns>IntegrationEventSubscription details for the given id</returns>
        </member>
        <member name="M:OpenBots.Server.Web.Controllers.WebHooksApi.IntegrationEventSubscriptionsController.Post(OpenBots.Server.Model.Webhooks.IntegrationEventSubscription)">
            <summary>
            Adds a new IntegrationEventSubscription to the existing IntegrationEventSubscriptions
            </summary>
            <param name="request"></param>
            <response code="200">Ok, new IntegrationEventSubscription created and returned</response>
            <response code="400">Bad request, when the IntegrationEventSubscription value is not in proper format</response>
            <response code="403">Forbidden, unauthorized access</response>
            <response code="409">Conflict, concurrency error</response> 
            <response code="422">Unprocessabile entity, when a duplicate record is being entered</response>
            <returns>Newly created unique IntegrationEventSubscription</returns>
        </member>
        <member name="M:OpenBots.Server.Web.Controllers.WebHooksApi.IntegrationEventSubscriptionsController.Put(System.String,OpenBots.Server.Model.Webhooks.IntegrationEventSubscription)">
            <summary>
            Updates an IntegrationEventSubscription 
            </summary>
            <remarks>
            Provides an action to update an IntegrationEventSubscription, when id and the new details of 
            IntegrationEventSubscription are given
            </remarks>
            <param name="id">IntegrationEventSubscription Id,produces Bad request if Id is null or Id's don't match</param>
            <param name="request">IntegrationEventSubscription details to be updated</param>
            <response code="200">Ok, if the IntegrationEventSubscription details for the given 
            IntegrationEventSubscription id have been updated</response>
            <response code="400">Bad request, if the IntegrationEventSubscription id is null or ids don't match</response>
            <response code="403">Forbidden, unauthorized access</response>
            <response code="422">Unprocessable entity</response>
            <returns>Ok response with the updated value</returns>
        </member>
        <member name="M:OpenBots.Server.Web.Controllers.WebHooksApi.IntegrationEventSubscriptionsController.Delete(System.String)">
            <summary>
            Deletes an IntegrationEventSubscription with a specified id
            </summary>
            <param name="id">IntegrationEventSubscription id to be deleted - throws bad request if null or empty Guid</param>
            <response code="200">Ok, when IntegrationEventSubscription is soft deleted, 
            (isDeleted flag is set to true in database)</response>
            <response code="400">Bad request, if IntegrationEventSubscription id is null or empty Guid</response>
            <response code="403">Forbidden</response>
            <returns>Ok response</returns>
        </member>
        <member name="M:OpenBots.Server.Web.Controllers.WebHooksApi.IntegrationEventSubscriptionsController.Patch(System.String,Microsoft.AspNetCore.JsonPatch.JsonPatchDocument{OpenBots.Server.Model.Webhooks.IntegrationEventSubscription})">
            <summary>
            Updates partial details of IntegrationEventSubscription
            </summary>
            <param name="id">IntegrationEventSubscription identifier</param>
            <param name="request">Value of the IntegrationEventSubscription to be updated</param>
            <response code="200">Ok, if update of IntegrationEventSubscription is successful</response>
            <response code="400">Bad request, if the id is null or ids don't match</response>
            <response code="403">Forbidden, unauthorized access</response>
            <response code="422">Unprocessable entity, validation error</response>
            <returns>Ok response, if the partial IntegrationEventSubscription values have been updated</returns>
        </member>
        <member name="T:OpenBots.Server.Web.AssetsController">
            <summary>
            Controller for Assets
            </summary>
        </member>
        <member name="M:OpenBots.Server.Web.AssetsController.#ctor(OpenBots.Server.DataAccess.Repositories.IAssetRepository,OpenBots.Server.Business.IMembershipManager,OpenBots.Server.Security.ApplicationIdentityUserManager,OpenBots.Server.Business.IAutomationManager,Microsoft.AspNetCore.Http.IHttpContextAccessor,OpenBots.Server.Business.IBinaryObjectManager,Microsoft.Extensions.Configuration.IConfiguration,OpenBots.Server.DataAccess.Repositories.IBinaryObjectRepository,OpenBots.Server.Web.Webhooks.IWebhookPublisher,OpenBots.Server.Business.Interfaces.IAssetManager)">
            <summary>
            AssetsController constructor
            </summary>
            <param name="repository"></param>
            <param name="membershipManager"></param>
            <param name="userManager"></param>
            <param name="automationManager"></param>
            <param name="httpContextAccessor"></param>
            <param name="binaryObjectManager"></param>
            <param name="configuration"></param>
            <param name="binaryObjectRepo"></param>
            <param name="webhookPublisher"></param>
            <param name="manager"></param>
        </member>
        <member name="M:OpenBots.Server.Web.AssetsController.Get(System.String,System.String,System.Int32,System.Int32)">
            <summary>
            Provides a list of all assets
            </summary>
            <param name="top"></param>
            <param name="skip"></param>
            <param name="filter"></param>
            <param name="orderBy"></param>
            <response code="200">OK,a Paginated list of all Assets</response>
            <response code="400">BadRequest</response>
            <response code="403">Forbidden,unauthorized access</response> 
            <response code="404">Not found</response>
            <response code="422">Unprocessable entity</response>
            <returns>Paginated list of all assets</returns>
        </member>
        <member name="M:OpenBots.Server.Web.AssetsController.Count(System.String)">
            <summary>
            Provides a count of assets 
            </summary>
            <param name="filter"></param>
            <response code="200">Ok, total count of assets</response>
            <response code="400">Bad request</response>
            <response code="403">Forbidden, unauthorized access</response>  
            <response code="404">Not found</response>
            <response code="422">Unprocessable entity</response>
            <returns>Total count of assets</returns>
        </member>
        <member name="M:OpenBots.Server.Web.AssetsController.Get(System.String)">
            <summary>
            Provides an asset's details for a particular asset id
            </summary>
            <param name="id">Asset id</param>
            <response code="200">Ok, if an asset exists with the given id</response>
            <response code="304">Not modified</response>
            <response code="400">Bad request, if asset id is not in proper format or proper Guid</response>
            <response code="403">Forbidden</response>
            <response code="404">Not found, when no asset exists for the given asset id</response>
            <response code="422">Unprocessable entity</response>
            <returns>Asset details for the given id</returns>
        </member>
        <member name="M:OpenBots.Server.Web.AssetsController.Post(OpenBots.Server.Model.Asset)">
             <summary>
             Create a new asset entity
             </summary>
             <param name="request"></param>
             <response code="200">Ok, new asset created and returned</response>
             <response code="400">Bad request, when the asset value is not in proper format</response>
             <response code="403">Forbidden, unauthorized access</response>
            <response code="409">Conflict, concurrency error</response> 
             <response code="422">Unprocessabile entity, when a duplicate record is being entered</response>
             <returns>Newly created asset details</returns>
        </member>
        <member name="M:OpenBots.Server.Web.AssetsController.Post(System.String,Microsoft.AspNetCore.Http.IFormFile)">
            <summary>
            Create a new binary object and upload asset file
            </summary>
            <param name="id"></param>
            <param name="file"></param>
            <response code="200">Ok, asset updated and returned</response>
            <response code="400">Bad request, when the asset value is not in proper format</response>
            <response code="403">Forbidden, unauthorized access</response>
            <response code="409">Conflict, concurrency error</response> 
            <response code="422">Unprocessabile entity, when a duplicate record is being entered</response>
            <returns>Newly updated asset details</returns>
        </member>
        <member name="M:OpenBots.Server.Web.AssetsController.ExportAsset(System.String)">
            <summary>
            Export/download an asset file
            </summary>
            <param name="id"></param>
            <response code="200">Ok if an asset file exists with the given id</response>
            <response code="304">Not modified</response>
            <response code="400">Bad request, if asset id is not in proper format or proper Guid</response>
            <response code="403">Forbidden</response>
            <response code="404">Not found, when no asset file exists for the given asset id</response>
            <response code="422">Unprocessable entity</response>
            <returns>Downloaded asset file</returns>
        </member>
        <member name="M:OpenBots.Server.Web.AssetsController.Put(System.String,OpenBots.Server.Model.Asset)">
            <summary>
            Updates an asset 
            </summary>
            <remarks>
            Provides an action to update an asset, when asset id and the new details of asset are given
            </remarks>
            <param name="id">Asset id, produces bad request if id is null or ids don't match</param>
            <param name="request">Asset details to be updated</param>
            <response code="200">Ok, if the asset details for the given asset id have been updated</response>
            <response code="400">Bad request, if the asset id is null or ids don't match</response>
            <response code="403">Forbidden, unauthorized access</response>
            <response code="409">Conflict</response>
            <response code="422">Unprocessable entity</response>
            <returns>Ok response with the updated value</returns>
        </member>
        <member name="M:OpenBots.Server.Web.AssetsController.Put(System.String,OpenBots.Server.ViewModel.ViewModels.UpdateAssetViewModel)">
            <summary>
            Updates an asset with file 
            </summary>
            <remarks>
            Provides an action to update an asset with file, when asset id and the new details of asset are given
            </remarks>
            <param name="id">Asset id, produces bad request if id is null or ids don't match</param>
            <param name="request">New file to update Asset</param>
            <response code="200">Ok, if the asset details for the given asset id have been updated</response>
            <response code="400">Bad request, if the asset id is null or ids don't match</response>
            <response code="403">Forbidden, unauthorized access</response>
            <response code="422">Unprocessable entity</response>
            <returns>Ok response with the updated asset value</returns>
        </member>
        <member name="M:OpenBots.Server.Web.AssetsController.Delete(System.String)">
            <summary>
            Deletes an asset with a specified id
            </summary>
            <param name="id">Asset id to be deleted - throws bad request if null or empty Guid</param>
            <response code="200">Ok, when asset is soft deleted, (isDeleted flag is set to true in database)</response>
            <response code="400">Bad request, if asset id is null or empty Guid</response>
            <response code="403">Forbidden</response>
            <returns>Ok response</returns>
        </member>
        <member name="M:OpenBots.Server.Web.AssetsController.Patch(System.String,Microsoft.AspNetCore.JsonPatch.JsonPatchDocument{OpenBots.Server.Model.Asset})">
            <summary>
            Updates partial details of asset
            </summary>
            <param name="id">Asset identifier</param>
            <param name="request">Value of the asset to be updated</param>
            <response code="200">Ok, if update of asset is successful</response>
            <response code="400">Bad request, if the id is null or ids don't match</response>
            <response code="403">Forbidden, unauthorized access</response>
            <response code="422">Unprocessable entity, validation error</response>
            <returns>Ok response, if the partial asset values have been updated</returns>
        </member>
        <member name="M:OpenBots.Server.Web.AssetsController.Increment(System.String)">
            <summary>
            Increment the number value of an asset
            </summary>
            <param name="id">Asset identifier</param>
            <response code="200">Ok, if update of asset is successful</response>
            <response code="400">Bad request, if the id is null or ids don't match</response>
            <response code="403">Forbidden, unauthorized access</response>
            <response code="422">Unprocessable entity, validation error</response>
            <returns>Ok response with updated asset value</returns>
        </member>
        <member name="M:OpenBots.Server.Web.AssetsController.Decrement(System.String)">
            <summary>
            Decrement the number value of asset
            </summary>
            <param name="id">Asset identifier</param>
            <response code="200">Ok, if update of asset is successful</response>
            <response code="400">Bad request, if the id is null or ids don't match</response>
            <response code="403">Forbidden, unauthorized access</response>
            <response code="422">Unprocessable entity, validation error</response>
            <returns>Ok response with updated asset value</returns>
        </member>
        <member name="M:OpenBots.Server.Web.AssetsController.Add(System.String,System.Int32)">
            <summary>
            Add the number value of asset
            </summary>
            <param name="id">Asset identifier</param>
            <param name="value">Value of the asset to be updated</param>
            <response code="200">Ok, if update of asset is successful</response>
            <response code="400">Bad request, if the id is null or ids don't match.</response>
            <response code="403">Forbidden, unauthorized access</response>
            <response code="422">Unprocessable entity, validation error</response>
            <returns>Ok response with updated asset value</returns>
        </member>
        <member name="M:OpenBots.Server.Web.AssetsController.Subtract(System.String,System.Int32)">
            <summary>
            Subtract the number value of asset
            </summary>
            <param name="id">Asset identifier</param>
            <param name="value">Value of the asset to be updated</param>
            <response code="200">Ok, if update of asset is successful</response>
            <response code="400">Bad request, if the id is null or ids don't match</response>
            <response code="403">Forbidden, unauthorized access</response>
            <response code="422">Unprocessable entity, validation error</response>
            <returns>Ok response with updated asset value</returns>
        </member>
        <member name="M:OpenBots.Server.Web.AssetsController.Append(System.String,System.String)">
            <summary>
            Append the text value of asset
            </summary>
            <param name="id">Asset identifier</param>
            <param name="value">Value of the asset to be updated</param>
            <response code="200">Ok, if update of asset is successful</response>
            <response code="400">Bad request, if the id is null or ids don't match</response>
            <response code="403">Forbidden, unauthorized access</response>
            <response code="422">Unprocessable entity, validation error</response>
            <returns>Ok response with updated asset value</returns>
        </member>
        <member name="T:OpenBots.Server.Web.AutomationExecutionLogsController">
            <summary>
            Controller for Automation Execution Logs
            </summary>
        </member>
        <member name="M:OpenBots.Server.Web.AutomationExecutionLogsController.#ctor(OpenBots.Server.DataAccess.Repositories.IAutomationExecutionLogRepository,OpenBots.Server.DataAccess.Repositories.IAgentRepository,OpenBots.Server.Business.IMembershipManager,OpenBots.Server.Security.ApplicationIdentityUserManager,OpenBots.Server.Business.IAutomationExecutionLogManager,Microsoft.AspNetCore.Http.IHttpContextAccessor,Microsoft.Extensions.Configuration.IConfiguration)">
            <summary>
            AutomationExecutionLogsController constructor
            </summary>
            <param name="repository"></param>
            <param name="agentRepository"></param>
            <param name="membershipManager"></param>
            <param name="userManager"></param>
            <param name="automationExecutionLogManager"></param>
            <param name="httpContextAccessor"></param>
            <param name="configuration"></param>
        </member>
        <member name="M:OpenBots.Server.Web.AutomationExecutionLogsController.Get(System.String,System.String,System.Int32,System.Int32)">
            <summary>
            Provides a list of all AutomationExecutionLogs
            </summary>
            <response code="200">OK,a Paginated list of all AutomationExecutionLogs</response>
            <response code="400">BadRequest</response>
            <response code="403">Forbidden,unauthorized access</response>        
            <response code="422">UnprocessableEntity</response>
            <returns>Paginated list of all AutomationExecutionLogs </returns>
        </member>
        <member name="M:OpenBots.Server.Web.AutomationExecutionLogsController.View(System.String,System.String,System.Int32,System.Int32)">
            <summary>
            Provides a viewmodel list of all AutomationExecutionLogs
            </summary>
            <response code="200">OK,a Paginated list of all AutomationExecutionLogs</response>
            <response code="400">BadRequest</response>
            <response code="403">Forbidden,unauthorized access</response>        
            <response code="422">UnprocessableEntity</response>
            <returns>Paginated list of all AutomationExecutionLogs </returns>
        </member>
        <member name="M:OpenBots.Server.Web.AutomationExecutionLogsController.Count(System.String)">
            <summary>
            Provides a Count of AutomationExecutionLogs 
            </summary>
            <response code="200">OK, total count of AutomationExecutionLogs</response>
            <response code="400">BadRequest</response>
            <response code="403">Forbidden,unauthorized access</response>        
            <response code="422">UnprocessableEntity</response>
            <returns>Int contating the total number of AutomationExecutionLogs </returns>
        </member>
        <member name="M:OpenBots.Server.Web.AutomationExecutionLogsController.Get(System.String)">
            <summary>
            Provides a AutomationExecutionLog's details for a particular AutomationExecutionLog Id.
            </summary>
            <param name="id">AutomationExecutionLog id</param>
            <response code="200">OK, If a AutomationExecutionLog exists with the given Id.</response>
            <response code="304">Not modified</response>
            <response code="400">BadRequest,If AutomationExecutionLog ID is not in the proper format or proper Guid.</response>
            <response code="403">Forbidden</response>
            <response code="404">NotFound, when no AutomationExecutionLog exists for the given AutomationExecutionLog ID</response>
            <response code="422">Unprocessable entity</response>
            <returns>AutomationExecutionLog details for the given ID</returns>
        </member>
        <member name="M:OpenBots.Server.Web.AutomationExecutionLogsController.View(System.String)">
            <summary>
            Provides a AutomationExecution's details for a particular AutomationExecution id
            </summary>
            <param name="id">AutomationExecution id</param>
            <response code="200">OK, if a AutomationExecution exists with the given id</response>
            <response code="304">Not modified</response>
            <response code="400">BadRequest, if AutomationExecution ID is not in the proper format or proper Guid</response>
            <response code="403">Forbidden</response>
            <response code="404">NotFound, when no AutomationExecution exists for the given AutomationExecution ID</response>
            <response code="422">Unprocessable entity</response>
            <returns>AutomationExecution details for the given ID</returns>
        </member>
        <member name="M:OpenBots.Server.Web.AutomationExecutionLogsController.Post(OpenBots.Server.Model.AutomationExecutionLog)">
             <summary>
             Adds a new AutomationExecutionLog to the existing AutomationExecutionLogs
             </summary>
             <remarks>
             Adds the AutomationExecutionLog with unique AutomationExecutionLog Id to the existing AutomationExecutionLogs
             </remarks>
             <param name="request"></param>
             <response code="200">OK,new AutomationExecutionLog created and returned</response>
             <response code="400">BadRequest,When the AutomationExecutionLog value is not in proper format</response>
             <response code="403">Forbidden, unauthorized access</response>
            <response code="409">Conflict,concurrency error</response> 
             <response code="422">UnprocessabileEntity,when a duplicate record is being entered.</response>
             <returns> newly created unique AutomationExecutionLog Id with route name </returns>
        </member>
        <member name="M:OpenBots.Server.Web.AutomationExecutionLogsController.StartAutomation(OpenBots.Server.Model.AutomationExecutionLog)">
             <summary>
             Allows Agent to add a new AutomationExecutionLog to the existing AutomationExecutionLogs
             </summary>
             <remarks>
             Agent is able to Add the AutomationExecutionLog if the Agent is Connected
             </remarks>
             <param name="request"></param>
             <response code="200">OK,new AutomationExecutionLog created and returned</response>
             <response code="400">BadRequest,When the AutomationExecutionLog value is not in proper format</response>
             <response code="403">Forbidden, unauthorized access</response>
            <response code="409">Conflict,concurrency error</response> 
             <response code="422">UnprocessabileEntity,when a duplicate record is being entered.</response>
             <returns> newly created unique AutomationExecutionLog Id with route name </returns>
        </member>
        <member name="M:OpenBots.Server.Web.AutomationExecutionLogsController.Put(System.String,OpenBots.Server.Model.AutomationExecutionLog)">
            <summary>
            Updates a AutomationExecutionLog 
            </summary>
            <remarks>
            Provides an action to update a AutomationExecutionLog, when AutomationExecutionLog id and the new details of AutomationExecutionLog are given
            </remarks>
            <param name="id">AutomationExecutionLog Id,produces Bad request if Id is null or Id's don't match</param>
            <param name="request">AutomationExecutionLog details to be updated</param>
            <response code="200">OK, If the AutomationExecutionLog details for the given AutomationExecutionLog Id has been updated.</response>
            <response code="400">BadRequest,if the AutomationExecutionLog Id is null or Id's don't match</response>
            <response code="403">Forbidden,unauthorized access</response>
            <response code="422">UnprocessableEntity</response>
            <returns>OK response with the updated value</returns>
        </member>
        <member name="M:OpenBots.Server.Web.AutomationExecutionLogsController.EndAutomation(System.String,OpenBots.Server.Model.AutomationExecutionLog)">
            <summary>
            Agent is able to update a AutomationExecutionLog End status
            </summary>
            <remarks>
            Provides an action to update a AutomationExecutionLog, when AutomationExecutionLog id and the new details of AutomationExecutionLog are given
            </remarks>
            <param name="id">AutomationExecutionLog Id,produces Bad request if Id is null or Id's don't match</param>
            <param name="request">AutomationExecutionLog details to be updated</param>
            <response code="200">OK, If the AutomationExecutionLog details for the given AutomationExecutionLog Id has been updated.</response>
            <response code="400">BadRequest,if the AutomationExecutionLog Id is null or Id's don't match</response>
            <response code="403">Forbidden,unauthorized access</response>
            <response code="422">UnprocessableEntity</response>
            <returns>OK response with the updated value</returns>
        </member>
        <member name="M:OpenBots.Server.Web.AutomationExecutionLogsController.Delete(System.String)">
            <summary>
            Deletes a AutomationExecutionLog with a specified id from the AutomationExecutionLog.
            </summary>
            <param name="id">AutomationExecutionLog ID to be deleted- throws BadRequest if null or empty Guid/</param>
            <response code="200">OK,when AutomationExecutionLog is softdeleted,( isDeleted flag is set to true in DB) </response>
            <response code="400">BadRequest,If AutomationExecutionLog Id is null or empty Guid</response>
            <response code="403">Forbidden </response>
            <returns>OK response with deleted value </returns>
        </member>
        <member name="M:OpenBots.Server.Web.AutomationExecutionLogsController.Patch(System.String,Microsoft.AspNetCore.JsonPatch.JsonPatchDocument{OpenBots.Server.Model.AutomationExecutionLog})">
            <summary>
            Updates partial details of AutomationExecutionLog.
            </summary>
            <param name="id">AutomationExecutionLog identifier</param>
            <param name="request">Value of the AutomationExecutionLog to be updated.</param>
            <response code="200">OK,If update of AutomationExecutionLog is successful. </response>
            <response code="400">BadRequest,if the Id is null or Id's dont match.</response>
            <response code="403">Forbidden,unauthorized access</response>
            <response code="422">Unprocessable entity,validation error</response>
            <returns>Ok response, if the partial AutomationExecutionLog values has been updated</returns>
        </member>
        <member name="T:OpenBots.Server.Web.AutomationLogsController">
            <summary>
            Controller for Automation Logs
            </summary>
        </member>
        <member name="M:OpenBots.Server.Web.AutomationLogsController.#ctor(OpenBots.Server.DataAccess.Repositories.IAutomationLogRepository,OpenBots.Server.Business.IMembershipManager,OpenBots.Server.Security.ApplicationIdentityUserManager,OpenBots.Server.Business.IAutomationLogManager,Microsoft.Extensions.Configuration.IConfiguration,Microsoft.AspNetCore.Http.IHttpContextAccessor)">
            <summary>
            AutomationLogsController constructor
            </summary>
            <param name="configuration"></param>
            <param name="userManager"></param>
            <param name="repository"></param>
            <param name="membershipManager"></param>
            <param name="httpContextAccessor"></param>
            <param name="automationLogManager"></param>
        </member>
        <member name="M:OpenBots.Server.Web.AutomationLogsController.Get(System.String,System.String,System.Int32,System.Int32)">
            <summary>
            Provides a list of all automation logs
            </summary>
            <response code="200">Ok, a paginated list of all automation logs</response>
            <response code="400">Bad request</response>
            <response code="403">Forbidden, unauthorized access</response>   
            <response code="404">Not found</response>
            <response code="422">Unprocessable entity</response>
            <returns>Paginated list of all automation logs</returns>
        </member>
        <member name="M:OpenBots.Server.Web.AutomationLogsController.Count(System.String)">
            <summary>
            Provides a count of automation logs
            </summary>
            <param name="filter"></param>
            <response code="200">Ok, total count of automation logs</response>
            <response code="400">Bad request</response>
            <response code="403">Forbidden, unauthorized access</response>        
            <response code="422">Unprocessable entity</response>
            <returns>Count of all automation logs</returns>
        </member>
        <member name="M:OpenBots.Server.Web.AutomationLogsController.Get(System.String)">
            <summary>
            Provides a automation log's details for a particular automation log id
            </summary>
            <param name="id">automation log id</param>
            <response code="200">Ok, if a automation log exists with the given id</response>
            <response code="304">Not modified</response>
            <response code="400">Bad request, if automation log id is not in the proper format or a proper Guid</response>
            <response code="403">Forbidden</response>
            <response code="404">Not found, when no automation log exists for the given automation log id</response>
            <response code="422">Unprocessable entity</response>
            <returns>Automation log details for the given id</returns>
        </member>
        <member name="M:OpenBots.Server.Web.AutomationLogsController.Export(System.String,System.String,System.Int32,System.Int32,System.String)">
            <summary>
            Exports automation logs into a downloadable file
            </summary>
            <param name="fileType">Specifies the file type to be downloaded: csv, zip, or json</param>
            <response code="200">Ok, if a log exists with the given filters</response>
            <response code="304">Not modified</response>
            <response code="400">Bad request</response>
            <response code="403">Forbidden, unauthorized access</response>
            <response code="404">Not found</response>
            <response code="422">Unprocessable entity</response>
            <returns>Downloadable file</returns>
        </member>
        <member name="M:OpenBots.Server.Web.AutomationLogsController.Post(OpenBots.Server.Model.AutomationLog)">
             <summary>
             Adds a new automation log to the existing automation logs
             </summary>
             <remarks>
             Adds the automation log with unique automation log id to the existing automation logs
             </remarks>
             <param name="request"></param>
             <response code="200">Ok, new automation log created and returned</response>
             <response code="400">Bad request, when the automation log value is not in proper format</response>
             <response code="403">Forbidden, unauthorized access</response>
            <response code="409">Conflict, concurrency error</response> 
             <response code="422">Unprocessabile entity, when a duplicate record is being entered</response>
             <returns>Newly created unique automation log id with route name</returns>
        </member>
        <member name="T:OpenBots.Server.Web.IPFencingController">
            <summary>
            Controller for IPFencing
            </summary>
        </member>
        <member name="M:OpenBots.Server.Web.IPFencingController.#ctor(OpenBots.Server.DataAccess.Repositories.IIPFencingRepository,OpenBots.Server.Business.IMembershipManager,OpenBots.Server.Security.ApplicationIdentityUserManager,Microsoft.Extensions.Configuration.IConfiguration,Microsoft.AspNetCore.Http.IHttpContextAccessor,OpenBots.Server.DataAccess.Repositories.IOrganizationSettingRepository,OpenBots.Server.Business.IIPFencingManager)">
            <summary>
            IPFencing controller's constructor
            </summary>
            <param name="repository"></param>
            <param name="membershipManager"></param>
            <param name="userManager"></param>
            <param name="configuration"></param>
            <param name="httpContextAccessor"></param>
            <param name="iPFencingManager"></param>
            <param name="organizationSettingRepository"></param>
        </member>
        <member name="M:OpenBots.Server.Web.IPFencingController.Get(System.String,System.String,System.String,System.Int32,System.Int32)">
            <summary>
            Provides a list of all IPFencings
            </summary>
            <param name="organizationId"></param>
            <param name="top"></param>
            <param name="skip"></param>
            <param name="filter"></param>
            <param name="orderBy"></param>
            <response code="200">Ok, a paginated list of all IPFencings</response>
            <response code="400">Bad request</response>
            <response code="403">Forbidden, unauthorized access</response> 
            <response code="404">Not found</response>
            <response code="422">Unprocessable entity</response>
            <returns>Paginated list of all IPFencings</returns>
        </member>
        <member name="M:OpenBots.Server.Web.IPFencingController.Get(System.String,System.String)">
            <summary>
            Provides an IPFencing's details for a particular IPFencing ID
            </summary>
            <param name="id">IPFencing id</param>
            <param name="organizationId"></param>
            <response code="200">Ok, if an IPFencing exists with the given id and organization id</response>
            <response code="304">Not modified</response>
            <response code="400">Bad request, if IPFencing request was unable to be processed </response>
            <response code="403">Forbidden</response>
            <response code="404">Not found, when no IPFencing exists for the given IPFencing id</response>
            <response code="422">Unprocessable entity</response>
            <returns>IPFencing details for the given id</returns>
        </member>
        <!-- Badly formed XML comment ignored for member "M:OpenBots.Server.Web.IPFencingController.Mode(System.String)" -->
        <member name="M:OpenBots.Server.Web.IPFencingController.Post(System.String,OpenBots.Server.ViewModel.CreateIPFencingViewModel)">
            <summary>
            Adds a new IPFencing rule with the specified organization ID
            </summary>
            <param name="organizationId">Organization identifier</param>
            <param name="request">Json containing IPFencing model </param>
            <response code="200">Ok, if IPFencing rule has been created</response>
            <response code="400">Bad request, if IPFencing request was unable to be processed</response>
            <response code="403">Forbidden, unauthorized access</response>
            <response code="409">Conflict, when IPFencing with the particular id already exists</response>
            <response code="422">Unprocessable entity, validation error or cannot insert duplicate constraint</response>
            <returns>Ok response with newly created IPFencing record</returns>
        </member>
        <member name="M:OpenBots.Server.Web.IPFencingController.Put(System.String,System.String,OpenBots.Server.Model.IPFencing)">
            <summary>
            Update the IPFencing rule
            </summary>
            <remarks>Updates the IPFencing with the particular id for the given organization</remarks>
            <param name="organizationId">Organization identifier</param>
            <param name="id">IPFencing id</param>
            <param name="request">New value of the IPFencing to be updated</param>
            <response code="200">Ok, if the update of the IPFencing for the particular id has been successful</response>
            <response code="400">Bad request, if IPFencing request was unable to be processed</response>
            <response code="403">Forbidden, unauthorized access by the user</response>
            <response code="404">Not found, if no IPFencing exists for the given id</response>
            <response code="409">Conflict</response>
            <response code="422">Unprocessable Entity, validation error</response>
            <returns>Ok response with the updated IPFencing details</returns>
        </member>
        <member name="M:OpenBots.Server.Web.IPFencingController.AllowAll(System.String)">
            <summary>
            Updates the IPFencing Mode to AllowMode
            </summary>
            <remarks>Updates the IPFencingMode of the specified organizationID to AllowMode</remarks>
            <param name="organizationId">Organization identifier</param>
            <response code="200">Ok, if the update of the IPFencingMode for the particular organizationId has been successful</response>
            <response code="400">Bad request, if IPFencing request was unable to be processed</response>
            <response code="403">Forbidden, unauthorized access by the user</response>
            <response code="404">Not found, if no OrganizationSettings exists for the given id</response>
            <response code="409">Conflict</response>
            <response code="422">Unprocessable Entity, validation error</response>
            <returns>Ok response with success message</returns>
        </member>
        <member name="M:OpenBots.Server.Web.IPFencingController.DenyAll(System.String)">
            <summary>
            Updates the IPFencing Mode to DenyAll
            </summary>
            <remarks>Updates the IPFencingMode of the specified organizationID to DenyMode</remarks>
            <param name="organizationId">Organization identifier</param>
            <response code="200">Ok, if the update of the IPFencingMode for the particular id has been successful</response>
            <response code="400">Bad request, if IPFencing request was unable to be processed</response>
            <response code="403">Forbidden, unauthorized access by the user</response>
            <response code="404">Not found, if no OrganizationSettings exists for the given id</response>
            <response code="409">Conflict</response>
            <response code="422">Unprocessable Entity, validation error</response>
            <returns>Ok response with sucess message</returns>
        </member>
        <member name="M:OpenBots.Server.Web.IPFencingController.Delete(System.String,System.String)">
            <summary>
            Deletes an IPFencing rule with a specified id from the organization.
            </summary>
            <param name="id">IPFencing id to be deleted - throws bad request if null or empty Guid</param>
            <response code="200">Ok, when IPFencing is soft deleted </response>
            <response code="400">Bad request, if IPFencing id is null or empty Guid</response>
            <response code="403">Forbidden</response>
            <returns>Ok response</returns>
        </member>
        <member name="M:OpenBots.Server.Web.IPFencingController.Patch(System.String,System.String,Microsoft.AspNetCore.JsonPatch.JsonPatchDocument{OpenBots.Server.Model.IPFencing})">
            <summary>
            Updates partial details of an IPFencing entity.
            </summary>
            <param name="id">IPFencing identifier</param>
            <param name="value">Details of IPFencing patch</param>
            <response code="200">Ok, if update of IPFencing is successful</response>
            <response code="400">Bad request, if the id is null or ids don't match</response>
            <response code="403">Forbidden, unauthorized access</response>
            <response code="422">Unprocessable entity, validation error</response>
            <returns>Ok response, if the partial IPFencing details have been updated</returns>
        </member>
        <member name="T:OpenBots.Server.Web.CredentialsController">
            <summary>
            Controller for credentials
            </summary>
        </member>
        <member name="M:OpenBots.Server.Web.CredentialsController.#ctor(OpenBots.Server.DataAccess.Repositories.ICredentialRepository,OpenBots.Server.Business.IMembershipManager,OpenBots.Server.Security.ApplicationIdentityUserManager,OpenBots.Server.Business.ICredentialManager,Microsoft.Extensions.Configuration.IConfiguration,Microsoft.AspNetCore.Http.IHttpContextAccessor,OpenBots.Server.Web.Webhooks.IWebhookPublisher)">
            <summary>
            CredentialsController constructor
            </summary>
            <param name="repository"></param>
            <param name="membershipManager"></param>
            <param name="userManager"></param>
            <param name="credentialManager"></param>
            <param name="configuration"></param>
            <param name="httpContextAccessor"></param>
            <param name="webhookPublisher"></param>
        </member>
        <member name="M:OpenBots.Server.Web.CredentialsController.Get(System.String,System.String,System.Int32,System.Int32)">
            <summary>
            Provides a list of all credentials
            </summary>
            <param name="filter"></param>
            <param name="orderBy"></param>
            <param name="skip"></param>
            <param name="top"></param>
            <response code="200">Ok, a paginated list of all credentials</response>
            <response code="400">Bad request</response>
            <response code="403">Forbidden, unauthorized access</response>        
            <response code="422">Unprocessable entity</response>
            <returns>Paginated list of all credentials</returns>
        </member>
        <member name="M:OpenBots.Server.Web.CredentialsController.Count(System.String)">
            <summary>
            Provides a count of credentials 
            </summary>
            <param name="filter"></param>
            <response code="200">Ot, total count of credentials</response>
            <response code="400">Bad request</response>
            <response code="403">Forbidden, unauthorized access</response>        
            <response code="422">Unprocessable entity</response>
            <returns>Count of all credentials</returns>
        </member>
        <member name="M:OpenBots.Server.Web.CredentialsController.Get(System.String)">
            <summary>
            Provides a credential's details for a particular credential id
            </summary>
            <param name="id">Credential id</param>
            <response code="200">Ok, if a credential exists with the given id</response>
            <response code="304">Not modified</response>
            <response code="400">Bad request, if credential id is not in proper format or a proper Guid</response>
            <response code="403">Forbidden</response>
            <response code="404">Not found, when no credential exists for the given Credential id</response>
            <response code="422">Unprocessable entity</response>
            <returns>Credential details for the given id</returns>
        </member>
        <member name="M:OpenBots.Server.Web.CredentialsController.View(System.String)">
            <summary>
            Provides a credential's view details for a particular credential id
            </summary>
            <param name="id">Credential id</param>
            <response code="200">Ok, if a credential exists with the given id</response>
            <response code="304">Not modified</response>
            <response code="400">Bad request, if credential id is not in proper format or a proper Guid</response>
            <response code="403">Forbidden</response>
            <response code="404">Not found, when no credential exists for the given credential id</response>
            <response code="422">Unprocessable entity</response>
            <returns>Credential view details for the given id</returns>
        </member>
        <member name="M:OpenBots.Server.Web.CredentialsController.GetPassword(System.String)">
            <summary>
            Provides a credential's password string for a particular credential id
            </summary>
            <param name="id">Credential id</param>
            <response code="200">Ok, if a credential exists with the given id</response>
            <response code="304">Not modified</response>
            <response code="400">Bad request, if credential id is not in proper format or a proper Guid</response>
            <response code="403">Forbidden</response>
            <response code="404">Not found, when no credential exists for the given credential id</response>
            <response code="422">Unprocessable entity</response>
            <returns>Credential view details for the given id</returns>
        </member>
        <member name="M:OpenBots.Server.Web.CredentialsController.Post(OpenBots.Server.Model.Credential)">
            <summary>
            Adds a new credential to the existing credentials
            </summary>
            <remarks>
            Adds the Credential with unique id to the existing credentials
            </remarks>
            <param name="request"></param>
            <response code="200">Ok, new credential created and returned</response>
            <response code="400">Bad request, when the credential value is not in proper format</response>
            <response code="403">Forbidden, unauthorized access</response>
            <response code="409">Conflict, concurrency error</response> 
            <response code="422">Unprocessabile entity, when a duplicate record is being entered</response>
            <returns>Newly created unique credential</returns>
        </member>
        <member name="M:OpenBots.Server.Web.CredentialsController.Put(System.String,OpenBots.Server.Model.Credential)">
            <summary>
            Updates a credential 
            </summary>
            <remarks>
            Provides an action to update a credential, when id and the new details of credential are given
            </remarks>
            <param name="id">Credential Id,produces Bad request if Id is null or Id's don't match</param>
            <param name="request">Credential details to be updated</param>
            <response code="200">Ok, if the credential details for the given credential id have been updated</response>
            <response code="400">Bad request, if the credential id is null or ids don't match</response>
            <response code="403">Forbidden, unauthorized access</response>
            <response code="422">Unprocessable entity</response>
            <returns>Ok response with the updated value</returns>
        </member>
        <member name="M:OpenBots.Server.Web.CredentialsController.Delete(System.String)">
            <summary>
            Deletes a credential with a specified id
            </summary>
            <param name="id">Credential id to be deleted - throws bad request if null or empty Guid</param>
            <response code="200">Ok, when credential is soft deleted, (isDeleted flag is set to true in database)</response>
            <response code="400">Bad request, if credential id is null or empty Guid</response>
            <response code="403">Forbidden</response>
            <returns>Ok response</returns>
        </member>
        <member name="M:OpenBots.Server.Web.CredentialsController.Patch(System.String,Microsoft.AspNetCore.JsonPatch.JsonPatchDocument{OpenBots.Server.Model.Credential})">
            <summary>
            Updates partial details of credential
            </summary>
            <param name="id">Credential identifier</param>
            <param name="request">Value of the credential to be updated</param>
            <response code="200">Ok, if update of credential is successful</response>
            <response code="400">Bad request, if the id is null or ids don't match</response>
            <response code="403">Forbidden, unauthorized access</response>
            <response code="422">Unprocessable entity, validation error</response>
            <returns>Ok response, if the partial credential values have been updated</returns>
        </member>
        <member name="M:OpenBots.Server.Web.CredentialsController.GetLookup">
            <summary>
            Lookup list of all active directory credentials
            </summary>
            <response code="200">Ok, a lookup list of all active directory credentials</response>
            <response code="400">BadRequest</response>
            <response code="403">Forbidden, unauthorized access</response>
            <response code="404">Not found</response>
            <response code="422">Unprocessable entity</response>
            <returns>Lookup list of all active directory credentials</returns>
        </member>
        <member name="T:OpenBots.Server.Web.JobsController">
            <summary>
            Controller for Jobs
            </summary>
        </member>
        <member name="M:OpenBots.Server.Web.JobsController.#ctor(OpenBots.Server.DataAccess.Repositories.IJobRepository,OpenBots.Server.DataAccess.Repositories.IAutomationRepository,OpenBots.Server.DataAccess.Repositories.IJobParameterRepository,OpenBots.Server.DataAccess.Repositories.IJobCheckpointRepository,OpenBots.Server.Business.IMembershipManager,OpenBots.Server.Security.ApplicationIdentityUserManager,OpenBots.Server.Business.IJobManager,Microsoft.AspNetCore.SignalR.IHubContext{OpenBots.Server.Web.Hubs.NotificationHub},Microsoft.Extensions.Configuration.IConfiguration,Microsoft.AspNetCore.Http.IHttpContextAccessor,OpenBots.Server.DataAccess.Repositories.Interfaces.IAutomationVersionRepository,OpenBots.Server.Web.Webhooks.IWebhookPublisher)">
            <summary>
            JobsController constructor
            </summary>
            <param name="repository"></param>
            <param name="membershipManager"></param>
            <param name="userManager"></param>
            <param name="jobManager"></param>
            <param name="hub"></param>
            <param name="configuration"></param>
            <param name="httpContextAccessor"></param>
            <param name="jobCheckpointRepository"></param>
            <param name="jobParameterRepository"></param>
            <param name="automationRepository"></param>
            <param name="automationVersionRepo"></param>
            <param name="webhookPublisher"></param>
        </member>
        <member name="M:OpenBots.Server.Web.JobsController.Get(System.String,System.String,System.Int32,System.Int32)">
            <summary>
            Provides a list of all jobs
            </summary>
            <param name="filter"></param>
            <param name="orderBy"></param>
            <param name="skip"></param>
            <param name="top"></param>
            <response code="200">Ok, a paginated list of all jobs</response>
            <response code="400">Bad request</response>
            <response code="403">Forbidden, unauthorized access</response> 
            <response code="404">Not found</response>
            <response code="422">Unprocessable entity</response>
            <returns>Paginated list of all jobs</returns>
        </member>
        <member name="M:OpenBots.Server.Web.JobsController.View(System.String,System.String,System.Int32,System.Int32)">
            <summary>
            Provides a view model list of all jobs
            </summary>
            <param name="top"></param>
            <param name="skip"></param>
            <param name="orderBy"></param>
            <param name="filter"></param>
            <response code="200">Ok, a paginated list of all jobs</response>
            <response code="400">Bad request</response>
            <response code="403">Forbidden, unauthorized access</response>  
            <response code="404">Not found</response>
            <response code="422">Unprocessable entity</response>
            <returns>Paginated list of all jobs</returns>
        </member>
        <member name="M:OpenBots.Server.Web.JobsController.Count(System.String)">
            <summary>
            Provides a count of jobs 
            </summary>
            <param name="filter"></param>
            <response code="200">Ok, total count of jobs</response>
            <response code="400">Bad request</response>
            <response code="403">Forbidden, unauthorized access</response>        
            <response code="422">Unprocessable entity</response>
            <response code="404">Not found</response>
            <returns>Total count of jobs</returns>
        </member>
        <member name="M:OpenBots.Server.Web.JobsController.CountByStatus(System.String)">
            <summary>
            Provides a count of jobs by job status
            </summary>
            <param name="filter"></param>
            <response code="200">Ok, list of job status counts</response>
            <response code="400">Bad request</response>
            <response code="403">Forbidden, unauthorized access</response>     
            <response code="404">Not found</response>
            <response code="422">Unprocessable entity</response>
            <returns>List of status and count of jobs in a key value pair list</returns>
        </member>
        <member name="M:OpenBots.Server.Web.JobsController.GetJobAgentsLookup">
            <summary>
            Provides a lookup list of all job agents and automations
            </summary>
            <response code="200">Ok, a list of all jobs lookup</response>
            <response code="400">Bad request</response>
            <response code="403">Forbidden, unauthorized access</response> 
            <response code="404">Not found</response>
            <response code="422">Unprocessable entity</response>
            <returns>Paginated list of all jobs lookup</returns>
        </member>
        <member name="M:OpenBots.Server.Web.JobsController.Get(System.String)">
            <summary>
            Provides a job's details for a particular job id
            </summary>
            <param name="id">Job id</param>
            <response code="200">Ok,if a job exists with the given id</response>
            <response code="304">Not modified</response>
            <response code="400">Bad request, if job id is not in the proper format or a proper Guid</response>
            <response code="403">Forbidden</response>
            <response code="404">Not found, when no job exists for the given job id</response>
            <response code="422">Unprocessable entity</response>
            <returns>Job details for the given id</returns>
        </member>
        <member name="M:OpenBots.Server.Web.JobsController.View(System.String)">
            <summary>
            Provides a job's view model details for a particular job id
            </summary>
            <param name="id">Job id</param>
            <response code="200">Ok, if a job exists with the given id</response>
            <response code="304">Not modified</response>
            <response code="400">Bad request, if job id is not in the proper format or a proper Guid</response>
            <response code="403">Forbidden</response>
            <response code="404">Not found, when no job exists for the given job id</response>
            <response code="422">Unprocessable entity</response>
            <returns>Job view model details for the given id</returns>
        </member>
        <member name="M:OpenBots.Server.Web.JobsController.Next(System.String)">
            <summary>
            Gets the next available job for the provided agent id
            </summary>
            <param name="agentId">Agent id</param>
            <response code="200">Ok, if ajJob exists for the given agent id</response>
            <response code="304">Not modified</response>
            <response code="400">Bad request</response>
            <response code="403">Forbidden</response>
            <response code="404">Not found</response>
            <response code="422">Unprocessable entity</response>
            <returns>Returns the oldest available job and sets its status to 'Assigned'</returns>
        </member>
        <member name="M:OpenBots.Server.Web.JobsController.Export(System.String,System.String,System.Int32,System.Int32,System.String)">
            <summary>
            Exports all jobs into a downloadable file
            </summary>
            <param name="filter"></param>
            <param name="orderBy"></param>
            <param name="skip"></param>
            <param name="top"></param>
            <param name="fileType">Specifies the file type to be downloaded: csv, zip, or json</param>
            <response code="200">Ok, if a job exists with the given filters</response>
            <response code="400">Bad request</response>
            <response code="403">Forbidden, unauthorized access</response>
            <response code="422">Unprocessable entity</response>
            <returns> Downloadable file</returns>
        </member>
        <member name="M:OpenBots.Server.Web.JobsController.Post(OpenBots.Server.ViewModel.CreateJobViewModel)">
             <summary>
             Adds a new job to the existing jobs
             </summary>
             <remarks>
             Adds the job with unique job id to the existing jobs
             </remarks>
             <param name="request"></param>
             <response code="200">Ok, new job created and returned</response>
             <response code="400">Bad request, when the job value is not in proper format</response>
             <response code="403">Forbidden, unauthorized access</response>
            <response code="409">Conflict, concurrency error</response> 
             <response code="422">Unprocessabile entity, when a duplicate record is being entered</response>
             <returns>Newly created job details</returns>
        </member>
        <member name="M:OpenBots.Server.Web.JobsController.Put(System.String,OpenBots.Server.ViewModel.CreateJobViewModel)">
            <summary>
            Updates a job 
            </summary>
            <remarks>
            Provides an action to update a job, when job id and the new details of a job are given
            </remarks>
            <param name="id">Job id, produces bad request if id is null or ids don't match</param>
            <param name="request">Job details to be updated</param>
            <response code="200">Ok, if the job details for the given job id has been updated</response>
            <response code="400">Bad request, if the job id is null or ids don't match</response>
            <response code="403">Forbidden, unauthorized access</response>
            <response code="422">Unprocessable entity</response>
            <returns>k response with the updated value</returns>
        </member>
        <member name="M:OpenBots.Server.Web.JobsController.ChangeStatus(System.String,OpenBots.Server.Model.JobStatusType,System.String,OpenBots.Server.ViewModel.JobErrorViewModel)">
            <summary>
            Updates a job with the specified status
            </summary>
            <remarks>
            Provides an action to update a job status, when job id and the new details of job are given
            </remarks>
            <param name="id">Job id, produces bad request if id is null or ids don't match</param>
            <param name="status">Status value for the specified job id</param>
            <param name="agentId">Id of agent that is updating job status</param>
            <param name="jobErrors">Job error details to be updated</param>
            <response code="200">Ok, if the job details for the given job id has been updated</response>
            <response code="400">Bad request, if the job id is null or ids don't match</response>
            <response code="403">Forbidden, unauthorized access</response>
            <response code="404">Not found, when no job exists for the given agent id</response>
            <response code="422">Unprocessable entity</response>
            <returns>Ok response with the updated value</returns>
        </member>
        <member name="M:OpenBots.Server.Web.JobsController.Delete(System.String)">
            <summary>
            Deletes a job with a specified id from the job
            </summary>
            <param name="id">Job id to be deleted - throws bad request if null or empty Guid</param>
            <response code="200">Ok, when job is soft deleted, (isDeleted flag is set to true in database)</response>
            <response code="400">Bad request, if job id is null or empty Guid</response>
            <response code="403">Forbidden</response>
            <returns>Ok response</returns>
        </member>
        <member name="M:OpenBots.Server.Web.JobsController.Patch(System.String,Microsoft.AspNetCore.JsonPatch.JsonPatchDocument{OpenBots.Server.Model.Job})">
            <summary>
            Updates partial details of a job
            </summary>
            <param name="id">Job identifier</param>
            <param name="request">Value of the job to be updated</param>
            <response code="200">OK,If update of Job is successful</response>
            <response code="400">Bad request, if the id is null or ids don't match</response>
            <response code="403">Forbidden, unauthorized access</response>
            <response code="422">Unprocessable entity, validation error</response>
            <returns>Ok response, if the partial job values have been updated</returns>
        </member>
        <member name="M:OpenBots.Server.Web.JobsController.AddCheckpoint(OpenBots.Server.Model.JobCheckpoint,System.String)">
            <summary>
            Adds checkpoint to the existing JobCheckPoints
            </summary>
            <remarks>
            Creates a new Job Checkpoint for the specified job id
            </remarks>
            <param name="jobId"></param>
            <param name="request"></param>
            <response code="200">Ok, new checkpoint created and returned</response>
            <response code="400">Bad request, when the job value is not in proper format</response>
            <response code="403">Forbidden, unauthorized access</response>
            <response code="409">Conflict, concurrency error</response> 
            <response code="422">Unprocessabile entity, when a duplicate record is being entered</response>
            <returns> Newly created Checkpoint details</returns>
        </member>
        <member name="M:OpenBots.Server.Web.JobsController.JobCheckpoints(System.String,System.String,System.String,System.Int32,System.Int32)">
            <summary>
            Provides a checkpoint's view model details for a particular job id
            </summary>
            <param name="jobId">Job id</param>
            <response code="200">Ok, if a checkpoint exists for the given job id</response>
            <response code="304">Not modified</response>
            <response code="400">Bad request, if job id is not in the proper format or a proper Guid</response>
            <response code="403">Forbidden</response>
            <response code="404">Not found, when no job exists for the given job id</response>
            <response code="422">Unprocessable entity</response>
            <returns>JobCheckpoint details for the given id</returns>
        </member>
        <member name="M:OpenBots.Server.Web.Webhooks.WebhookPublisher.PublishAsync(System.String,System.String,System.String)">
            <summary>
            Publishes Webhooks to all subscriptions
            </summary>
            <param name="integrationEventName"> Unique Name for integration event</param>
            <param name="entityId">Optional parameter that specifies the entity which was affected</param>
            <param name="entityName">Optional parameter that specifies the name of the affected entity</param>
            <returns></returns>
        </member>
        <member name="T:OpenBots.Server.Web.Webhooks.WebhookSender">
            <summary>
            Uses a new HttpClient to send integration events to subscrubed URLs
            </summary>
        </member>
        <member name="T:OpenBots.Server.WebAPI.Controllers.AppController">
            <summary>
            Controller for application versioning
            </summary>
        </member>
        <member name="M:OpenBots.Server.WebAPI.Controllers.AppController.#ctor(OpenBots.Server.DataAccess.Repositories.IApplicationVersionRepository,OpenBots.Server.Business.IMembershipManager,OpenBots.Server.Security.ApplicationIdentityUserManager,Microsoft.Extensions.Configuration.IConfiguration,Microsoft.AspNetCore.Http.IHttpContextAccessor)">
            <summary>
            AppController constructor
            </summary>
            <param name="repository"></param>
            <param name="membershipManager"></param>
            <param name="userManager"></param>
            <param name="httpContextAccessor"></param>
            <param name="configuration"></param>
        </member>
        <member name="M:OpenBots.Server.WebAPI.Controllers.AppController.Version(System.String)">
            <summary>
            Application version
            </summary>
            <param name="application"></param>
            <response code="200">Ok, application version details</response>
            <response code="304">Not modified</response>
            <response code="400">Bad request</response>
            <response code="403">Forbidden</response>
            <response code="404">Not found</response>
            <response code="422">Unprocessable entity</response>
            <returns>Ok response with application version details</returns>
        </member>
        <member name="M:OpenBots.Server.WebAPI.Controllers.AppController.PatchRelease(System.String,System.String)">
            <summary>
            Patch release
            </summary>
            <param name="application"></param>
            <param name="key"></param>
            <response code="200">Ok, updated application version details</response>
            <response code="304">Not modified</response>
            <response code="400">Bad request</response>
            <response code="403">Forbidden</response>
            <response code="404">Not found</response>
            <response code="422">Unprocessable entity</response>
            <returns>Ok response with updated application version details</returns>
        </member>
        <member name="M:OpenBots.Server.WebAPI.Controllers.AppController.MinorRelease(System.String,System.String)">
            <summary>
            Minor version release
            </summary>
            <param name="application"></param>
            <param name="key"></param>
            <response code="200">Ok, updated application version details</response>
            <response code="304">Not modified</response>
            <response code="400">Bad request</response>
            <response code="403">Forbidden</response>
            <response code="404">Not found</response>
            <response code="422">Unprocessable entity</response>
            <returns>Ok response with updated application version details</returns>
        </member>
        <member name="T:OpenBots.Server.WebAPI.Controllers.ApplicationBaseController">
            <summary>
            Default base controller for controllers that are not implementing EntityController 
            </summary>
        </member>
        <member name="M:OpenBots.Server.WebAPI.Controllers.ApplicationBaseController.#ctor(Microsoft.AspNetCore.Http.IHttpContextAccessor,OpenBots.Server.Security.ApplicationIdentityUserManager,OpenBots.Server.Business.IMembershipManager)">
            <summary>
            ApplicationBaseController constructor
            </summary>
            <param name="httpContextAccessor"></param>
            <param name="userManager"></param>
            <param name="membershipManager"></param>
        </member>
        <member name="T:OpenBots.Server.WebAPI.Controllers.EntityController`1">
            <summary>
            Controller for entities
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="M:OpenBots.Server.WebAPI.Controllers.EntityController`1.#ctor(OpenBots.Server.DataAccess.Repositories.IEntityRepository{`0},OpenBots.Server.Security.ApplicationIdentityUserManager,Microsoft.AspNetCore.Http.IHttpContextAccessor,OpenBots.Server.Business.IMembershipManager,Microsoft.Extensions.Configuration.IConfiguration)">
            <summary>
            EntityController constructor
            </summary>
            <param name="repository"></param>
            <param name="userManager"></param>
            <param name="httpContextAccessor"></param>
            <param name="membershipManager"></param>
        </member>
        <member name="M:OpenBots.Server.WebAPI.Controllers.EntityController`1.PostEntity(`0,System.String)">
            <summary>
            Post action: save entity in database
            </summary>
            <param name="value"></param>
            <param name="resultRoute"></param>
            <returns>Saved entity details</returns>
            <exception cref="T:OpenBots.Server.DataAccess.Exceptions.EntityValidationException"></exception>
            <exception cref="T:OpenBots.Server.DataAccess.Exceptions.CannotInsertDuplicateConstraintException"></exception>
            <exception cref="T:OpenBots.Server.DataAccess.Exceptions.EntityAlreadyExistsException"></exception>
            <exception cref="T:OpenBots.Server.DataAccess.Exceptions.EntityConcurrencyException"></exception>
            <exception cref="T:OpenBots.Server.DataAccess.Exceptions.EntityOperationException"></exception>
            <exception cref="T:OpenBots.Server.DataAccess.Exceptions.UnauthorizedOperationException"></exception>
        </member>
        <member name="M:OpenBots.Server.WebAPI.Controllers.EntityController`1.PutEntity(System.String,`0)">
            <summary>
            Put action: update entity in database
            </summary>
            <param name="id"></param>
            <param name="value"></param>
            <returns>Updated entity</returns>
            <exception cref="T:OpenBots.Server.DataAccess.Exceptions.EntityValidationException"></exception>
            <exception cref="T:OpenBots.Server.DataAccess.Exceptions.EntityDoesNotExistException"></exception>
            <exception cref="T:OpenBots.Server.DataAccess.Exceptions.EntityConcurrencyException"></exception>
            <exception cref="T:OpenBots.Server.DataAccess.Exceptions.EntityOperationException"></exception>
            <exception cref="T:OpenBots.Server.DataAccess.Exceptions.UnauthorizedOperationException"></exception>
        </member>
        <member name="M:OpenBots.Server.WebAPI.Controllers.EntityController`1.PatchEntity(System.String,Microsoft.AspNetCore.JsonPatch.JsonPatchDocument{`0})">
            <summary>
            Patch action: update entity detail
            </summary>
            <param name="id"></param>
            <param name="value"></param>
            <exception cref="T:OpenBots.Server.DataAccess.Exceptions.EntityDoesNotExistException"></exception>
            <exception cref="T:OpenBots.Server.DataAccess.Exceptions.EntityOperationException"></exception>
            <exception cref="T:OpenBots.Server.DataAccess.Exceptions.EntityConcurrencyException"></exception>
            <exception cref="T:OpenBots.Server.DataAccess.Exceptions.UnauthorizedOperationException"></exception>
            <exception cref="T:OpenBots.Server.DataAccess.Exceptions.EntityValidationException"></exception>
            <returns>Ok response</returns>
        </member>
        <member name="M:OpenBots.Server.WebAPI.Controllers.EntityController`1.DeleteEntity(System.String)">
            <summary>
            Delete action: soft delete from database
            </summary>
            <param name="id"></param>
            <returns>Ok response</returns>
            <exception cref="T:OpenBots.Server.DataAccess.Exceptions.EntityDoesNotExistException"></exception>
            <exception cref="T:OpenBots.Server.DataAccess.Exceptions.UnauthorizedOperationException"></exception>
            <exception cref="T:OpenBots.Server.DataAccess.Exceptions.EntityOperationException"></exception>
        </member>
        <member name="T:OpenBots.Server.WebAPI.Controllers.Core.LookupValuesController">
            <summary>
            Controller for lookup values
            </summary>
        </member>
        <member name="M:OpenBots.Server.WebAPI.Controllers.Core.LookupValuesController.#ctor(OpenBots.Server.DataAccess.Repositories.ILookupValueRepository,OpenBots.Server.Business.IMembershipManager,OpenBots.Server.Security.ApplicationIdentityUserManager,OpenBots.Server.Business.IOrganizationManager,Microsoft.Extensions.Configuration.IConfiguration,Microsoft.AspNetCore.Http.IHttpContextAccessor)">
            <summary>
            LookupValuesController constructor
            </summary>
            <param name="repository"></param>
            <param name="membershipManager"></param>
            <param name="userManager"></param>
            <param name="httpContextAccessor"></param>
            <param name="configuration"></param>
            <param name="organizationManager"></param>
        </member>
        <member name="M:OpenBots.Server.WebAPI.Controllers.Core.LookupValuesController.Get(System.String,System.String,System.Int32,System.Int32)">
            <summary>
            Provides a list of all lookup values
            </summary>
            <param name="filter"></param>
            <param name="top"></param>
            <param name="orderBy"></param>
            <param name="skip"></param>
            <response code="200">Ok, a paginated list of all lookup values</response>
            <response code="400">Bad request</response>
            <response code="403">Forbidden, unauthorized access</response>        
            <response code="422">Unprocessable entity</response>
            <returns>Paginated list of all lookup values</returns>
        </member>
        <member name="M:OpenBots.Server.WebAPI.Controllers.Core.LookupValuesController.Get(System.String)">
            <summary>
            Provides lookup value details for a particular id
            </summary>
            <param name="codeType">Lookup value id</param>
            <response code="200">Ok, if a lookup value exists with the given id</response>
            <response code="304">Not modified</response>
            <response code="400">Bad request, if a lookup value id is not in proper format or a proper Guid</response>
            <response code="403">Forbidden</response>
            <response code="404">Not found, when no lookup value exists for the given lookup value id</response>
            <response code="422">Unprocessable entity</response>
            <returns>Lookup value details for the given id</returns>
        </member>
        <member name="M:OpenBots.Server.WebAPI.Controllers.Core.LookupValuesController.Post(OpenBots.Server.Model.Core.LookupValue)">
             <summary>
             Adds a new lookup value to the existing lookup values
             </summary>
             <remarks>
             Adds the lookup value with unique lookup value id to the existing lookup values
             </remarks>
             <param name="value"></param>
             <response code="200">Ok, new lookup value created and returned</response>
             <response code="400">Bad request, when lookup value is not in the proper format</response>
             <response code="403">Forbidden, unauthorized access</response>
            <response code="409">Conflict, concurrency error</response> 
             <response code="422">Unprocessabile entity, when a duplicate record is being entered</response>
             <returns>Newly created unique lookup value details</returns>
        </member>
        <member name="M:OpenBots.Server.WebAPI.Controllers.Core.LookupValuesController.Put(System.String,OpenBots.Server.Model.Core.LookupValue)">
            <summary>
            Updates a lookup value 
            </summary>
            <remarks>
            Provides an action to update a lookup value, when lookup value id and the new details of lookup value are given
            </remarks>
            <param name="id">Lookup value id, produces bad request if id is null or ids don't match</param>
            <param name="value">lookup value details to be updated</param>
            <response code="200">Ok, if the lookup value details for the given lookup value id has been updated</response>
            <response code="400">Bad request, if the lookup value id is null or ids don't match</response>
            <response code="403">Forbidden, unauthorized access</response>
            <response code="422">Unprocessable entity</response>
            <returns>Ok response with the updated value</returns>
        </member>
        <member name="M:OpenBots.Server.WebAPI.Controllers.Core.LookupValuesController.Delete(System.String)">
            <summary>
            Deletes a lookup value with a specified id
            </summary>
            <param name="id">Lookup value id to be soft deleted - throws bad request if null or empty Guid</param>
            <response code="200">Ok, when lookup value is soft deleted,(isDeleted flag is set to true in database)</response>
            <response code="400">Bad request, if lookup value id is null or empty Guid</response>
            <response code="403">Forbidden</response>
            <returns>Ok response</returns>
        </member>
        <member name="M:OpenBots.Server.WebAPI.Controllers.Core.LookupValuesController.Patch(System.String,Microsoft.AspNetCore.JsonPatch.JsonPatchDocument{OpenBots.Server.Model.Core.LookupValue})">
            <summary>
            Updates partial details of a lookup value
            </summary>
            <param name="id">Lookup value identifier</param>
            <param name="value">Value of the lookup value to be updated</param>
            <response code="200">Ok, if update of lookup value is successful</response>
            <response code="400">Bad request, if the id is null or ids don't match</response>
            <response code="403">Forbidden, unauthorized access</response>
            <response code="422">Unprocessable entity, validation error</response>
            <returns>Ok response, if the partial values have been updated</returns>
        </member>
        <member name="T:OpenBots.Server.WebAPI.Controllers.ReadOnlyEntityController`1">
            <summary>
            Controller for ReadOnlyEntity
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="M:OpenBots.Server.WebAPI.Controllers.ReadOnlyEntityController`1.#ctor(OpenBots.Server.DataAccess.Repositories.IReadOnlyEntityRepository{`0},OpenBots.Server.Security.ApplicationIdentityUserManager,Microsoft.AspNetCore.Http.IHttpContextAccessor,OpenBots.Server.Business.IMembershipManager,Microsoft.Extensions.Configuration.IConfiguration)">
            <summary>
            ReadOnlyEntityController constructor
            </summary>
            <param name="repository"></param>
            <param name="userManager"></param>
            <param name="httpContextAccessor"></param>
            <param name="membershipManager"></param>
            <param name="configuration"></param>
        </member>
        <member name="M:OpenBots.Server.WebAPI.Controllers.ReadOnlyEntityController`1.GetMany``1(System.String,OpenBots.Server.WebAPI.Controllers.ODataHelper{`0})">
            <summary>
            Get paginated list of entities
            </summary>
            <param name="parentid"></param>
            <returns>Paginated list of entities</returns>
            <exception cref="T:OpenBots.Server.DataAccess.Exceptions.EntityOperationException"></exception>
            <exception cref="T:OpenBots.Server.DataAccess.Exceptions.EntityDoesNotExistException"></exception>
            <exception cref="T:OpenBots.Server.DataAccess.Exceptions.UnauthorizedOperationException"></exception>
            <exception cref="T:OpenBots.Server.DataAccess.Exceptions.EntityValidationException"></exception>
        </member>
        <member name="M:OpenBots.Server.WebAPI.Controllers.ReadOnlyEntityController`1.GetEntity``1(System.String,System.String)">
            <summary>
            Get an individual entity
            </summary>
            <param name="id"></param>
            <param name="parentid"></param>
            <returns>An individual entity</returns>
            <exception cref="T:OpenBots.Server.DataAccess.Exceptions.EntityOperationException"></exception>
            <exception cref="T:OpenBots.Server.DataAccess.Exceptions.EntityDoesNotExistException"></exception>
            <exception cref="T:OpenBots.Server.DataAccess.Exceptions.UnauthorizedOperationException"></exception>
            <exception cref="T:OpenBots.Server.DataAccess.Exceptions.EntityValidationException"></exception>
        </member>
        <member name="M:OpenBots.Server.WebAPI.Controllers.ReadOnlyEntityController`1.Count(System.String)">
            <summary>
            Uses ODataFilter to get a count of records in the database
            </summary>
            <param name="parentid"></param>
            <returns>Count of records in the database</returns>
            <exception cref="T:OpenBots.Server.DataAccess.Exceptions.EntityOperationException"></exception>
            <exception cref="T:OpenBots.Server.DataAccess.Exceptions.EntityDoesNotExistException"></exception>
            <exception cref="T:OpenBots.Server.DataAccess.Exceptions.UnauthorizedOperationException"></exception>
            <exception cref="T:OpenBots.Server.DataAccess.Exceptions.EntityValidationException"></exception>
        </member>
        <member name="M:OpenBots.Server.WebAPI.Controllers.ReadOnlyEntityController`1.GetMany(System.String,OpenBots.Server.WebAPI.Controllers.ODataHelper{`0})">
            <summary>
            Gets all the entities
            </summary>
            <param name="parentid"></param>
            <returns>All the entities in the database</returns>
            <exception cref="T:OpenBots.Server.DataAccess.Exceptions.EntityOperationException"></exception>
            <exception cref="T:OpenBots.Server.DataAccess.Exceptions.EntityDoesNotExistException"></exception>
            <exception cref="T:OpenBots.Server.DataAccess.Exceptions.UnauthorizedOperationException"></exception>
            <exception cref="T:OpenBots.Server.DataAccess.Exceptions.EntityValidationException"></exception>
        </member>
        <member name="M:OpenBots.Server.WebAPI.Controllers.ReadOnlyEntityController`1.GetEntity(System.String,System.String)">
            <summary>
            Get an entity
            </summary>
            <param name="id"></param>
            <param name="parentid"></param>
            <returns>An entity from the database</returns>
            <exception cref="T:OpenBots.Server.DataAccess.Exceptions.EntityOperationException"></exception>
            <exception cref="T:OpenBots.Server.DataAccess.Exceptions.EntityDoesNotExistException"></exception>
            <exception cref="T:OpenBots.Server.DataAccess.Exceptions.UnauthorizedOperationException"></exception>
            <exception cref="T:OpenBots.Server.DataAccess.Exceptions.EntityValidationException"></exception>
        </member>
        <member name="T:OpenBots.Server.WebAPI.Controllers.TenantEntityController`1">
            <summary>
            Controller for TenantEntity
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="M:OpenBots.Server.WebAPI.Controllers.TenantEntityController`1.#ctor(OpenBots.Server.DataAccess.Repositories.ITenantEntityRepository{`0},OpenBots.Server.Security.ApplicationIdentityUserManager,Microsoft.AspNetCore.Http.IHttpContextAccessor,OpenBots.Server.Business.IMembershipManager,Microsoft.Extensions.Configuration.IConfiguration)">
            <summary>
            TenantEntityController constructor
            </summary>
            <param name="repository"></param>
            <param name="userManager"></param>
            <param name="httpContextAccessor"></param>
            <param name="membershipManager"></param>
            <param name="configuration"></param>
        </member>
        <member name="T:OpenBots.Server.WebAPI.Controllers.IdentityApi.AuthController">
            <summary>
            Controller used for token generation
            </summary>
        </member>
        <member name="M:OpenBots.Server.WebAPI.Controllers.IdentityApi.AuthController.#ctor(OpenBots.Server.Security.ApplicationIdentityUserManager,Microsoft.AspNetCore.Identity.SignInManager{OpenBots.Server.Security.ApplicationUser},Microsoft.AspNetCore.Http.IHttpContextAccessor,Microsoft.Extensions.Configuration.IConfiguration,Microsoft.Extensions.Logging.ILogger{OpenBots.Server.WebAPI.Controllers.IdentityApi.AuthController},OpenBots.Server.Business.IMembershipManager,OpenBots.Server.DataAccess.Repositories.IPersonRepository,OpenBots.Server.DataAccess.Repositories.IPersonEmailRepository,OpenBots.Server.DataAccess.Repositories.IEmailVerificationRepository,OpenBots.Server.DataAccess.Repositories.IPasswordPolicyRepository,OpenBots.Server.Business.IEmailManager,OpenBots.Server.Business.IOrganizationManager,OpenBots.Server.Business.IAccessRequestsManager,OpenBots.Server.DataAccess.Repositories.IAccessRequestRepository,OpenBots.Server.DataAccess.Repositories.IOrganizationMemberRepository,OpenBots.Server.DataAccess.Repositories.IAgentRepository,OpenBots.Server.Business.ITermsConditionsManager,OpenBots.Server.DataAccess.Repositories.IAuditLogRepository,OpenBots.Server.Business.IIPFencingManager,OpenBots.Server.DataAccess.Repositories.IIPFencingRepository,Microsoft.AspNetCore.Http.IHttpContextAccessor,OpenBots.Server.DataAccess.Repositories.IOrganizationSettingRepository)">
            <summary>
            AuthController constructor
            </summary>
            <param name="userManager"></param>
            <param name="signInManager"></param>
            <param name="httpContextAccessor"></param>
            <param name="configuration"></param>
            <param name="logger"></param>
            <param name="membershipManager"></param>
            <param name="personRepository"></param>
            <param name="personEmailRepository"></param>
            <param name="emailVerificationRepository"></param>
            <param name="emailSender"></param>
            <param name="organizationManager"></param>
            <param name="organizationSettingRepository"></param>
            <param name="iPFencingManager"></param>
            <param name="accessRequestManager"></param>
            <param name="accessRequestRepository"></param>
            <param name="agentRepository"></param>
            <param name="auditLogRepository"></param>
            <param name="context"></param>
            <param name="iPFencingRepository"></param>
            <param name="organizationMemberRepository"></param>
            <param name="passwordPolicyRepository"></param>
            <param name="termsConditionsManager"></param>
        </member>
        <member name="M:OpenBots.Server.WebAPI.Controllers.IdentityApi.AuthController.CreateToken(OpenBots.Server.Model.Identity.Login)">
            <summary>
            Login with username and password
            </summary>
            <param name="loginModel"></param>
            <returns>JWT Token</returns>
        </member>
        <member name="M:OpenBots.Server.WebAPI.Controllers.IdentityApi.AuthController.Register(OpenBots.Server.Model.Identity.SignUpViewModel)">
            <summary>
            Register new user
            </summary>
            <param name="signupModel">Signup model</param>
            <returns>Ok response</returns>
        </member>
        <member name="M:OpenBots.Server.WebAPI.Controllers.IdentityApi.AuthController.ChangePassword(OpenBots.Server.Security.ViewModel.ChangePasswordBindingModel)">
            <summary>
            Change / Reset with new password
            </summary>
            <param name="model"></param>
            <returns>Ok response</returns>
        </member>
        <member name="M:OpenBots.Server.WebAPI.Controllers.IdentityApi.AuthController.VerifyUserToken(System.String,System.String)">
            <summary>
            Verify user token before resetting the password
            </summary>
            <param name="userId"></param>
            <param name="code"></param>
            <returns>Redirect to appropriate url</returns>
        </member>
        <member name="M:OpenBots.Server.WebAPI.Controllers.IdentityApi.AuthController.SetPassword(OpenBots.Server.Security.ViewModel.ResetPasswordBindingModel)">
            <summary>
            Reset password
            </summary>
            <param name="model"></param>
            <returns>Ok response</returns>
        </member>
        <member name="M:OpenBots.Server.WebAPI.Controllers.IdentityApi.AuthController.SetUserPassword(OpenBots.Server.Security.ViewModel.SetPasswordBindingModel)">
            <summary>
            Set new password 
            </summary>
            <param name="model"></param>
            <returns></returns>
        </member>
        <member name="M:OpenBots.Server.WebAPI.Controllers.IdentityApi.AuthController.ConfirmEmail(System.String,System.String)">
            <summary>
            Confirm new user
            </summary>
            <param name="userId"></param>
            <param name="code"></param>
            <returns>Redirect to appropriate url</returns>
        </member>
        <member name="M:OpenBots.Server.WebAPI.Controllers.IdentityApi.AuthController.ForgotPassword(OpenBots.Server.Security.ViewModel.ForgotPasswordBindingModel)">
            <summary>
            Forgot password using email address
            </summary>
            <param name="model"></param>
            <returns>Ok response</returns>
        </member>
        <member name="M:OpenBots.Server.WebAPI.Controllers.IdentityApi.AuthController.GetUserInfo">
            <summary>
            Get user info for logged in authenticated user
            </summary>
            <returns>Ok response with user information</returns>
        </member>
        <member name="M:OpenBots.Server.WebAPI.Controllers.IdentityApi.AuthController.ResendEmailConfirmation(System.String)">
            <summary>
            Resend confirmation email to registered email address 
            </summary>
            <param name="emailAddress">Email address needed for confirmation</param>
            <returns>Ok response</returns>
        </member>
        <member name="M:OpenBots.Server.WebAPI.Controllers.IdentityApi.AuthController.ConfirmEmailAddress(System.String,System.String)">
            <summary>
            Confirm email address
            </summary>
            <param name="token"></param>
            <returns>Redirect to appropriate url</returns>
        </member>
        <member name="M:OpenBots.Server.WebAPI.Controllers.IdentityApi.AuthController.Refresh(OpenBots.Server.Security.ViewModel.RefreshModel)">
            <summary>
            Refresh expired access and old refresh token
            </summary>
            <param name="model"></param>
            <returns>JWT token and refresh token</returns>
        </member>
        <member name="M:OpenBots.Server.WebAPI.Controllers.IdentityApi.AuthController.Ping">
            <summary>
            Used to get current user's IP Address
            </summary>
            <returns></returns>
        </member>
        <member name="T:OpenBots.Server.WebAPI.Controllers.AccessRequestsController">
            <summary>
            Controller for access requests
            </summary>
        </member>
        <member name="M:OpenBots.Server.WebAPI.Controllers.AccessRequestsController.#ctor(OpenBots.Server.DataAccess.Repositories.IAccessRequestRepository,OpenBots.Server.Business.IMembershipManager,OpenBots.Server.Business.IAccessRequestsManager,OpenBots.Server.Security.ApplicationIdentityUserManager,Microsoft.Extensions.Configuration.IConfiguration,Microsoft.AspNetCore.Http.IHttpContextAccessor)">
            <summary>
            AccessRequestsController constructor
            </summary>
            <param name="repository"></param>
            <param name="manager"></param>
            <param name="accessRequestManager"></param>
            <param name="userManager"></param>
            <param name="httpContextAccessor"></param>
            <param name="configuration"></param>
        </member>
        <member name="M:OpenBots.Server.WebAPI.Controllers.AccessRequestsController.Get(System.String,System.String,System.String,System.Int32,System.Int32)">
            <summary>
            Provides all the access requests for the given organization
            </summary>
            <param name="organizationId">Organization identifier</param>
            <param name="filter"></param>
            <param name="orderBy"></param>
            <param name="top"></param>
            <param name="skip"></param>
            <response code="200">Ok, if all the access requests for the organization have been returned</response>
            <response code="400">Bad request, if the organization id is not provided or is an improper Guid</response>
            <response code="403">Forbidden, unauthorized access by user</response>
            <response code="404">Not found, no access request exists for the given organization</response>
            <response code="422">Unprocessable entity, validation error</response>
            <returns>Paginated list of all access requests for the organization</returns>
        </member>
        <member name="M:OpenBots.Server.WebAPI.Controllers.AccessRequestsController.GetPending(System.String)">
            <summary>
            Pending access requests
            </summary>
            <remarks>Provides the paginated pending access requests for the organization</remarks>
            <param name="organizationId">Organization identifier</param>
            <response code="200">Ok, paginated list of all access requests with id, name, and email of the user</response>
            <response code="400">Bad request, if organization id is not provided or is an improper Guid</response>
            <response code="403">Forbidden, unauthorized access</response>
            <response code="404">Not found</response>
            <response code="422">Unprocessable entity, validation error</response>
            <returns>List of pending access requests with id, name,, and email of each user</returns>
        </member>
        <member name="M:OpenBots.Server.WebAPI.Controllers.AccessRequestsController.Get(System.String)">
            <summary>
            Get the access request
            </summary>
            <param name="id">Access request identifier</param>
            <response code="200">Ok, if access request exists for the given id</response>
            <response code="304">Not modified</response>
            <response code="400">Bad request, if the id is not provided or is an improper Guid</response>
            <response code="403">Forbidden, unauthorized access</response>
            <response code="404">Not found, access request with the particular id does not exist</response>
            <response code="422">Unprocessable entity, validation error</response>
            <returns>Ok response with access request details</returns>
        </member>
        <member name="M:OpenBots.Server.WebAPI.Controllers.AccessRequestsController.Post(System.String,OpenBots.Server.Model.Membership.AccessRequest)">
            <summary>
            Adds a new access request to the organization
            </summary>
            <param name="organizationId">Organization identifier</param>
            <param name="value">Access request details</param>
            <response code="200">Ok, if the access request has been created successfully</response>
            <response code="400">Bad request, if the organization id is not provided or is an improper Guid</response>
            <response code="403">Forbidden, unauthorized access</response>
            <response code="409">Conflict, when access request with the particular id already exists</response>
            <response code="422">Unprocessable entity, validation error or cannot insert duplicate constraint</response>
            <returns>Ok response with newly created access request details</returns>
        </member>
        <member name="M:OpenBots.Server.WebAPI.Controllers.AccessRequestsController.Put(System.String,System.String,OpenBots.Server.Model.Membership.AccessRequest)">
            <summary>
            Update the access request 
            </summary>
            <remarks>Updates the access request with the particular id for the given organization</remarks>
            <param name="organizationId">Organization identifier</param>
            <param name="id">Access request id</param>
            <param name="value">New value of the access request to be updated</param>
            <response code="200">Ok, if the update of the access request for the particular id has been successful</response>
            <response code="400">Bad request, if the id is not provided or Guid is not in proper format</response>
            <response code="403">Forbidden, unauthorized access by the user</response>
            <response code="404">Not found, if no access request exists for the given id</response>
            <response code="409">Conflict</response>
            <response code="422">Unprocessable Entity, validation error</response>
            <returns>Ok response with the updated access request details</returns>
        </member>
        <member name="M:OpenBots.Server.WebAPI.Controllers.AccessRequestsController.Approve(System.String,System.String)">
            <summary>
            Approves the specified acess request by an organization administrator.
            </summary>
            <param name="organizationId">Organization identifier</param>
            <param name="id">Access request identifier</param>
            <response code="200">Ok, if the access request is approved</response>
            <response code="400">Bad request,if the organization id or access request id is not provided or is an improper Guid</response>
            <response code="403">Forbidden, if the user doesn't have permission to approve an access request</response>
            <response code="422">Unprocessable entity, validation error</response> 
            <returns>Ok response if the approval is successful</returns> 
        </member>
        <member name="M:OpenBots.Server.WebAPI.Controllers.AccessRequestsController.Reject(System.String,System.String)">
            <summary>
            Rejects the specified access request by an organization administrator
            </summary>
            <param name="organizationId">Organization identifier.</param>
            <param name="id">Access request identifier</param>
            <response code="200">Ok, if the acccess request is rejected</response>
            <response code="400">Bad request, if the organization id or access request id is not provided or is an improper Guid</response>
            <response code="403">Forbidden, if the user doesn't have permission to reject the access request</response>
            <response code="422">Unprocessable entity, validation error</response>
            <returns>Ok response if the access is rejected</returns>
        </member>
        <member name="M:OpenBots.Server.WebAPI.Controllers.AccessRequestsController.Delete(System.String)">
            <summary>
            Deletes access request 
            </summary>
            <param name="id">Access request identifier</param>
            <response code="200">Ok, if the access request with the given id has been soft deleted</response>
            <response code="400">Bad request, if the id is not provided or not a proper Guid</response>
            <response code="403">Unauthorized access, if the user doesn't have permission to soft delete the access request</response>
            <response code="422">Unprocessable entity, validation error</response>
            <returns>Ok response, if the access request with the given id has been deleted</returns>
        </member>
        <member name="M:OpenBots.Server.WebAPI.Controllers.AccessRequestsController.Patch(System.String,Microsoft.AspNetCore.JsonPatch.JsonPatchDocument{OpenBots.Server.Model.Membership.AccessRequest})">
            <summary>
            Updates partial details of an access request
            </summary>
            <param name="id">Access request identifier</param>
            <param name="value">Details of access request to be updated</param>
            <response code="200">Ok, if update of access request is successful</response>
            <response code="400">Bad request, if the id is null or ids don't match</response>
            <response code="403">Forbidden, unauthorized access</response>
            <response code="422">Unprocessable entity, validation error</response>
            <returns>Ok response, if the partial access request details have been updated</returns>
        </member>
        <member name="T:OpenBots.Server.WebAPI.Controllers.OrganizationMembersController">
            <summary>
            Controller for organization members
            </summary>
        </member>
        <member name="M:OpenBots.Server.WebAPI.Controllers.OrganizationMembersController.#ctor(OpenBots.Server.DataAccess.Repositories.IOrganizationMemberRepository,OpenBots.Server.Business.IMembershipManager,OpenBots.Server.Security.ApplicationIdentityUserManager,Microsoft.AspNetCore.Http.IHttpContextAccessor,OpenBots.Server.DataAccess.Repositories.IPersonRepository,OpenBots.Server.Business.IAccessRequestsManager,Microsoft.Extensions.Configuration.IConfiguration,OpenBots.Server.Business.IEmailManager)">
            <summary>
            OrganizationMembersController constructor
            </summary>
            <param name="repository"></param>
            <param name="membershipManager"></param>
            <param name="userManager"></param>
            <param name="httpContextAccessor"></param>
            <param name="personRepository"></param>
            <param name="accessRequestManager"></param>
            <param name="emailSender"></param>
            <param name="configuration"></param>
        </member>
        <member name="M:OpenBots.Server.WebAPI.Controllers.OrganizationMembersController.GetPeople(System.String,System.String,System.String,System.Int32,System.Int32)">
            <summary>
            Gets the people in the organization
            </summary>
            <param name="organizationId">Organization identifier</param>
            <param name="top"></param>
            <param name="skip"></param>
            <param name="filter"></param>
            <param name="orderBy"></param>
            <response code="200">Ok, if all the organization members for the organization have been returned</response>
            <response code="400">Bad request, if the organization id is not provided or is an improper Guid</response>
            <response code="403">Forbidden, unauthorized access by user</response>
            <response code="404">Not found, no organization member exists for the given organization</response>
            <response code="422">Unprocessable entity, validation error</response>        
            <returns>Paginated list of team members in the organization</returns>
        </member>
        <member name="M:OpenBots.Server.WebAPI.Controllers.OrganizationMembersController.Get(System.String,System.String,System.String,System.Int32,System.Int32)">
            <summary>
            Gets all the members of the given organization
            </summary>
            <param name="organizationId">Organization identifier</param>
            <param name="filter"></param>
            <param name="orderBy"></param>
            <param name="top"></param>
            <param name="skip"></param>
            <response code="200">Ok, if all the members for the organization have been returned</response>
            <response code="400">Bad request, if the organization id is not provided or is an improper Guid</response>
            <response code="403">Forbidden, unauthorized access by user</response>
            <response code="404">Not found, no member exists for the given organization id</response>
            <response code="422">Unprocessable entity, validation error</response>
            <returns>Paginated list of all the members of an organization.</returns>
        </member>
        <member name="M:OpenBots.Server.WebAPI.Controllers.OrganizationMembersController.GetUser(System.String)">
            <summary>
            Retrieves a user's details for a particular organization member
            </summary>
            <param name="personId">Person identifier</param>
            <response code="200">Ok, if user details are available for the given id></response>
            <response code="400">Bad request, if the person id is not provided or an improper Guid</response>
            <response code="403">Forbidden, unauthorized access</response>
            <response code="404">Not found</response>
            <response code="422">Unprocessable entity, validation error</response>
            <returns>Ok response with user details</returns> 
        </member>
        <member name="M:OpenBots.Server.WebAPI.Controllers.OrganizationMembersController.Get(System.String)">
            <summary>
            Get the member for a particular organization
            </summary>
            <param name="organizationMemberId">Organization member identifier</param>
            <response code="200">Ok, if organization member exists for the given id</response>
            <response code="304">Not modified</response>
            <response code="400">Bad request, if the organization id is not provided or is an improper Guid</response>
            <response code="403">Forbidden, unauthorized access</response>
            <response code="404">Not found, organization member with the particular id does not exist</response>
            <response code="422">Unprocessable entity, validation error</response>
            <returns>Ok response with organization member details</returns>
        </member>
        <member name="M:OpenBots.Server.WebAPI.Controllers.OrganizationMembersController.Post(System.String,OpenBots.Server.Model.Membership.OrganizationMember)">
            <summary>
            Adds a new member to the organization
            </summary>
            <param name="organizationId">Organization identifier</param>
            <param name="value">Organization member details</param>
            <response code="200">Ok, if the member has been added successfully</response>
            <response code="400">Bad request, if the organization id is not provided or is an improper Guid</response>
            <response code="403">Forbidden, unauthorized access by the user</response>
            <response code="409">Conflict, when an organization member with the particular id already exists</response>
            <response code="422">Unprocessable entity, validation error or cannot insert duplicate constraint</response>
            <returns>Ok response with newly created member details</returns>
        </member>
        <member name="M:OpenBots.Server.WebAPI.Controllers.OrganizationMembersController.Put(System.String,System.String,OpenBots.Server.Model.Membership.OrganizationMember)">
            <summary>
            Update the organization member details
            </summary>
            <remarks>Updates the organization member details with the particular id for the given organization</remarks>
            <param name="organizationId">Organization identifier</param>
            <param name="organizationMemberId">Organization member id</param>
            <param name="value">New value of the organization member to be updated</param>
            <response code="200">Ok, if the update of the organization member for the particular id has been successful</response>
            <response code="400">Bad request, if the id is not provided or Guid is not in proper format</response>
            <response code="403">Forbidden, unauthorized access by the user</response>
            <response code="404">Not found, if no organization member exists for the given id</response>
            <response code="409">Conflict</response>
            <response code="422">Unprocessable entity, validation error</response>
            <returns>Ok response with updated organization member details</returns>
        </member>
        <member name="M:OpenBots.Server.WebAPI.Controllers.OrganizationMembersController.InviteUser(System.String,OpenBots.Server.Model.Identity.InviteUserViewModel)">
            <summary>
            Invite user to become an organization member
            </summary>
            <param name="organizationId">Organization identifier</param>
            <param name="value"></param>
            <response code="200">Ok, if the invite of the organization member has been successful</response>
            <response code="400">Bad request, if the organization id is not provided or Guid is not in proper format</response>
            <response code="403">Forbidden, unauthorized access by the user</response>
            <response code="409">Conflict</response>
            <response code="422">Unprocessable entity, validation error</response>
            <returns>Ok response</returns>
        </member>
        <member name="M:OpenBots.Server.WebAPI.Controllers.OrganizationMembersController.Delete(System.String,System.String)">
            <summary>
            Delete organization member 
            </summary>
            <param name="organizationMemberId">Organization member identifier</param>
            <param name="organizationId">Organization identifier</param>
            <response code="200">Ok, if the organization member with the given id has been soft deleted</response>
            <response code="400">Bad request, if the id is not provided or not a proper Guid</response>
            <response code="403">Unauthorized access, if the user doesn't have permission to delete the organization member</response>
            <response code="422">Unprocessable entity, validation error</response>
            <returns>Ok response, if the organization member with the given id has been deleted</returns>
        </member>
        <member name="M:OpenBots.Server.WebAPI.Controllers.OrganizationMembersController.Patch(System.String,Microsoft.AspNetCore.JsonPatch.JsonPatchDocument{OpenBots.Server.Model.Membership.OrganizationMember})">
            <summary>
            Updates the partial details of organization members
            </summary>
            <param name="organizationMemberId">Organization member identifier</param>
            <param name="value">Value to be updated</param>
            <response code="200">Ok, if update of organization member is successful</response>
            <response code="400">Bad request, if the id is null or ids don't match.</response>
            <response code="403">Forbidden, unauthorized access</response>
            <response code="422">Unprocessable entity, validation error</response>
            <returns>Ok response, if the partial organization member values have been updated</returns>
        </member>
        <member name="M:OpenBots.Server.WebAPI.Controllers.OrganizationMembersController.UpdateUser(System.String,System.String,OpenBots.Server.ViewModel.Organization.UpdateTeamMemberViewModel)">
            <summary>
            Updates the partial details of an organization member
            </summary>
            <param name="personId">Organization member person id</param>
            <param name="request">Values to be updated</param>
            <param name="organizationId">Organization id</param>
            <response code="200">Ok, if update of organization member is successful</response>
            <response code="400">Bad request, if the id is null or ids don't match</response>
            <response code="403">Forbidden, unauthorized access</response>
            <response code="422">Unprocessable entity, validation error</response>
            <returns>Ok response, if the partial organization member values have been updated</returns>
        </member>
        <member name="T:OpenBots.Server.WebAPI.Controllers.OrganizationsController">
            <summary>
            Controller for organizations
            </summary>
        </member>
        <member name="M:OpenBots.Server.WebAPI.Controllers.OrganizationsController.#ctor(OpenBots.Server.DataAccess.Repositories.IOrganizationRepository,OpenBots.Server.Business.IMembershipManager,OpenBots.Server.Security.ApplicationIdentityUserManager,OpenBots.Server.Business.IOrganizationManager,Microsoft.Extensions.Configuration.IConfiguration,Microsoft.AspNetCore.Http.IHttpContextAccessor)">
            <summary>
            OrganizationsController constructor
            </summary>
            <param name="repository"></param>
            <param name="membershipManager"></param>
            <param name="userManager"></param>
            <param name="organizationManager"></param>
            <param name="httpContextAccessor"></param>
            <param name="configuration"></param>
        </member>
        <member name="M:OpenBots.Server.WebAPI.Controllers.OrganizationsController.Get(System.String,System.String,System.Int32,System.Int32)">
            <summary>
            Provides a list of all organizations
            </summary>
            <param name="skip"></param>
            <param name="orderBy"></param>
            <param name="top"></param>
            <param name="filter"></param>
            <response code="200">Ok, a paginated list of all organizations</response>
            <response code="400">Bad request</response>
            <response code="403">Forbidden, unauthorized access</response>
            <response code="404">Not found</response>
            <response code="422">Unprocessable entity</response>
            <returns>Paginated list of all organizations</returns>
        </member>
        <member name="M:OpenBots.Server.WebAPI.Controllers.OrganizationsController.Get">
            <summary>
            Provides count of organizations
            </summary>
            <response code="200">Ok, an organization count</response>
            <response code="400">Bad request</response>
            <response code="403">Forbidden, unauthorized access</response>  
            <response code="404">Not found</response>
            <response code="422">Unprocessable entity</response>
            <returns>Organizations count</returns>
        </member>
        <member name="M:OpenBots.Server.WebAPI.Controllers.OrganizationsController.Get(System.String)">
            <summary>
            Provides organization details for a particular organization id
            </summary>
            <param name="id">Organization id</param>
            <response code="200">Ok, if an organization exists with the given id.</response>
            <response code="304">Not modified</response>
            <response code="400">Bad request, if organization id is not in proper format or proper Guid.</response>
            <response code="403">Forbidden</response>
            <response code="404">Not found, when no organization exists for the given organization id</response>
            <response code="422">Unprocessable entity</response>
            <returns>Organization details for the given id</returns>
        </member>
        <member name="M:OpenBots.Server.WebAPI.Controllers.OrganizationsController.Post(OpenBots.Server.Model.Membership.Organization)">
             <summary>
             Adds a new organization to the existing organizations
             </summary>
             <remarks>
             Adds the organization with unique organization id to the existing organizations
             </remarks>
             <param name="value"></param>
             <response code="200">Ok, new organization created and returned</response>
             <response code="400">Bad  request, when the organization value is not in proper format</response>
             <response code="403">Forbidden, unauthorized access</response>
            <response code="409">Conflict, concurrency error</response> 
             <response code="422">Unprocessabile entity, when a duplicate record is being entered</response>
             <returns>Newly created unique organization details</returns>
        </member>
        <member name="M:OpenBots.Server.WebAPI.Controllers.OrganizationsController.Put(System.String,OpenBots.Server.Model.Membership.Organization)">
            <summary>
            Updates an organization 
            </summary>
            <remarks>
            Provides an action to update an organization, when organization id and the new details of organization are given
            </remarks>
            <param name="id">organization id, produces bad request if id is null or ids don't match</param>
            <param name="value">Organization details to be updated</param>
            <response code="200">Ok if the organization details for the given organization id have been updated</response>
            <response code="400">Bad request, if the organization id is null or ids don't match</response>
            <response code="403">Forbidden, unauthorized access</response>
            <response code="409">Conflict</response>
            <response code="422">Unprocessable entity</response>
            <returns>Ok response with the updated value</returns>
        </member>
        <member name="M:OpenBots.Server.WebAPI.Controllers.OrganizationsController.Delete(System.String)">
            <summary>
            Deletes an organization with a specified id from the organizations.
            </summary>
            <param name="id">Organization id to be deleted - throws bad request if null or empty Guid/</param>
            <response code="200">Ok, when organization is soft deleted, (isDeleted flag is set to true in database)</response>
            <response code="400">Bad request, if organization id is null or empty Guid</response>
            <response code="403">Forbidden</response>
            <returns>Ok response</returns>
        </member>
        <member name="M:OpenBots.Server.WebAPI.Controllers.OrganizationsController.Patch(System.String,Microsoft.AspNetCore.JsonPatch.JsonPatchDocument{OpenBots.Server.Model.Membership.Organization})">
            <summary>
            Updates partial details of an organization
            </summary>
            <param name="id">Organization identifier</param>
            <param name="value">Value of the organization to be updated</param>
            <response code="200">Ok, if update of Organization is successful</response>
            <response code="400">BadRequest, if the id is null or ids dont match</response>
            <response code="403">Forbidden, unauthorized access</response>
            <response code="422">Unprocessable entity, validation error</response>
            <returns>Ok response, if the partial organization values have been updated</returns>
        </member>
        <member name="T:OpenBots.Server.WebAPI.Controllers.OrganizationSettingsController">
            <summary>
            Controller for organization settings
            </summary>
        </member>
        <member name="M:OpenBots.Server.WebAPI.Controllers.OrganizationSettingsController.#ctor(OpenBots.Server.DataAccess.Repositories.IOrganizationSettingRepository,OpenBots.Server.Business.IMembershipManager,OpenBots.Server.Security.ApplicationIdentityUserManager,Microsoft.Extensions.Configuration.IConfiguration,Microsoft.AspNetCore.Http.IHttpContextAccessor)">
            <summary>
            OrganizationSettingsController constructor
            </summary>
            <param name="repository"></param>
            <param name="membershipManager"></param>
            <param name="userManager"></param>
            <param name="httpContextAccessor"></param>
            <param name="configuration"></param>
        </member>
        <member name="M:OpenBots.Server.WebAPI.Controllers.OrganizationSettingsController.Get(System.String,System.String,System.String,System.Int32,System.Int32)">
            <summary>
            Gets all the organization settings for an organization
            </summary>
            <param name="organizationId">Organization identifier</param>
            <param name="filter"></param>
            <param name="orderBy"></param>
            <param name="top"></param>
            <param name="skip"></param>
            <response code="200">Ok, provides a paginated list of the organization settings</response>
            <response code="400">Bad request, if the organization id is not provided or an improper Guid</response>
            <response code="403">Forbidden, unauthorized access by the user</response>
            <response code="404">Not found</response>
            <response code="422">Unprocessable entity, validation error.</response>
            <returns>Paginated list of all the organization settings for an organization</returns>
        </member>
        <member name="M:OpenBots.Server.WebAPI.Controllers.OrganizationSettingsController.Get(System.String)">
            <summary>
            Gets a particular organization setting
            </summary>
            <param name="id">Organization setting identifier</param>
            <response code="200">Ok, provides organization setting details></response>
            <response code="400">Bad request, if the organization id or setting id is not provided or an improper Guid.</response>
            <response code="403">Forbidden, unauthorized access by user</response>
            <response code="404">Not found</response>
            <response code="422">Unprocessable entity, validation error</response>
            <returns>Ok response with organization setting details</returns>
        </member>
        <member name="M:OpenBots.Server.WebAPI.Controllers.OrganizationSettingsController.Post(System.String,OpenBots.Server.Model.Membership.OrganizationSetting)">
            <summary>
            Adds an organization setting for an organization id 
            </summary>
            <param name="organizationId">Organization identifier</param>
            <param name="value">Details of the organization setting</param>
            <response code="200">Ok, if the new setting has been added successfully</response>
            <response code="400">Bad request, if the irganization id is not provided or an improper Guid</response>
            <response code="403">Forbidden, unauthorized access by user</response>
            <response code="409">Conflict, concurrency error </response>
            <response code="422">Unprocessable entity, if a duplicate record is being entered</response>
            <returns>Ok response with organization setting details</returns>
        </member>
        <member name="M:OpenBots.Server.WebAPI.Controllers.OrganizationSettingsController.Put(System.String,System.String,OpenBots.Server.Model.Membership.OrganizationSetting)">
            <summary>
            Updates the organization setting for an organization
            </summary>
            <param name="organizationId">Organization identifier</param>
            <param name="id">Organization setting identifier </param>
            <param name="value">Value to be updated</param>
            <response code="200">Ok, if the value has been updated for the organization setting for an organization</response>
            <response code="400">Bad request, if the organization id or setting id is not provided or an improper Guid</response>
            <response code="403">Forbidden, unauthorized access</response>
            <response code="409">Conflict, concurrency error</response>
            <response code="422">Unprocessable entity, validation error</response>
            <returns>Ok response with organization setting details</returns>
        </member>
        <member name="M:OpenBots.Server.WebAPI.Controllers.OrganizationSettingsController.Delete(System.String)">
            <summary>
            Deletes setting with the specific id
            </summary>
            <param name="id">Organization setting identifier</param>
            <response code="200">Ok, if the setting has been soft deleted</response>
            <response code="400">Bad request, if the id is not provided or an improper Guid.</response>
            <response code="403">Forbidden, unauthorized access</response>
            <returns>Ok response</returns>
        </member>
        <member name="M:OpenBots.Server.WebAPI.Controllers.OrganizationSettingsController.Patch(System.String,Microsoft.AspNetCore.JsonPatch.JsonPatchDocument{OpenBots.Server.Model.Membership.OrganizationSetting})">
            <summary>
            Partially updates the organization setting 
            </summary>
            <param name="id">Organization setting identifier</param>
            <param name="value">Values to be updated</param>
            <response code="200">Ok, if update of organization setting is successful</response>
            <response code="400">Bad request, if the id is null or ids dont match.</response>
            <response code="403">Forbidden, unauthorized access</response>
            <response code="422">Unprocessable entity, validation error</response>
            <returns>Ok response, if the partial organization setting values have been updated</returns>
        </member>
        <member name="T:OpenBots.Server.WebAPI.Controllers.OrganizationUnitMembersController">
            <summary>
            Controller for Organization Unit Members
            </summary>
        </member>
        <member name="M:OpenBots.Server.WebAPI.Controllers.OrganizationUnitMembersController.#ctor(OpenBots.Server.DataAccess.Repositories.IOrganizationUnitMemberRepository,OpenBots.Server.Business.IMembershipManager,OpenBots.Server.Security.ApplicationIdentityUserManager,Microsoft.Extensions.Configuration.IConfiguration,Microsoft.AspNetCore.Http.IHttpContextAccessor)">
            <summary>
            OrganizationUnitMembersController constructor
            </summary>
            <param name="repository"></param>
            <param name="membershipManager"></param>
            <param name="userManager"></param>
            <param name="httpContextAccessor"></param>
            <param name="configuration"></param>
        </member>
        <member name="M:OpenBots.Server.WebAPI.Controllers.OrganizationUnitMembersController.Get(System.String,System.String,System.String,System.Int32,System.Int32)">
            <summary>
            Gets all the members of an organization unit (department)
            </summary>
            <param name="organizationId">organization identifier</param>
            <param name="filter"></param>
            <param name="orderBy"></param>
            <param name="top"></param>
            <param name="skip"></param>
            <response code="200">Ok, a paginated list of the members of an organization unit</response>
            <response code="400">Bad request, if the Organization unit id is not provided or an improper Guid.</response>
            <response code="403">Forbidden, unauthorized access by user</response>
            <response code="404">Not found</response>
            <response code="422">Unprocessable entity, validation error.</response>
            <returns>Paginated list of all the members of the organization unit</returns>
        </member>
        <member name="M:OpenBots.Server.WebAPI.Controllers.OrganizationUnitMembersController.Get(System.String)">
            <summary>
            Gets the organization unit member for a particular organization.
            </summary>
            <param name="id">Organization unit member id </param>
            <response code="200">Ok, if organization unit member is available within the organization unit></response>
            <response code="400">Bad request, if the id is not provided or an improper Guid</response>
            <response code="403">Forbidden, unauthorized access by user</response>
            <response code="404">Not found</response>
            <response code="422">Unprocessable entity, validation error.</response>
            <returns>Ok response with organization unit member details</returns>
        </member>
        <member name="M:OpenBots.Server.WebAPI.Controllers.OrganizationUnitMembersController.Post(System.String,OpenBots.Server.Model.Membership.OrganizationUnitMember)">
            <summary>
            Adds a organization unit member to an organization unit
            </summary>
            <param name="organizationId">Organization identifier</param>
            <param name="value">Details of the organization unit member</param>
            <response code="200">Ok, if the member has been added successfully to an organization unit</response>
            <response code="400">Bad request, if the organization id is not provided or an improper Guid.</response>
            <response code="403">Forbidden, unauthorized access by user</response>
            <response code="409">Conflict, concurrency error</response>
            <response code="422">Unprocessable entity, if a duplicate record is being entered</response> 
            <returns>Ok response with organization unit member details</returns>
        </member>
        <member name="M:OpenBots.Server.WebAPI.Controllers.OrganizationUnitMembersController.Put(System.String,System.String,OpenBots.Server.Model.Membership.OrganizationUnitMember)">
            <summary>
            Updates a member of an organization unit
            </summary>
            <param name="organizationId">Organization identifier</param>
            <param name="id">Member identifier</param>
            <param name="value">Member value to be updated</param>
            <response code="200">Ok, if the value has been updated for the organization member</response>
            <response code="400">Bad request, if the organization id or member id is not provided or an improper Guid</response>
            <response code="403">Forbidden, unauthorized access</response>
            <response code="409">Conflict, concurrency error</response>
            <response code="422">Unprocessable entity, validation error</response>
            <returns>Ok response with the updated organization member details</returns>
        </member>
        <member name="M:OpenBots.Server.WebAPI.Controllers.OrganizationUnitMembersController.Delete(System.String)">
            <summary>
            Delete member from an organization unit
            </summary>
            <param name="id">Organization member identifier</param>
            <response code="200">Ok, if the organization member with the given id has been deleted for an organization unit</response>
            <response code="400">Bad request, if the id is not provided or not in proper Guid format</response>
            <response code="403">Unauthorized access, if the user doesn't have permission to delete the organization member</response>
            <response code="422">Unprocessable Entity, validation error</response>
            <returns>Ok response</returns>
        </member>
        <member name="M:OpenBots.Server.WebAPI.Controllers.OrganizationUnitMembersController.Patch(System.String,Microsoft.AspNetCore.JsonPatch.JsonPatchDocument{OpenBots.Server.Model.Membership.OrganizationUnitMember})">
            <summary>
            Updates the partial details of the organization unit member
            </summary>
            <param name="id">Organization unit member identifier</param>
            <param name="value">Value of the organization unit member to be updated</param>
            <response code="200">Ok, if update of organization unit member is successful</response>
            <response code="400">Bad request, if the id is null or ids don't match</response>
            <response code="403">Forbidden, unauthorized access</response>
            <response code="422">Unprocessable entity, validation error</response>
            <returns>Ok response, if the partial Organization values has been updated</returns>
        </member>
        <member name="T:OpenBots.Server.WebAPI.Controllers.OrganizationUnitsController">
            <summary>
            Controller for Organization Units
            </summary>
        </member>
        <member name="M:OpenBots.Server.WebAPI.Controllers.OrganizationUnitsController.#ctor(OpenBots.Server.DataAccess.Repositories.IOrganizationUnitRepository,OpenBots.Server.Business.IMembershipManager,OpenBots.Server.Security.ApplicationIdentityUserManager,Microsoft.Extensions.Configuration.IConfiguration,Microsoft.AspNetCore.Http.IHttpContextAccessor)">
            <summary>
            OrganizationUnitsController constructor
            </summary>
            <param name="repository"></param>
            <param name="membershipManager"></param>
            <param name="userManager"></param>
            <param name="httpContextAccessor"></param>
            <param name="configuration"></param>
        </member>
        <member name="M:OpenBots.Server.WebAPI.Controllers.OrganizationUnitsController.Get(System.String,System.String,System.String,System.Int32,System.Int32)">
            <summary>
            Gets allorganization units details (departments) that are part of an organization.
            </summary>
            <param name="organizationId">Organization identifier</param>
            <param name="filter"></param>
            <param name="orderBy"></param>
            <param name="top"></param>
            <param name="skip"></param>
            <response code="200">Ok, paginated list of the organization units belonging to a particular organization</response>
            <response code="400">Bad request, if the organization id is not provided or an improper Guid.</response>
            <response code="403">Forbidden, unauthorized access by user</response>
            <response code="404">Not found</response>
            <response code="422">Unprocessable entity, validation error.</response>
            <returns>Paginated list of all the organization units for a particulatular organization</returns>
        </member>
        <member name="M:OpenBots.Server.WebAPI.Controllers.OrganizationUnitsController.Get(System.String)">
            <summary>
            Provides the organization unit details for a particular id
            </summary>
            <param name="id">Organization unit identifier</param>
            <response code="200">Ok, if organization unit detail is available with the given id></response>
            <response code="400">BadRequest, if organization unit id is not provided or improper Guid</response>
            <response code="403">Forbidden, unauthorized access by user.</response>
            <response code="404">Not found</response>
            <response code="422">Unprocessable entity, validation error.</response>
            <returns>Ok response with organization unit details</returns>
        </member>
        <member name="M:OpenBots.Server.WebAPI.Controllers.OrganizationUnitsController.Post(System.String,OpenBots.Server.Model.Membership.OrganizationUnit)">
            <summary>
            Adds an organization unit to an organization
            </summary>
            <param name="organizationId">Organization identifier</param>
            <param name="value">Value of organization unit to be added</param>
            <response code="200">Ok, if the unit has been added successfully to an organization</response>
            <response code="400">Bad request, if the organization id is not provided or an improper Guid.</response>
            <response code="403">Forbidden, unauthorized access by user</response>
            <response code="409">Conflict, concurrency error </response>
            <response code="422">Unprocessable entity, if a duplicate record is being entered</response> 
            <returns>Ok response with organization unit details</returns>
        </member>
        <member name="M:OpenBots.Server.WebAPI.Controllers.OrganizationUnitsController.Put(System.String,System.String,OpenBots.Server.Model.Membership.OrganizationUnit)">
            <summary>
            Updates a member of an organization unit
            </summary>
            <param name="organizationId">Organization identifier</param>
            <param name="id">Organization unit identifier</param>
            <param name="value">Value of the organization unit to be updated</param>
            <response code="200">Ok,if the value has been updated for the organization unit.</response>
            <response code="400">Bad request, if the organization id or unit id is not provided or an improper Guid.</response>
            <response code="403">Forbidden, unauthorized access</response>
            <response code="409">Conflict, concurrency error.</response>
            <response code="422">Unprocessable entity, validation error.</response>
            <returns>Ok response with updated organization unit details</returns>
        </member>
        <member name="M:OpenBots.Server.WebAPI.Controllers.OrganizationUnitsController.Delete(System.String,System.String)">
            <summary>
            Deletes an organization unit 
            </summary>
            <param name="id">Organization unit identifier</param>
            <response code="200">Ok, if the organization unit with the given id has been deleted for an Organization</response>
            <response code="400">Bad request, if the id is not provided or not in proper Guid format.</response>
            <response code="403">Unauthorized access, if the user doesn't have permission to delete the organization unit</response>
            <response code="422">Unprocessable entity, validation error</response>
            <returns>Ok response</returns>
        </member>
        <member name="M:OpenBots.Server.WebAPI.Controllers.OrganizationUnitsController.Patch(System.String,System.String,Microsoft.AspNetCore.JsonPatch.JsonPatchDocument{OpenBots.Server.Model.Membership.OrganizationUnit})">
            <summary>
            Updates the partial details of an organization unit
            </summary>
            <param name="id">Organization unit identifier</param>
            <param name="value">Details of the organization unit to be updated</param>
            <response code="200">Ok, if update of organization unit is successful. </response>
            <response code="400">Bad request, if the id is null or ids dont match.</response>
            <response code="403">Forbidden, unauthorized access</response>
            <response code="422">Unprocessable entity, validation error</response>
            <returns>Ok response, if the partial organization unit details have been updated</returns>
        </member>
        <member name="T:OpenBots.Server.WebAPI.Controllers.OrganizationApi.UserAgreementController">
            <summary>
            Controller for User Agreements
            </summary>
        </member>
        <member name="M:OpenBots.Server.WebAPI.Controllers.OrganizationApi.UserAgreementController.#ctor(OpenBots.Server.DataAccess.Repositories.IUserAgreementRepository,OpenBots.Server.Security.ApplicationIdentityUserManager,Microsoft.AspNetCore.Http.IHttpContextAccessor,OpenBots.Server.Business.IMembershipManager,OpenBots.Server.DataAccess.Repositories.IPersonRepository,OpenBots.Server.DataAccess.Repositories.IPersonEmailRepository,OpenBots.Server.DataAccess.Repositories.IEmailVerificationRepository,OpenBots.Server.Business.ITermsConditionsManager,Microsoft.Extensions.Configuration.IConfiguration)">
            <summary>
            UserAgreementController constructor
            </summary>
            <param name="repository"></param>
            <param name="userManager"></param>
            <param name="httpContextAccessor"></param>
            <param name="configuration"></param>
            <param name="membershipManager"></param>
            <param name="personRepository"></param>
            <param name="personEmailRepository"></param>
            <param name="emailVerificationRepository"></param>
            <param name="termsConditionsManager"></param>
        </member>
        <member name="M:OpenBots.Server.WebAPI.Controllers.OrganizationApi.UserAgreementController.Get">
            <summary>
            Get latest terms and conditions for user consent
            </summary>
            <response code="200">Ok, latest terms and conditions for user consent</response>
            <response code="400">Bad request</response>
            <response code="403">Forbidden, unauthorized access</response>        
            <response code="422">Unprocessable entity</response>
            <returns>User agreement</returns>
        </member>
        <member name="M:OpenBots.Server.WebAPI.Controllers.OrganizationApi.UserAgreementController.Get(System.String)">
            <summary>
            Check that the user consent has been recorded for logged user on the latest user agreement and IsAccepted property is True and has not expired
            If there is no record of acceptance for the latest version of the Terms and Conditions, then response will be false, which will force user consent before proceeding
            </summary>
            <response code="200">Ok, true or false</response>
            <response code="400">Bad request</response>
            <response code="403">Forbidden, unauthorized access</response> 
            <response code="404">Not found</response>
            <response code="422">Unprocessable entity</response>
            <returns>Ok response with boolean value of true or false</returns>
        </member>
        <member name="T:OpenBots.Server.WebAPI.Controllers.OrganizationApi.UserConsentController">
            <summary>
            Controller for User Consent
            </summary>
        </member>
        <member name="M:OpenBots.Server.WebAPI.Controllers.OrganizationApi.UserConsentController.#ctor(OpenBots.Server.DataAccess.Repositories.IUserConsentRepository,OpenBots.Server.Security.ApplicationIdentityUserManager,Microsoft.AspNetCore.Http.IHttpContextAccessor,OpenBots.Server.Business.IMembershipManager,OpenBots.Server.DataAccess.Repositories.IPersonRepository,OpenBots.Server.DataAccess.Repositories.IPersonEmailRepository,OpenBots.Server.DataAccess.Repositories.IEmailVerificationRepository,Microsoft.Extensions.Configuration.IConfiguration)">
            <summary>
            UserConsentController constructor
            </summary>
            <param name="repository"></param>
            <param name="userManager"></param>
            <param name="httpContextAccessor"></param>
            <param name="membershipManager"></param>
            <param name="personRepository"></param>
            <param name="personEmailRepository"></param>
            <param name="emailVerificationRepository"></param>
            <param name="configuration"></param>
        </member>
        <member name="M:OpenBots.Server.WebAPI.Controllers.OrganizationApi.UserConsentController.Get(System.String,System.String,System.Int32,System.Int32)">
            <summary>
            Provides a list of all user consents
            </summary>
            <param name="filter"></param>
            <param name="orderBy"></param>
            <param name="skip"></param>
            <param name="top"></param>
            <response code="200">Ok,a paginated list of all user consents</response>
            <response code="400">Bad request</response>
            <response code="403">Forbidden, unauthorized access</response>        
            <response code="422">Unprocessable entity</response>
            <returns>Paginated list of all user consents </returns>
        </member>
        <member name="M:OpenBots.Server.WebAPI.Controllers.OrganizationApi.UserConsentController.Get(System.String)">
            <summary>
            Provides a user consent details for a particular organization id.
            </summary>
            <param name="id">User consent id</param>
            <response code="200">Ok if user consent entity exists with the given id.</response>
            <response code="304">Not modified</response>
            <response code="400">Bad request, if user consent id is not in proper format or proper Guid.</response>
            <response code="403">Forbidden</response>
            <response code="404">Not found, when no user consent entity exists for the given user consent id</response>
            <response code="422">Unprocessable entity</response>
            <returns>User consent details for the given id</returns>
        </member>
        <member name="M:OpenBots.Server.WebAPI.Controllers.OrganizationApi.UserConsentController.Post(OpenBots.Server.Model.Identity.UserConsent)">
             <summary>
             Save user constent
             </summary>
             <param name="value"></param>
             <response code="200">Ok, user constent saved </response>
             <response code="400">Bad request, when the user consent value is not in proper format</response>
             <response code="403">Forbidden, unauthorized access</response>
            <response code="409">Conflict, concurrency error</response> 
             <response code="422">Unprocessabile entity, when a duplicate record is being entered.</response>
             <returns>Newly created user constent details</returns>
        </member>
        <member name="M:OpenBots.Server.WebAPI.Controllers.OrganizationApi.UserConsentController.Put(System.String,OpenBots.Server.Model.Identity.UserConsent)">
            <summary>
            Updates user consent entity 
            </summary>
            <remarks>
            Provides an action to update user consent, when user consent id and the new details of user consent are given
            </remarks>
            <param name="id">User consent id, produces bad request if id is null or ids don't match</param>
            <param name="value">User consent details to be updated</param>
            <response code="200">Ok, if the user consent details for the given id have been updated.</response>
            <response code="400">Bad request, if the user consent id is null or ids don't match</response>
            <response code="403">Forbidden, unauthorized access</response>
            <response code="409">Conflict</response>
            <response code="422">Unprocessable entity</response>
            <returns>Ok response with the updated value</returns>
        </member>
        <member name="M:OpenBots.Server.WebAPI.Controllers.OrganizationApi.UserConsentController.Delete(System.String)">
            <summary>
            Deletes user consent with a specified id from the database.
            </summary>
            <param name="id">User consent id to be deleted - throws bad request if null or empty Guid/</param>
            <response code="200">Ok, when user consent is soft deleted,(isDeleted flag is set to true in database)</response>
            <response code="400">Bad request, if organization id is null or empty Guid</response>
            <response code="403">Forbidden</response>
            <returns>Ok response</returns>
        </member>
        <member name="M:OpenBots.Server.WebAPI.Controllers.OrganizationApi.UserConsentController.Patch(System.String,Microsoft.AspNetCore.JsonPatch.JsonPatchDocument{OpenBots.Server.Model.Identity.UserConsent})">
            <summary>
            Updates partial details of user consent.
            </summary>
            <param name="id">user consent identifier</param>
            <param name="value">value of the user consent to be updated.</param>
            <response code="200">Ok, if update of user consent is successful. </response>
            <response code="400">Bad request, if the id is null or ids dont match.</response>
            <response code="403">Forbidden, unauthorized access</response>
            <response code="422">Unprocessable entity, validation error</response>
            <returns>Ok response, if the partial user consent values have been updated</returns>
        </member>
        <member name="T:OpenBots.Server.WebAPI.Controllers.EmailVerificationsController">
            <summary>
            Controller for email verifications
            </summary>
        </member>
        <member name="M:OpenBots.Server.WebAPI.Controllers.EmailVerificationsController.#ctor(OpenBots.Server.DataAccess.Repositories.IEmailVerificationRepository,OpenBots.Server.Business.IMembershipManager,OpenBots.Server.Security.ApplicationIdentityUserManager,Microsoft.AspNetCore.Http.IHttpContextAccessor,Microsoft.Extensions.Configuration.IConfiguration,OpenBots.Server.Business.IEmailManager)">
            <summary>
            EmailVerificationsController constructor
            </summary>
            <param name="repository"></param>
            <param name="membershipManager"></param>
            <param name="userManager"></param>
            <param name="httpContextAccessor"></param>
            <param name="configuration"></param>
            <param name="emailSender"></param>
        </member>
        <member name="M:OpenBots.Server.WebAPI.Controllers.EmailVerificationsController.Get(System.String,System.String,System.String,System.Int32,System.Int32)">
            <summary>
            Gets all the email verfication details for a particular person 
            </summary>
            <param name="personId">Person identifier</param>
            <param name="filter"></param>
            <param name="orderBy"></param>
            <param name="top"></param>
            <param name="skip"></param>
            <response code="200">Ok, paginated list of the email verfications for a particular person</response>
            <response code="400">Bad request, if the person id is not provided or an improper Guid</response>
            <response code="403">Forbidden, unauthorized access by user</response>
            <response code="404">Not found</response>
            <response code="422">Unprocessable entity, validation error</response>
            <returns>Paginated list of all the email verfications for a particular person</returns>
            <returns>All email verifications for a particular person</returns>
        </member>
        <member name="M:OpenBots.Server.WebAPI.Controllers.EmailVerificationsController.Get(System.String)">
            <summary>
            Provides the email verification details for a particular id
            </summary>
            <param name="id">Email verfication id</param>
            <response code="200">Ok, if email verfication detail is available with the given id></response>
            <response code="304">Not modified</response>
            <response code="400">Bad request, if the id is not provided or an improper Guid</response>
            <response code="403">Forbidden, unauthorized access by user</response>
            <response code="404">Not found</response>
            <response code="422">Unprocessable entity, validation error</response>
            <returns>Ok response with email verification details</returns>
        </member>
        <member name="M:OpenBots.Server.WebAPI.Controllers.EmailVerificationsController.Post(System.String,OpenBots.Server.Model.Identity.EmailVerification)">
            <summary>
            Adds email verfication details for a person
            </summary>
            <param name="personId">Person identifier</param>
            <param name="value">Value of the email verfication details to be added</param>
            <response code="200">Ok, if the email verfication has been added successfully for a person</response>
            <response code="400">Bad request, if the person id is not provided or an improper Guid</response>
            <response code="403">Forbidden, unauthorized access by user</response>
            <response code="409">Conflict, concurrency error </response>
            <response code="422">Unprocessable entity, if a duplicate record is being entered</response> 
            <returns>Ok response with email verification details</returns>
        </member>
        <member name="M:OpenBots.Server.WebAPI.Controllers.EmailVerificationsController.Put(System.String,System.String,OpenBots.Server.Model.Identity.EmailVerification)">
            <summary>
            Updates the email verfication details for a person
            </summary>
            <param name="personId">Person identifier</param>
            <param name="id">Email verfication identifier</param>
            <param name="value">Value to be updated</param>
            <response code="200">Ok, if the email verification value has been updated for the person</response>
            <response code="400">Bad request, if the persion id or email verification id is not provided or an improper Guid</response>
            <response code="403">Forbidden, unauthorized access</response>
            <response code="409">Conflict, concurrency error.</response>
            <response code="422">Unprocessable entity, validation error</response>
            <returns>Ok response with updated email verification details</returns>
        </member>
        <member name="M:OpenBots.Server.WebAPI.Controllers.EmailVerificationsController.Delete(System.String)">
            <summary>
            Deletes email verification details
            </summary>
            <param name="id">Email verification identifier</param>
            <response code="200">Ok, if the email verification with the given id has been deleted</response>
            <response code="400">Bad request, if the id is not provided or not a proper Guid</response>
            <response code="403">Unauthorized access, if the user doesn't have permission to delete the verification details</response>
            <response code="422">Unprocessable entity, validation error</response>
            <returns>Ok response, if the email verification with the given id has been soft deleted</returns>
        </member>
        <member name="M:OpenBots.Server.WebAPI.Controllers.EmailVerificationsController.Patch(System.String,Microsoft.AspNetCore.JsonPatch.JsonPatchDocument{OpenBots.Server.Model.Identity.EmailVerification})">
            <summary>
            Updates a portion of email verification details
            </summary>
            <param name="id">Email verification identifier</param>
            <param name="value">Value to be updated</param>
            <response code="200">Ok, if update of values of email verfication are successful</response>
            <response code="400">Bad request, if the id is null or ids dont match</response>
            <response code="403">Forbidden, unauthorized access</response>
            <response code="422">Unprocessable entity, validation error</response>
            <returns>Ok response, if the partial email verification values have been updated</returns>
        </member>
        <member name="T:OpenBots.Server.WebAPI.Controllers.PersonApi.MembershipController">
            <summary>
            Controller for organization membership
            </summary>
        </member>
        <member name="M:OpenBots.Server.WebAPI.Controllers.PersonApi.MembershipController.#ctor(OpenBots.Server.DataAccess.Repositories.IOrganizationRepository,OpenBots.Server.DataAccess.Repositories.IOrganizationMemberRepository,OpenBots.Server.Business.IMembershipManager,OpenBots.Server.Security.ApplicationIdentityUserManager,Microsoft.Extensions.Configuration.IConfiguration,Microsoft.AspNetCore.Http.IHttpContextAccessor)">
            <summary>
            MembershipController constructor
            </summary>
            <param name="repository"></param>
            <param name="orgMemberRepository"></param>
            <param name="membershipManager"></param>
            <param name="userManager"></param>
            <param name="configuration"></param>
            <param name="httpContextAccessor"></param>
        </member>
        <member name="M:OpenBots.Server.WebAPI.Controllers.PersonApi.MembershipController.GetSuggestions(System.String)">
            <summary>
            Provides a list of organizations that can be presented to the user as suggestions to apply for access request
            </summary>
            <remarks>
            This method will return all organizations that are visible to users with a certain email domain
            All the emails of the user are matched to the allowed domains of organization
            </remarks>
            <param name="personId" >Id of the currently logged in user. If the user id is not the same, then the request will be rejected</param>
            <returns>Paginated list of organizations that are being suggested. The object organization will not have any child objects</returns>
            <response code="400">Bad request, if no person id is provided or it is not a proper Guid</response>
            <response code="200">Ok, paginated list of organizations that are being suggested. The object organization will not have any child objects</response>
            <response code="403">Forbidden, person id passed in the URL is not the same as the currently logged in user</response>
        </member>
        <member name="M:OpenBots.Server.WebAPI.Controllers.PersonApi.MembershipController.Get(System.String)">
            <summary>
            Get cards for organizations a person has access to
            </summary>
            <param name="personId">Person identifier</param>
            <response code="200">Ok, paginated list of organizations that user has access to</response>
            <response code="400">Bad request, if the person id is not entered or an improper Guid</response>
            <response code="403">Forbidden, person id passed in the URL is not the same as the currently logged in user</response>
            <response code="404">Not found</response>
            <response code="422">Unprocessable entity, validation error</response>
            <returns>Organization cards for all organizations user has access to</returns>
        </member>
        <member name="M:OpenBots.Server.WebAPI.Controllers.PersonApi.MembershipController.Get(System.String,System.Int32,System.Int32)">
            <summary>
            Get organizations user has access to
            </summary>
            <param name="startsWith">Search criteria</param>
            <param name="skip"></param>
            <param name="take"></param>
            <response code="200">Ok, paginated listing of all organizations the user has access to</response>
            <response code="400">Bad request, if the person id is not provided or an improper Guid</response>
            <response code="403">Forbidden, person id passed in the URL is not the same as the currently logged in user</response>
            <response code="404">Not found</response>
            <response code="422">Unprocessable entity, validation error</response>
            <returns>List of all organizations user has access to</returns>
        </member>
        <member name="M:OpenBots.Server.WebAPI.Controllers.PersonApi.MembershipController.Post(System.String,System.String)">
            <summary>
            Request for joining an organization
            </summary>
            <param name="personId">User id of the person logged in</param>
            <param name="id">Organization id that the user wants to be a member of</param>
            <response code="200">Ok, if the user has been successfully added to the organization</response>
            <response code="400">Bad request, if no person id or organization id is provided or it is not a proper Guid</response>
            <returns>Newly created access request</returns>
        </member>
        <member name="M:OpenBots.Server.WebAPI.Controllers.PersonApi.MembershipController.RevokeAdmin(System.String,System.String)">
            <summary>
            Revoke admin permission
            </summary>
            <param name="personId">User who's admin permission needs to be revoked</param>
            <param name="id">Organization id</param>
            <returns>Organization member details</returns>
        </member>
        <member name="M:OpenBots.Server.WebAPI.Controllers.PersonApi.MembershipController.GrantAdmin(System.String,System.String)">
            <summary>
            Grant admin permission to non-admin users of the organization
            </summary>
            <param name="personId">User who's admin permission needs to be grant</param>
            <param name="id">Organization id</param>
            <returns>Organization member details</returns>
        </member>
        <member name="M:OpenBots.Server.WebAPI.Controllers.PersonApi.MembershipController.Delete(System.String,System.String)">
            <summary>
            Leave a particular organization
            </summary>
            <param name="personId">Id of the currently logged in user. If the user id is not the same, then the request will be rejected</param>
            <param name="id">Id of the organization that the user wants to delete the membership from</param>
            <returns>Ok response if the soft delete is successful</returns>
            <response code="400">Bad request, if no organization id or person id is provided or it is not a proper Guid</response>
            <responce code="200">Ok, when membership to organization has been soft deleted for the logged in user</responce>
            <returns>Ok, if the membership to the organization is deleted for the user</returns>
        </member>
        <member name="T:OpenBots.Server.WebAPI.Controllers.PeopleController">
            <summary>
            Controller for users (people)
            </summary>
        </member>
        <member name="M:OpenBots.Server.WebAPI.Controllers.PeopleController.#ctor(OpenBots.Server.DataAccess.Repositories.IPersonRepository,OpenBots.Server.Security.ApplicationIdentityUserManager,Microsoft.AspNetCore.Http.IHttpContextAccessor,OpenBots.Server.Business.IMembershipManager,Microsoft.Extensions.Configuration.IConfiguration)">
            <summary>
            PeopleController constructor
            </summary>
            <param name="repository"></param>
            <param name="userManager"></param>
            <param name="httpContextAccessor"></param>
            <param name="membershipManager"></param>
            <param name="configuration"></param>
        </member>
        <member name="M:OpenBots.Server.WebAPI.Controllers.PeopleController.Get(System.String,System.String,System.Int32,System.Int32)">
            <summary>
            Gets all the users (people) 
            </summary>
            <param name="filter"></param>
            <param name="orderBy"></param>
            <param name="top"></param>
            <param name="skip"></param>
            <response code="200">Ok, a paginated list of all people</response>
            <response code="400">Bad request, f it is not a proper Guid</response>
            <response code="403">Forbidden, person id passed in the URL is not the same as the currently logged in user</response>
            <response code="422">Unprocessable entity, validation error</response>
            <returns>Paginated list of all the users (people)</returns>
        </member>
        <member name="M:OpenBots.Server.WebAPI.Controllers.PeopleController.Get(System.String)">
            <summary>
            Retrieves the person details for a particular user
            </summary>
            <param name="id">People identifier</param>
            <response code="200">Ok, if person details are available for the given id></response>
            <response code="400">Bad request, if the person id is not provided or an improper Guid</response>
            <response code="403">Forbidden, person id passed in the URL is not the same as the currently logged in user</response>
            <response code="404">Not found</response>
            <response code="422">Unprocessable entity, validation error</response>
            <returns>Ok response with person details</returns> 
        </member>
        <member name="M:OpenBots.Server.WebAPI.Controllers.PeopleController.Post(OpenBots.Server.Model.Identity.Person)">
            <summary>
            Adds a person
            </summary>
            <param name="value"></param>
            <response code="200">Ok, if the person details have been added</response>
            <response code="400">Bad request, if an improper Guid</response>
            <response code="403">Forbidden, unauthorized access by user</response>
            <response code="409">Conflict, concurrency error</response>
            <response code="422">Unprocessable entity, if a duplicate record is being entered (person record already exists)</response> 
            <returns>Ok response with person details</returns>
        </member>
        <member name="M:OpenBots.Server.WebAPI.Controllers.PeopleController.Put(System.String,OpenBots.Server.Model.Identity.Person)">
            <summary>
            Updates person details
            </summary>
            <param name="id">Person id</param>
            <param name="value">Details to be updated</param>
            <response code="200">Ok, if the details of person have been updated</response>
            <response code="400">Bad request, if person id is not provided or an improper Guid</response>
            <response code="403">Forbidden, unauthorized access by user</response>
            <response code="409">Conflict, concurrency error</response>
            <response code="422">Unprocessable entity, validation error.</response>
            <returns>Ok response with updated person details</returns>
        </member>
        <member name="M:OpenBots.Server.WebAPI.Controllers.PeopleController.Delete(System.String)">
            <summary>
            Deletes the person details
            </summary>
            <param name="id">Person id</param>
            <response code="200">Ok, if the person details for the particular id have been soft deleted</response>
            <response code="400">Bad request, if person id is not provided or an improper guid</response>
            <response code="403">Forbidden, person id passed in the URL is not the same as the currently logged in user</response>
            <returns>Ok response, if the person details for the particular id have been soft deleted</returns>
        </member>
        <member name="M:OpenBots.Server.WebAPI.Controllers.PeopleController.Patch(System.String,Microsoft.AspNetCore.JsonPatch.JsonPatchDocument{OpenBots.Server.Model.Identity.Person})">
            <summary>
            Updates person details 
            </summary>
            <param name="id">People identifier</param>
            <param name="value">Values to be updated</param>
            <response code="200">Ok, if update of person details are successful</response>
            <response code="400">Bad request, if the id is null or ids dont match</response>
            <response code="403">Forbidden, unauthorized access</response>
            <response code="422">Unprocessable entity, validation error</response>
            <returns>Ok response, if the partial person values have been updated</returns>
        </member>
        <member name="T:OpenBots.Server.WebAPI.Controllers.PersonEmailsController">
            <summary>
            Controller for people's emails
            </summary>
        </member>
        <member name="M:OpenBots.Server.WebAPI.Controllers.PersonEmailsController.#ctor(OpenBots.Server.DataAccess.Repositories.IPersonEmailRepository,OpenBots.Server.Business.IMembershipManager,OpenBots.Server.Security.ApplicationIdentityUserManager,Microsoft.Extensions.Configuration.IConfiguration,Microsoft.AspNetCore.Http.IHttpContextAccessor)">
            <summary>
            PersonEmailsController constructor
            </summary>
            <param name="repository"></param>
            <param name="membershipManager"></param>
            <param name="userManager"></param>
            <param name="configuration"></param>
            <param name="httpContextAccessor"></param>
        </member>
        <member name="M:OpenBots.Server.WebAPI.Controllers.PersonEmailsController.Get(System.String,System.String,System.String,System.Int32,System.Int32)">
            <summary>
            Gets all the email address and verification id for a particular person
            </summary>
            <param name="personId">Person identifier</param>
            <param name="filter"></param>
            <param name="orderBy"></param>
            <param name="top">returns the top 100</param>
            <param name="skip"></param>
            <response code="200">Ok, paginated list of all email addresses</response>
            <response code="400">Bad request, if person id is not provided or an improper Guid</response>
            <response code="403">Forbidden, person id passed in the URL is not the same as the currently logged in user</response>
            <response code="422">Unprocessable entity, validation error</response>
            <returns>Paginated list of all the email addresses for a particular person</returns>
        </member>
        <member name="M:OpenBots.Server.WebAPI.Controllers.PersonEmailsController.Get(System.String)">
            <summary>
            Gets the email address and verfiication id for a particular email for person
            </summary>
            <param name="id">Email identifier</param>
            <response code="200">Ok, if email detail is available for the given id></response>
            <response code="400">Bad request, if the email id is not provided or an improper Guid</response>
            <response code="403">Forbidden, person if passed in the URL is not the same as the currently logged in user</response>
            <response code="404">NotFound</response>
            <response code="422">Unprocessable entity, validation error</response>
            <returns>Ok response, email details</returns>
        </member>
        <member name="M:OpenBots.Server.WebAPI.Controllers.PersonEmailsController.Post(System.String,OpenBots.Server.Model.Identity.PersonEmail)">
            <summary>
            Adds a new email id and verification id for a person
            </summary>
            <param name="personId">Person identifier</param>
            <param name="value">Email details to be added</param>
            <response code="200">Ok, if the email details have been added</response>
            <response code="400">Bad request, if person id is not provided or an improper Guid</response>
            <response code="403">Forbidden, unauthorized access by user</response>
            <response code="409">Conflict, concurrency error</response>
            <response code="422">Unprocessable entity, if a duplicate record is being entered, email detials already exists</response> 
            <returns>Ok response with newly added email details</returns>
        </member>
        <member name="M:OpenBots.Server.WebAPI.Controllers.PersonEmailsController.Put(System.String,System.String,OpenBots.Server.Model.Identity.PersonEmail)">
            <summary>
            Updates the email details for person
            </summary>
            <param name="personId">Person identifier</param>
            <param name="id">Email identifier</param>
            <param name="value">Value to be updated</param>
            <response code="200">Ok, if the details of email have been updated</response>
            <response code="400">Bad request, if person id or email id is not provided or an improper Guid.</response>
            <response code="403">Forbidden, unauthorized access by user</response>
            <response code="409">Conflict, concurrency error</response>
            <response code="422">Unprocessable entity, validation error.</response>
            <returns>Ok response with newly updated email details</returns>
        </member>
        <member name="M:OpenBots.Server.WebAPI.Controllers.PersonEmailsController.Delete(System.String)">
            <summary>
            Deletes the email details 
            </summary>
            <param name="id">Email identifier</param>
            <response code="200">Ok, if the email details for the particular id have been deleted</response>
            <response code="400">Bad request, if email id is not provided or an improper Guid</response>
            <response code="403">Forbidden, unauthorized access</response>
            <returns>Ok response if the soft delete is successful</returns>
        </member>
        <member name="M:OpenBots.Server.WebAPI.Controllers.PersonEmailsController.Patch(System.String,Microsoft.AspNetCore.JsonPatch.JsonPatchDocument{OpenBots.Server.Model.Identity.PersonEmail})">
            <summary>
            Updates partial details of email
            </summary>
            <param name="id">Person email identifier</param>
            <param name="value">Value to be updated</param>
            <response code="200">Ok, if update of email details are successful</response>
            <response code="400">Bad request, if the id is null or ids don't match</response>
            <response code="403">Forbidden, unauthorized access</response>
            <response code="422">Unprocessable entity, validation error</response>
            <returns>Ok response, if the partial email values have been updated</returns>
        </member>
    </members>
</doc>
