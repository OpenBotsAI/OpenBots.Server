// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using OpenBots.Server.DataAccess;

namespace OpenBots.Server.DataAccess.Migrations
{
    [DbContext(typeof(StorageContext))]
    [Migration("20210408201252_renameTimeZoneIds")]
    partial class renameTimeZoneIds
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .UseIdentityColumns()
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("ProductVersion", "5.0.0");

            modelBuilder.Entity("OpenBots.Server.Model.Agent", b =>
                {
                    b.Property<Guid?>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime?>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("CredentialId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("DeleteOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("DeletedBy")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("IPAddresses")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("IPOption")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsConnected")
                        .HasColumnType("bit");

                    b.Property<bool?>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<bool>("IsEnabled")
                        .HasColumnType("bit");

                    b.Property<bool>("IsEnhancedSecurity")
                        .HasColumnType("bit");

                    b.Property<string>("MacAddresses")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("MachineName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<byte[]>("Timestamp")
                        .IsConcurrencyToken()
                        .IsRequired()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.Property<string>("UpdatedBy")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime?>("UpdatedOn")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("Agents");
                });

            modelBuilder.Entity("OpenBots.Server.Model.AgentGroup", b =>
                {
                    b.Property<Guid?>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime?>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeleteOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("DeletedBy")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool?>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<bool>("IsEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<byte[]>("Timestamp")
                        .IsConcurrencyToken()
                        .IsRequired()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.Property<string>("UpdatedBy")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime?>("UpdatedOn")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("AgentGroups");
                });

            modelBuilder.Entity("OpenBots.Server.Model.AgentGroupMember", b =>
                {
                    b.Property<Guid?>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("AgentGroupId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("AgentId")
                        .IsRequired()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime?>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeleteOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("DeletedBy")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<bool?>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<byte[]>("Timestamp")
                        .IsConcurrencyToken()
                        .IsRequired()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.Property<string>("UpdatedBy")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime?>("UpdatedOn")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("AgentGroupMembers");
                });

            modelBuilder.Entity("OpenBots.Server.Model.AgentHeartbeat", b =>
                {
                    b.Property<Guid?>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("AgentId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime?>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeleteOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("DeletedBy")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<bool?>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<bool?>("IsHealthy")
                        .HasColumnType("bit");

                    b.Property<string>("LastReportedMessage")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("LastReportedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("LastReportedStatus")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastReportedWork")
                        .HasColumnType("nvarchar(max)");

                    b.Property<byte[]>("Timestamp")
                        .IsConcurrencyToken()
                        .IsRequired()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.Property<string>("UpdatedBy")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime?>("UpdatedOn")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("AgentHeartbeats");
                });

            modelBuilder.Entity("OpenBots.Server.Model.Asset", b =>
                {
                    b.Property<Guid?>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("AgentId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime?>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeleteOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("DeletedBy")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<Guid?>("FileId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool?>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("JsonValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<double?>("NumberValue")
                        .HasColumnType("float");

                    b.Property<long?>("SizeInBytes")
                        .HasColumnType("bigint");

                    b.Property<string>("TextValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<byte[]>("Timestamp")
                        .IsConcurrencyToken()
                        .IsRequired()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UpdatedBy")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime?>("UpdatedOn")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("Assets");
                });

            modelBuilder.Entity("OpenBots.Server.Model.AuditLog", b =>
                {
                    b.Property<Guid?>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ChangedFromJson")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ChangedToJson")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime?>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeleteOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("DeletedBy")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("ExceptionJson")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool?>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("MethodName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("ObjectId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ParametersJson")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ServiceName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<byte[]>("Timestamp")
                        .IsConcurrencyToken()
                        .IsRequired()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.Property<string>("UpdatedBy")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime?>("UpdatedOn")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("AuditLogs");
                });

            modelBuilder.Entity("OpenBots.Server.Model.Automation", b =>
                {
                    b.Property<Guid?>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("AutomationEngine")
                        .HasColumnType("nvarchar(max)");

                    b.Property<double?>("AverageSuccessfulExecutionInMinutes")
                        .HasColumnType("float");

                    b.Property<double?>("AverageUnSuccessfulExecutionInMinutes")
                        .HasColumnType("float");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime?>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeleteOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("DeletedBy")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<Guid?>("FileId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool?>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("OriginalPackageName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<byte[]>("Timestamp")
                        .IsConcurrencyToken()
                        .IsRequired()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.Property<string>("UpdatedBy")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime?>("UpdatedOn")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("Automations");
                });

            modelBuilder.Entity("OpenBots.Server.Model.AutomationExecutionLog", b =>
                {
                    b.Property<Guid?>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("AgentID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("AutomationID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CompletedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime?>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeleteOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("DeletedBy")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("ErrorDetails")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ErrorMessage")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool?>("HasErrors")
                        .HasColumnType("bit");

                    b.Property<bool?>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<Guid>("JobID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("StartedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("Status")
                        .HasColumnType("nvarchar(max)");

                    b.Property<byte[]>("Timestamp")
                        .IsConcurrencyToken()
                        .IsRequired()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.Property<string>("Trigger")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TriggerDetails")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UpdatedBy")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime?>("UpdatedOn")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("AutomationExecutionLogs");
                });

            modelBuilder.Entity("OpenBots.Server.Model.AutomationLog", b =>
                {
                    b.Property<Guid?>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("AgentId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("AgentName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("AutomationId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("AutomationLogTimeStamp")
                        .HasColumnType("datetime2");

                    b.Property<string>("AutomationName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime?>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeleteOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("DeletedBy")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Exception")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool?>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<Guid?>("JobId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Level")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Logger")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("MachineName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Message")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("MessageTemplate")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Properties")
                        .HasColumnType("nvarchar(max)");

                    b.Property<byte[]>("Timestamp")
                        .IsConcurrencyToken()
                        .IsRequired()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.Property<string>("UpdatedBy")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime?>("UpdatedOn")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("AutomationLogs");
                });

            modelBuilder.Entity("OpenBots.Server.Model.AutomationParameter", b =>
                {
                    b.Property<Guid?>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("AutomationId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime?>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("DataType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("DeleteOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("DeletedBy")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<bool?>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<byte[]>("Timestamp")
                        .IsConcurrencyToken()
                        .IsRequired()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.Property<string>("UpdatedBy")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime?>("UpdatedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("AutomationParameters");
                });

            modelBuilder.Entity("OpenBots.Server.Model.AutomationVersion", b =>
                {
                    b.Property<Guid?>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("AutomationId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime?>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeleteOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("DeletedBy")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<bool?>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("PublishedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("PublishedOnUTC")
                        .HasColumnType("datetime2");

                    b.Property<string>("Status")
                        .HasColumnType("nvarchar(max)");

                    b.Property<byte[]>("Timestamp")
                        .IsConcurrencyToken()
                        .IsRequired()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.Property<string>("UpdatedBy")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime?>("UpdatedOn")
                        .HasColumnType("datetime2");

                    b.Property<int>("VersionNumber")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("AutomationVersions");
                });

            modelBuilder.Entity("OpenBots.Server.Model.BinaryObject", b =>
                {
                    b.Property<Guid?>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ContentType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CorrelationEntity")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("CorrelationEntityId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime?>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeleteOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("DeletedBy")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Folder")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("HashCode")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool?>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("OrganizationId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<long?>("SizeInBytes")
                        .HasColumnType("bigint");

                    b.Property<string>("StoragePath")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("StorageProvider")
                        .HasColumnType("nvarchar(max)");

                    b.Property<byte[]>("Timestamp")
                        .IsConcurrencyToken()
                        .IsRequired()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.Property<string>("UpdatedBy")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime?>("UpdatedOn")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("BinaryObjects");
                });

            modelBuilder.Entity("OpenBots.Server.Model.Configuration.ConfigurationValue", b =>
                {
                    b.Property<Guid?>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime?>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeleteOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("DeletedBy")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool?>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<byte[]>("Timestamp")
                        .IsConcurrencyToken()
                        .IsRequired()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.Property<string>("UIHint")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UpdatedBy")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime?>("UpdatedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("ValidationRegex")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("ConfigurationValues");
                });

            modelBuilder.Entity("OpenBots.Server.Model.Configuration.Email", b =>
                {
                    b.Property<Guid?>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("ConversationId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime?>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeleteOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("DeletedBy")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Direction")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("EmailAccountId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("EmailObjectJson")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool?>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("Reason")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("ReplyToEmailId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("SenderAddress")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SenderName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("SenderUserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("SentOnUTC")
                        .HasColumnType("datetime2");

                    b.Property<string>("Status")
                        .HasColumnType("nvarchar(max)");

                    b.Property<byte[]>("Timestamp")
                        .IsConcurrencyToken()
                        .IsRequired()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.Property<string>("UpdatedBy")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime?>("UpdatedOn")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("Emails");
                });

            modelBuilder.Entity("OpenBots.Server.Model.Configuration.EmailAccount", b =>
                {
                    b.Property<Guid?>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ApiKey")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime?>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeleteOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("DeletedBy")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("EncryptedPassword")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("EndOnUTC")
                        .HasColumnType("datetime2");

                    b.Property<string>("FromEmailAddress")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FromName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Host")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsDefault")
                        .HasColumnType("bit");

                    b.Property<bool?>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDisabled")
                        .HasColumnType("bit");

                    b.Property<bool>("IsSslEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Port")
                        .HasColumnType("int");

                    b.Property<string>("Provider")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("StartOnUTC")
                        .HasColumnType("datetime2");

                    b.Property<byte[]>("Timestamp")
                        .IsConcurrencyToken()
                        .IsRequired()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.Property<string>("UpdatedBy")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime?>("UpdatedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("Username")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("EmailAccounts");
                });

            modelBuilder.Entity("OpenBots.Server.Model.Configuration.EmailSettings", b =>
                {
                    b.Property<Guid?>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("AddBCCAddress")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("AddCCAddress")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("AddToAddress")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("AllowedDomains")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("BlockedDomains")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("BodyAddPrefix")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("BodyAddSuffix")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime?>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeleteOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("DeletedBy")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<bool?>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<bool>("IsEmailDisabled")
                        .HasColumnType("bit");

                    b.Property<Guid>("OrganizationId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("SubjectAddPrefix")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SubjectAddSuffix")
                        .HasColumnType("nvarchar(max)");

                    b.Property<byte[]>("Timestamp")
                        .IsConcurrencyToken()
                        .IsRequired()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.Property<string>("UpdatedBy")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime?>("UpdatedOn")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("EmailSettings");
                });

            modelBuilder.Entity("OpenBots.Server.Model.Core.ApplicationVersion", b =>
                {
                    b.Property<Guid?>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasDefaultValueSql("newid()");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime?>("CreatedOn")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("getutcdate()");

                    b.Property<DateTime?>("DeleteOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("DeletedBy")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<bool?>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<int>("Major")
                        .HasColumnType("int");

                    b.Property<int?>("Minor")
                        .IsRequired()
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int?>("Patch")
                        .IsRequired()
                        .HasColumnType("int");

                    b.Property<byte[]>("Timestamp")
                        .IsConcurrencyToken()
                        .IsRequired()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.Property<string>("UpdatedBy")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime?>("UpdatedOn")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("AppVersion");
                });

            modelBuilder.Entity("OpenBots.Server.Model.Core.EmailAttachment", b =>
                {
                    b.Property<Guid?>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ContentStorageAddress")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ContentType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime?>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeleteOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("DeletedBy")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<Guid>("EmailId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("FileId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool?>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<long?>("SizeInBytes")
                        .HasColumnType("bigint");

                    b.Property<byte[]>("Timestamp")
                        .IsConcurrencyToken()
                        .IsRequired()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.Property<string>("UpdatedBy")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime?>("UpdatedOn")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("EmailAttachments");
                });

            modelBuilder.Entity("OpenBots.Server.Model.Core.LookupValue", b =>
                {
                    b.Property<Guid?>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasDefaultValueSql("newid()");

                    b.Property<string>("CodeType")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime?>("CreatedOn")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("getutcdate()");

                    b.Property<DateTime?>("DeleteOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("DeletedBy")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<bool?>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<string>("LookupCode")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LookupDesc")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("OrganizationId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int?>("SequenceOrder")
                        .HasColumnType("int");

                    b.Property<byte[]>("Timestamp")
                        .IsConcurrencyToken()
                        .IsRequired()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.Property<string>("UpdatedBy")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime?>("UpdatedOn")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("LookupValues");
                });

            modelBuilder.Entity("OpenBots.Server.Model.Credential", b =>
                {
                    b.Property<Guid?>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Certificate")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime?>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeleteOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("DeletedBy")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Domain")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("EndDate")
                        .HasColumnType("datetime2");

                    b.Property<bool?>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PasswordSecret")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Provider")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("StartDate")
                        .HasColumnType("datetime2");

                    b.Property<byte[]>("Timestamp")
                        .IsConcurrencyToken()
                        .IsRequired()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.Property<string>("UpdatedBy")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime?>("UpdatedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("UserName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Credentials");
                });

            modelBuilder.Entity("OpenBots.Server.Model.File.FileAttribute", b =>
                {
                    b.Property<Guid?>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("AttributeValue")
                        .HasColumnType("int");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime?>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("DataType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("DeleteOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("DeletedBy")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<bool?>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<Guid?>("OrganizationId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("StorageDriveId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("StorageFileId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<byte[]>("Timestamp")
                        .IsConcurrencyToken()
                        .IsRequired()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.Property<string>("UpdatedBy")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime?>("UpdatedOn")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("StorageFileId");

                    b.ToTable("FileAttributes");
                });

            modelBuilder.Entity("OpenBots.Server.Model.File.StorageDrive", b =>
                {
                    b.Property<Guid?>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime?>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeleteOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("DeletedBy")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("FileStorageAdapterType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool?>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<Guid?>("OrganizationId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("StoragePath")
                        .HasColumnType("nvarchar(max)");

                    b.Property<long?>("StorageSizeInBytes")
                        .HasColumnType("bigint");

                    b.Property<byte[]>("Timestamp")
                        .IsConcurrencyToken()
                        .IsRequired()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.Property<string>("UpdatedBy")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime?>("UpdatedOn")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("StorageDrives");
                });

            modelBuilder.Entity("OpenBots.Server.Model.File.StorageFile", b =>
                {
                    b.Property<Guid?>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ContentType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime?>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeleteOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("DeletedBy")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("HashCode")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool?>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<Guid?>("OrganizationId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<long?>("SizeInBytes")
                        .HasColumnType("bigint");

                    b.Property<Guid?>("StorageDriveId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("StorageFolderId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("StoragePath")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("StorageProvider")
                        .HasColumnType("nvarchar(max)");

                    b.Property<byte[]>("Timestamp")
                        .IsConcurrencyToken()
                        .IsRequired()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.Property<string>("UpdatedBy")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime?>("UpdatedOn")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("StorageFiles");
                });

            modelBuilder.Entity("OpenBots.Server.Model.File.StorageFolder", b =>
                {
                    b.Property<Guid?>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime?>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeleteOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("DeletedBy")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<bool?>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<Guid?>("OrganizationId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("ParentFolderId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<long?>("SizeInBytes")
                        .HasColumnType("bigint");

                    b.Property<Guid?>("StorageDriveId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("StoragePath")
                        .HasColumnType("nvarchar(max)");

                    b.Property<byte[]>("Timestamp")
                        .IsConcurrencyToken()
                        .IsRequired()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.Property<string>("UpdatedBy")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime?>("UpdatedOn")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("StorageFolders");
                });

            modelBuilder.Entity("OpenBots.Server.Model.IPFencing", b =>
                {
                    b.Property<Guid?>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime?>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeleteOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("DeletedBy")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("HeaderName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("HeaderValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("IPAddress")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("IPRange")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool?>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<Guid?>("OrganizationId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Rule")
                        .HasColumnType("int");

                    b.Property<byte[]>("Timestamp")
                        .IsConcurrencyToken()
                        .IsRequired()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.Property<string>("UpdatedBy")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime?>("UpdatedOn")
                        .HasColumnType("datetime2");

                    b.Property<int>("Usage")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("IPFencings");
                });

            modelBuilder.Entity("OpenBots.Server.Model.Identity.EmailVerification", b =>
                {
                    b.Property<Guid?>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasDefaultValueSql("newid()");

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime?>("CreatedOn")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("getutcdate()");

                    b.Property<DateTime?>("DeleteOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("DeletedBy")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<bool?>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<bool?>("IsVerificationEmailSent")
                        .HasColumnType("bit");

                    b.Property<bool?>("IsVerified")
                        .HasColumnType("bit");

                    b.Property<Guid?>("PersonId")
                        .IsRequired()
                        .HasColumnType("uniqueidentifier");

                    b.Property<byte[]>("Timestamp")
                        .IsConcurrencyToken()
                        .IsRequired()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.Property<string>("UpdatedBy")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime?>("UpdatedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("VerificationCode")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime?>("VerificationCodeExpiresOn")
                        .HasColumnType("datetime2");

                    b.Property<int>("VerificationEmailCount")
                        .HasColumnType("int");

                    b.Property<DateTime?>("VerificationSentOn")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("PersonId");

                    b.ToTable("EmailVerifications");
                });

            modelBuilder.Entity("OpenBots.Server.Model.Identity.PasswordPolicy", b =>
                {
                    b.Property<Guid?>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasDefaultValueSql("newid()");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime?>("CreatedOn")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("getutcdate()");

                    b.Property<DateTime?>("DeleteOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("DeletedBy")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<bool?>("EnableExpiration")
                        .HasColumnType("bit");

                    b.Property<int?>("ExpiresInDays")
                        .HasColumnType("int");

                    b.Property<bool?>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<int?>("MinimumLength")
                        .HasColumnType("int");

                    b.Property<bool?>("RequireAtleastOneLowercase")
                        .HasColumnType("bit");

                    b.Property<bool?>("RequireAtleastOneNonAlpha")
                        .HasColumnType("bit");

                    b.Property<bool?>("RequireAtleastOneNumber")
                        .HasColumnType("bit");

                    b.Property<bool?>("RequireAtleastOneUppercase")
                        .HasColumnType("bit");

                    b.Property<byte[]>("Timestamp")
                        .IsConcurrencyToken()
                        .IsRequired()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.Property<string>("UpdatedBy")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime?>("UpdatedOn")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("PasswordPolicies");
                });

            modelBuilder.Entity("OpenBots.Server.Model.Identity.Person", b =>
                {
                    b.Property<Guid?>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasDefaultValueSql("newid()");

                    b.Property<string>("Company")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime?>("CreatedOn")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("getutcdate()");

                    b.Property<DateTime?>("DeleteOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("DeletedBy")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Department")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FirstName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsAgent")
                        .HasColumnType("bit");

                    b.Property<bool?>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<string>("LastName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<byte[]>("Timestamp")
                        .IsConcurrencyToken()
                        .IsRequired()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.Property<string>("UpdatedBy")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime?>("UpdatedOn")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("People");
                });

            modelBuilder.Entity("OpenBots.Server.Model.Identity.PersonCredential", b =>
                {
                    b.Property<Guid?>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasDefaultValueSql("newid()");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime?>("CreatedOn")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("getutcdate()");

                    b.Property<DateTime?>("DeleteOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("DeletedBy")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime?>("ExpiresOnUTC")
                        .HasColumnType("datetime2");

                    b.Property<bool?>("ForceChange")
                        .HasColumnType("bit");

                    b.Property<bool?>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<bool?>("IsExpired")
                        .HasColumnType("bit");

                    b.Property<Guid?>("PersonId")
                        .IsRequired()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Salt")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Secret")
                        .HasColumnType("nvarchar(max)");

                    b.Property<byte[]>("Timestamp")
                        .IsConcurrencyToken()
                        .IsRequired()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.Property<string>("UpdatedBy")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime?>("UpdatedOn")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("PersonId");

                    b.ToTable("PersonCredentials");
                });

            modelBuilder.Entity("OpenBots.Server.Model.Identity.PersonEmail", b =>
                {
                    b.Property<Guid?>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasDefaultValueSql("newid()");

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime?>("CreatedOn")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("getutcdate()");

                    b.Property<DateTime?>("DeleteOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("DeletedBy")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<Guid?>("EmailVerificationId")
                        .IsRequired()
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool?>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<bool>("IsPrimaryEmail")
                        .HasColumnType("bit");

                    b.Property<Guid?>("PersonId")
                        .IsRequired()
                        .HasColumnType("uniqueidentifier");

                    b.Property<byte[]>("Timestamp")
                        .IsConcurrencyToken()
                        .IsRequired()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.Property<string>("UpdatedBy")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime?>("UpdatedOn")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("PersonId");

                    b.ToTable("PersonEmails");
                });

            modelBuilder.Entity("OpenBots.Server.Model.Identity.UserAgreement", b =>
                {
                    b.Property<Guid?>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasDefaultValueSql("newid()");

                    b.Property<string>("ContentStaticUrl")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime?>("CreatedOn")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("getutcdate()");

                    b.Property<DateTime?>("DeleteOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("DeletedBy")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime?>("EffectiveOnUTC")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("ExpiresOnUTC")
                        .HasColumnType("datetime2");

                    b.Property<bool?>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<byte[]>("Timestamp")
                        .IsConcurrencyToken()
                        .IsRequired()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UpdatedBy")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime?>("UpdatedOn")
                        .HasColumnType("datetime2");

                    b.Property<int?>("Version")
                        .IsRequired()
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("UserAgreements");
                });

            modelBuilder.Entity("OpenBots.Server.Model.Identity.UserConsent", b =>
                {
                    b.Property<Guid?>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasDefaultValueSql("newid()");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime?>("CreatedOn")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("getutcdate()");

                    b.Property<DateTime?>("DeleteOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("DeletedBy")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime?>("ExpiresOnUTC")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsAccepted")
                        .HasColumnType("bit");

                    b.Property<bool?>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<Guid?>("PersonId")
                        .IsRequired()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("RecordedOn")
                        .HasColumnType("datetime2");

                    b.Property<byte[]>("Timestamp")
                        .IsConcurrencyToken()
                        .IsRequired()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.Property<string>("UpdatedBy")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime?>("UpdatedOn")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("UserAgreementID")
                        .IsRequired()
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("PersonId");

                    b.HasIndex("UserAgreementID");

                    b.ToTable("UserConsents");
                });

            modelBuilder.Entity("OpenBots.Server.Model.Job", b =>
                {
                    b.Property<Guid?>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("AgentGroupId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("AgentId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("AutomationExecutionLogCount")
                        .HasColumnType("int");

                    b.Property<Guid?>("AutomationId")
                        .IsRequired()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("AutomationLogCount")
                        .HasColumnType("int");

                    b.Property<int?>("AutomationVersion")
                        .IsRequired()
                        .HasColumnType("int");

                    b.Property<Guid?>("AutomationVersionId")
                        .IsRequired()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime?>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeleteOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("DeletedBy")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime?>("DequeueTime")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("EndTime")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("EnqueueTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("ErrorCode")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ErrorReason")
                        .HasColumnType("nvarchar(max)");

                    b.Property<double?>("ExecutionTimeInMinutes")
                        .HasColumnType("float");

                    b.Property<bool?>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<bool?>("IsSuccessful")
                        .HasColumnType("bit");

                    b.Property<int?>("JobStatus")
                        .HasColumnType("int");

                    b.Property<string>("Message")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("ScheduleId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("SerializedErrorString")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("StartTime")
                        .HasColumnType("datetime2");

                    b.Property<byte[]>("Timestamp")
                        .IsConcurrencyToken()
                        .IsRequired()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.Property<string>("UpdatedBy")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime?>("UpdatedOn")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("Jobs");
                });

            modelBuilder.Entity("OpenBots.Server.Model.JobCheckpoint", b =>
                {
                    b.Property<Guid?>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime?>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeleteOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("DeletedBy")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<bool?>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("Iterator")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("IteratorCount")
                        .HasColumnType("int");

                    b.Property<int?>("IteratorPosition")
                        .HasColumnType("int");

                    b.Property<string>("IteratorValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("JobId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Message")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<byte[]>("Timestamp")
                        .IsConcurrencyToken()
                        .IsRequired()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.Property<string>("UpdatedBy")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime?>("UpdatedOn")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("JobCheckpoints");
                });

            modelBuilder.Entity("OpenBots.Server.Model.JobParameter", b =>
                {
                    b.Property<Guid?>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime?>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("DataType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("DeleteOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("DeletedBy")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<bool?>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<Guid>("JobId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<byte[]>("Timestamp")
                        .IsConcurrencyToken()
                        .IsRequired()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.Property<string>("UpdatedBy")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime?>("UpdatedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("JobParameters");
                });

            modelBuilder.Entity("OpenBots.Server.Model.Membership.AccessRequest", b =>
                {
                    b.Property<Guid?>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasDefaultValueSql("newid()");

                    b.Property<DateTime?>("AccessRequestedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime?>("CreatedOn")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("getutcdate()");

                    b.Property<DateTime?>("DeleteOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("DeletedBy")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<bool?>("IsAccessRequested")
                        .HasColumnType("bit");

                    b.Property<bool?>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<Guid?>("OrganizationId")
                        .IsRequired()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("PersonId")
                        .IsRequired()
                        .HasColumnType("uniqueidentifier");

                    b.Property<byte[]>("Timestamp")
                        .IsConcurrencyToken()
                        .IsRequired()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.Property<string>("UpdatedBy")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime?>("UpdatedOn")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("OrganizationId");

                    b.HasIndex("PersonId");

                    b.ToTable("AccessRequests");
                });

            modelBuilder.Entity("OpenBots.Server.Model.Membership.Organization", b =>
                {
                    b.Property<Guid?>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasDefaultValueSql("newid()");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime?>("CreatedOn")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("getutcdate()");

                    b.Property<DateTime?>("DeleteOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("DeletedBy")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Description")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<bool?>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<byte[]>("Timestamp")
                        .IsConcurrencyToken()
                        .IsRequired()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.Property<string>("UpdatedBy")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime?>("UpdatedOn")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("Organizations");
                });

            modelBuilder.Entity("OpenBots.Server.Model.Membership.OrganizationMember", b =>
                {
                    b.Property<Guid?>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasDefaultValueSql("newid()");

                    b.Property<string>("ApprovedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("ApprovedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime?>("CreatedOn")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("getutcdate()");

                    b.Property<DateTime?>("DeleteOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("DeletedBy")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<bool?>("InviteAccepted")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("InviteAcceptedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("InvitedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("InvitedOn")
                        .HasColumnType("datetime2");

                    b.Property<bool?>("IsAdministrator")
                        .HasColumnType("bit");

                    b.Property<bool?>("IsAutoApprovedByEmailAddress")
                        .HasColumnType("bit");

                    b.Property<bool?>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<bool?>("IsInvited")
                        .HasColumnType("bit");

                    b.Property<Guid?>("OrganizationId")
                        .IsRequired()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("PersonId")
                        .IsRequired()
                        .HasColumnType("uniqueidentifier");

                    b.Property<byte[]>("Timestamp")
                        .IsConcurrencyToken()
                        .IsRequired()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.Property<string>("UpdatedBy")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime?>("UpdatedOn")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("OrganizationId");

                    b.HasIndex("PersonId");

                    b.ToTable("OrganizationMembers");
                });

            modelBuilder.Entity("OpenBots.Server.Model.Membership.OrganizationSetting", b =>
                {
                    b.Property<Guid?>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasDefaultValueSql("newid()");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime?>("CreatedOn")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("getutcdate()");

                    b.Property<DateTime?>("DeleteOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("DeletedBy")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<bool>("DisallowAllExecutions")
                        .HasColumnType("bit");

                    b.Property<string>("DisallowAllExecutionsMessage")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("DisallowAllExecutionsReason")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("IPFencingMode")
                        .HasColumnType("int");

                    b.Property<bool?>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<Guid?>("OrganizationId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("StorageLocation")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TimeZone")
                        .HasColumnType("nvarchar(max)");

                    b.Property<byte[]>("Timestamp")
                        .IsConcurrencyToken()
                        .IsRequired()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.Property<string>("UpdatedBy")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime?>("UpdatedOn")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("OrganizationId");

                    b.ToTable("OrganizationSettings");
                });

            modelBuilder.Entity("OpenBots.Server.Model.Membership.OrganizationUnit", b =>
                {
                    b.Property<Guid?>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasDefaultValueSql("newid()");

                    b.Property<bool?>("CanDelete")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValueSql("1");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime?>("CreatedOn")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("getutcdate()");

                    b.Property<DateTime?>("DeleteOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("DeletedBy")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Description")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<bool?>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<bool?>("IsVisibleToAllOrganizationMembers")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<Guid?>("OrganizationId")
                        .IsRequired()
                        .HasColumnType("uniqueidentifier");

                    b.Property<byte[]>("Timestamp")
                        .IsConcurrencyToken()
                        .IsRequired()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.Property<string>("UpdatedBy")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime?>("UpdatedOn")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("OrganizationId", "Name")
                        .IsUnique();

                    b.ToTable("OrganizationUnits");
                });

            modelBuilder.Entity("OpenBots.Server.Model.Membership.OrganizationUnitMember", b =>
                {
                    b.Property<Guid?>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasDefaultValueSql("newid()");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime?>("CreatedOn")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("getutcdate()");

                    b.Property<DateTime?>("DeleteOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("DeletedBy")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<bool?>("IsAdministrator")
                        .HasColumnType("bit");

                    b.Property<bool?>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<Guid?>("OrganizationId")
                        .IsRequired()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("OrganizationUnitId")
                        .IsRequired()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("PersonId")
                        .IsRequired()
                        .HasColumnType("uniqueidentifier");

                    b.Property<byte[]>("Timestamp")
                        .IsConcurrencyToken()
                        .IsRequired()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.Property<string>("UpdatedBy")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime?>("UpdatedOn")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("OrganizationId");

                    b.HasIndex("OrganizationUnitId");

                    b.HasIndex("PersonId");

                    b.ToTable("OrganizationUnitMembers");
                });

            modelBuilder.Entity("OpenBots.Server.Model.Queue", b =>
                {
                    b.Property<Guid?>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime?>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeleteOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("DeletedBy")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool?>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<int>("MaxRetryCount")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<byte[]>("Timestamp")
                        .IsConcurrencyToken()
                        .IsRequired()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.Property<string>("UpdatedBy")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime?>("UpdatedOn")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("Queues");
                });

            modelBuilder.Entity("OpenBots.Server.Model.QueueItem", b =>
                {
                    b.Property<Guid?>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime?>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("DataJson")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("DeleteOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("DeletedBy")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("ErrorCode")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ErrorMessage")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ErrorSerialized")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Event")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("ExpireOnUTC")
                        .HasColumnType("datetime2");

                    b.Property<bool?>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<bool>("IsLocked")
                        .HasColumnType("bit");

                    b.Property<string>("JsonType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("LockTransactionKey")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("LockedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("LockedEndTimeUTC")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("LockedOnUTC")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("LockedUntilUTC")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<long>("PayloadSizeInBytes")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("PostponeUntilUTC")
                        .HasColumnType("datetime2");

                    b.Property<int>("Priority")
                        .HasColumnType("int");

                    b.Property<Guid>("QueueId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ResultJSON")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("RetryCount")
                        .HasColumnType("int");

                    b.Property<string>("Source")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("State")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("StateMessage")
                        .HasColumnType("nvarchar(max)");

                    b.Property<byte[]>("Timestamp")
                        .IsConcurrencyToken()
                        .IsRequired()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.Property<string>("Type")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UpdatedBy")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime?>("UpdatedOn")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("QueueItems");
                });

            modelBuilder.Entity("OpenBots.Server.Model.QueueItemAttachment", b =>
                {
                    b.Property<Guid?>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime?>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeleteOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("DeletedBy")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<Guid>("FileId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool?>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<Guid>("QueueItemId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<long>("SizeInBytes")
                        .HasColumnType("bigint");

                    b.Property<byte[]>("Timestamp")
                        .IsConcurrencyToken()
                        .IsRequired()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.Property<string>("UpdatedBy")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime?>("UpdatedOn")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("QueueItemAttachments");
                });

            modelBuilder.Entity("OpenBots.Server.Model.Schedule", b =>
                {
                    b.Property<Guid?>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("AgentGroupId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("AgentId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("AutomationId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("CRONExpression")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CRONExpressionTimeZone")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime?>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeleteOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("DeletedBy")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime?>("EndJobAtOccurence")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("EndJobOn")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("ExpiryDate")
                        .HasColumnType("datetime2");

                    b.Property<bool?>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<bool?>("IsDisabled")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("JobRecurEveryUnit")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("LastExecution")
                        .HasColumnType("datetime2");

                    b.Property<int?>("MaxRunningJobs")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime?>("NextExecution")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("NoJobEndDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("ProjectId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("QueueId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool?>("Recurrence")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("RecurrenceUnit")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("StartDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("StartJobOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("StartingType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Status")
                        .HasColumnType("nvarchar(max)");

                    b.Property<byte[]>("Timestamp")
                        .IsConcurrencyToken()
                        .IsRequired()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.Property<string>("TriggerName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UpdatedBy")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime?>("UpdatedOn")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("Schedules");
                });

            modelBuilder.Entity("OpenBots.Server.Model.ScheduleParameter", b =>
                {
                    b.Property<Guid?>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime?>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("DataType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("DeleteOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("DeletedBy")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<bool?>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<Guid>("ScheduleId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<byte[]>("Timestamp")
                        .IsConcurrencyToken()
                        .IsRequired()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.Property<string>("UpdatedBy")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime?>("UpdatedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("ScheduleParameters");
                });

            modelBuilder.Entity("OpenBots.Server.Model.TimeZoneId", b =>
                {
                    b.Property<Guid?>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime?>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeleteOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("DeletedBy")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<bool?>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("LinuxTimeZone")
                        .HasColumnType("nvarchar(max)");

                    b.Property<byte[]>("Timestamp")
                        .IsConcurrencyToken()
                        .IsRequired()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.Property<string>("UpdatedBy")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime?>("UpdatedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("WindowsTimeZone")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("TimeZoneIds");

                    b.HasData(
                        new
                        {
                            Id = new Guid("2b35692d-7f9f-4d21-890c-76cbd1acb684"),
                            CreatedBy = "",
                            DeletedBy = "",
                            IsDeleted = false,
                            LinuxTimeZone = "Etc/GMT+12",
                            Timestamp = new byte[] { 0 },
                            WindowsTimeZone = "Dateline Standard Time"
                        },
                        new
                        {
                            Id = new Guid("1f1b49ba-42fe-4ebc-8a04-a0f284bab4fa"),
                            CreatedBy = "",
                            DeletedBy = "",
                            IsDeleted = false,
                            LinuxTimeZone = "Etc/GMT+11",
                            Timestamp = new byte[] { 0 },
                            WindowsTimeZone = "UTC-11"
                        },
                        new
                        {
                            Id = new Guid("bc04578d-cf07-4b47-8c63-dff36e627d7a"),
                            CreatedBy = "",
                            DeletedBy = "",
                            IsDeleted = false,
                            LinuxTimeZone = "America/Adak",
                            Timestamp = new byte[] { 0 },
                            WindowsTimeZone = "Aleutian Standard Time"
                        },
                        new
                        {
                            Id = new Guid("8ee1dbc3-3e8f-43e6-8c3a-5c29ab0a16d4"),
                            CreatedBy = "",
                            DeletedBy = "",
                            IsDeleted = false,
                            LinuxTimeZone = "Pacific/Honolulu",
                            Timestamp = new byte[] { 0 },
                            WindowsTimeZone = "Hawaiian Standard Time"
                        },
                        new
                        {
                            Id = new Guid("a6f0e54a-15b5-403a-98a5-5215b49f5eb3"),
                            CreatedBy = "",
                            DeletedBy = "",
                            IsDeleted = false,
                            LinuxTimeZone = "Pacific/Marquesas",
                            Timestamp = new byte[] { 0 },
                            WindowsTimeZone = "Marquesas Standard Time"
                        },
                        new
                        {
                            Id = new Guid("14f88b2b-050e-41d8-954b-f238c833c2e1"),
                            CreatedBy = "",
                            DeletedBy = "",
                            IsDeleted = false,
                            LinuxTimeZone = "America/Anchorage",
                            Timestamp = new byte[] { 0 },
                            WindowsTimeZone = "Alaskan Standard Time"
                        },
                        new
                        {
                            Id = new Guid("da977f50-6106-4571-9c09-aed5f6d6681a"),
                            CreatedBy = "",
                            DeletedBy = "",
                            IsDeleted = false,
                            LinuxTimeZone = "Etc/GMT+9",
                            Timestamp = new byte[] { 0 },
                            WindowsTimeZone = "UTC-09"
                        },
                        new
                        {
                            Id = new Guid("ea815bcf-045d-499a-859a-88415dde3762"),
                            CreatedBy = "",
                            DeletedBy = "",
                            IsDeleted = false,
                            LinuxTimeZone = "America/Tijuana",
                            Timestamp = new byte[] { 0 },
                            WindowsTimeZone = "Pacific Standard Time (Mexico)"
                        },
                        new
                        {
                            Id = new Guid("87346558-d1fc-4abe-8a88-cca1155059ea"),
                            CreatedBy = "",
                            DeletedBy = "",
                            IsDeleted = false,
                            LinuxTimeZone = "Etc/GMT+8",
                            Timestamp = new byte[] { 0 },
                            WindowsTimeZone = "UTC-08"
                        },
                        new
                        {
                            Id = new Guid("007b8faf-d2ff-48dd-89fc-326f8ce378a6"),
                            CreatedBy = "",
                            DeletedBy = "",
                            IsDeleted = false,
                            LinuxTimeZone = "America/Los_Angeles",
                            Timestamp = new byte[] { 0 },
                            WindowsTimeZone = "Pacific Standard Time"
                        },
                        new
                        {
                            Id = new Guid("3cc6aff3-0ee0-4a1b-bdb9-52327f91499b"),
                            CreatedBy = "",
                            DeletedBy = "",
                            IsDeleted = false,
                            LinuxTimeZone = "America/Phoenix",
                            Timestamp = new byte[] { 0 },
                            WindowsTimeZone = "US Mountain Standard Time"
                        },
                        new
                        {
                            Id = new Guid("2a48c9c9-53bb-41d2-8d5d-97a0d65e05b9"),
                            CreatedBy = "",
                            DeletedBy = "",
                            IsDeleted = false,
                            LinuxTimeZone = "America/Chihuahua",
                            Timestamp = new byte[] { 0 },
                            WindowsTimeZone = "Mountain Standard Time (Mexico)"
                        },
                        new
                        {
                            Id = new Guid("6707ce53-1823-4a3e-ab44-c7b69f666b55"),
                            CreatedBy = "",
                            DeletedBy = "",
                            IsDeleted = false,
                            LinuxTimeZone = "America/Denver",
                            Timestamp = new byte[] { 0 },
                            WindowsTimeZone = "Mountain Standard Time"
                        },
                        new
                        {
                            Id = new Guid("3b8c4662-c0db-4f78-97d5-14bb57e4ba4d"),
                            CreatedBy = "",
                            DeletedBy = "",
                            IsDeleted = false,
                            LinuxTimeZone = "America/Guatemala",
                            Timestamp = new byte[] { 0 },
                            WindowsTimeZone = "Central America Standard Time"
                        },
                        new
                        {
                            Id = new Guid("52ed8785-b9bc-4f8e-a0a8-87d062a923ee"),
                            CreatedBy = "",
                            DeletedBy = "",
                            IsDeleted = false,
                            LinuxTimeZone = "America/Chicago",
                            Timestamp = new byte[] { 0 },
                            WindowsTimeZone = "Central Standard Time"
                        },
                        new
                        {
                            Id = new Guid("b50bcda1-4f29-42a9-bc94-ec22094821d3"),
                            CreatedBy = "",
                            DeletedBy = "",
                            IsDeleted = false,
                            LinuxTimeZone = "Pacific/Easter",
                            Timestamp = new byte[] { 0 },
                            WindowsTimeZone = "Easter Island Standard Time"
                        },
                        new
                        {
                            Id = new Guid("b067b3aa-cf05-4f6a-8afc-1d0468ea9d47"),
                            CreatedBy = "",
                            DeletedBy = "",
                            IsDeleted = false,
                            LinuxTimeZone = "America/Mexico_City",
                            Timestamp = new byte[] { 0 },
                            WindowsTimeZone = "Central Standard Time (Mexico)"
                        },
                        new
                        {
                            Id = new Guid("6facd92b-35e7-4330-b5f6-66cc10fb906f"),
                            CreatedBy = "",
                            DeletedBy = "",
                            IsDeleted = false,
                            LinuxTimeZone = "America/Regina",
                            Timestamp = new byte[] { 0 },
                            WindowsTimeZone = "Canada Central Standard Time"
                        },
                        new
                        {
                            Id = new Guid("7082877a-dfb1-4dea-8dfb-753a6bb1498a"),
                            CreatedBy = "",
                            DeletedBy = "",
                            IsDeleted = false,
                            LinuxTimeZone = "America/Bogota",
                            Timestamp = new byte[] { 0 },
                            WindowsTimeZone = "SA Pacific Standard Time"
                        },
                        new
                        {
                            Id = new Guid("aca817d9-d6bd-4f47-b9ab-c2330155d6f5"),
                            CreatedBy = "",
                            DeletedBy = "",
                            IsDeleted = false,
                            LinuxTimeZone = "America/Cancun",
                            Timestamp = new byte[] { 0 },
                            WindowsTimeZone = "Eastern Standard Time (Mexico)"
                        },
                        new
                        {
                            Id = new Guid("595c42d5-b121-4928-90f1-3b84ecc46dc8"),
                            CreatedBy = "",
                            DeletedBy = "",
                            IsDeleted = false,
                            LinuxTimeZone = "America/New_York",
                            Timestamp = new byte[] { 0 },
                            WindowsTimeZone = "Eastern Standard Time"
                        },
                        new
                        {
                            Id = new Guid("72192e08-441c-4894-a9eb-abd288e0ee5a"),
                            CreatedBy = "",
                            DeletedBy = "",
                            IsDeleted = false,
                            LinuxTimeZone = "America/Port-au-Prince",
                            Timestamp = new byte[] { 0 },
                            WindowsTimeZone = "Haiti Standard Time"
                        },
                        new
                        {
                            Id = new Guid("057b7481-411e-4844-8c61-356bf72421f4"),
                            CreatedBy = "",
                            DeletedBy = "",
                            IsDeleted = false,
                            LinuxTimeZone = "America/Havana",
                            Timestamp = new byte[] { 0 },
                            WindowsTimeZone = "Cuba Standard Time"
                        },
                        new
                        {
                            Id = new Guid("8a80206b-ff9d-4032-aa22-191b45d1062a"),
                            CreatedBy = "",
                            DeletedBy = "",
                            IsDeleted = false,
                            LinuxTimeZone = "America/Indiana/Indianapolis",
                            Timestamp = new byte[] { 0 },
                            WindowsTimeZone = "US Eastern Standard Time"
                        },
                        new
                        {
                            Id = new Guid("b51086ff-d5d9-49a0-81ad-bfd9df653147"),
                            CreatedBy = "",
                            DeletedBy = "",
                            IsDeleted = false,
                            LinuxTimeZone = "America/Grand_Turk",
                            Timestamp = new byte[] { 0 },
                            WindowsTimeZone = "Turks And Caicos Standard Time"
                        },
                        new
                        {
                            Id = new Guid("a55a539d-5019-4481-93c4-76382ae9f11a"),
                            CreatedBy = "",
                            DeletedBy = "",
                            IsDeleted = false,
                            LinuxTimeZone = "America/Asuncion",
                            Timestamp = new byte[] { 0 },
                            WindowsTimeZone = "Paraguay Standard Time"
                        },
                        new
                        {
                            Id = new Guid("22c0747e-130b-4dcd-aa59-8ebc1647c1bc"),
                            CreatedBy = "",
                            DeletedBy = "",
                            IsDeleted = false,
                            LinuxTimeZone = "America/Halifax",
                            Timestamp = new byte[] { 0 },
                            WindowsTimeZone = "Atlantic Standard Time"
                        },
                        new
                        {
                            Id = new Guid("510d78f1-767b-4b1f-a7c8-bd0c6929ece1"),
                            CreatedBy = "",
                            DeletedBy = "",
                            IsDeleted = false,
                            LinuxTimeZone = "America/Caracas",
                            Timestamp = new byte[] { 0 },
                            WindowsTimeZone = "Venezuela Standard Time"
                        },
                        new
                        {
                            Id = new Guid("ea409e06-e791-42a1-b9ee-ed139f0949d8"),
                            CreatedBy = "",
                            DeletedBy = "",
                            IsDeleted = false,
                            LinuxTimeZone = "America/Cuiaba",
                            Timestamp = new byte[] { 0 },
                            WindowsTimeZone = "Central Brazilian Standard Time"
                        },
                        new
                        {
                            Id = new Guid("5c249f6d-54b9-4668-9aff-6dd901cea611"),
                            CreatedBy = "",
                            DeletedBy = "",
                            IsDeleted = false,
                            LinuxTimeZone = "America/La_Paz",
                            Timestamp = new byte[] { 0 },
                            WindowsTimeZone = "SA Western Standard Time"
                        },
                        new
                        {
                            Id = new Guid("523dc3bf-d466-4dc9-8026-4f903698687d"),
                            CreatedBy = "",
                            DeletedBy = "",
                            IsDeleted = false,
                            LinuxTimeZone = "America/Santiago",
                            Timestamp = new byte[] { 0 },
                            WindowsTimeZone = "Pacific SA Standard Time"
                        },
                        new
                        {
                            Id = new Guid("ec4d615c-ac2f-43ae-bf20-5342abcb7e9d"),
                            CreatedBy = "",
                            DeletedBy = "",
                            IsDeleted = false,
                            LinuxTimeZone = "America/St_Johns",
                            Timestamp = new byte[] { 0 },
                            WindowsTimeZone = "Newfoundland Standard Time"
                        },
                        new
                        {
                            Id = new Guid("07d91ce7-6172-4bb9-839d-0e065b15537d"),
                            CreatedBy = "",
                            DeletedBy = "",
                            IsDeleted = false,
                            LinuxTimeZone = "America/Araguaina",
                            Timestamp = new byte[] { 0 },
                            WindowsTimeZone = "Tocantins Standard Time"
                        },
                        new
                        {
                            Id = new Guid("8ce50175-08d5-4ed4-8179-4799a769bc16"),
                            CreatedBy = "",
                            DeletedBy = "",
                            IsDeleted = false,
                            LinuxTimeZone = "America/Sao_Paulo",
                            Timestamp = new byte[] { 0 },
                            WindowsTimeZone = "E. South America Standard Time"
                        },
                        new
                        {
                            Id = new Guid("ac15fc92-8675-4066-83bd-6d1c4b4f653e"),
                            CreatedBy = "",
                            DeletedBy = "",
                            IsDeleted = false,
                            LinuxTimeZone = "America/Cayenne",
                            Timestamp = new byte[] { 0 },
                            WindowsTimeZone = "SA Eastern Standard Time"
                        },
                        new
                        {
                            Id = new Guid("d88794b9-b7c9-44c2-9d15-a5090ccf203b"),
                            CreatedBy = "",
                            DeletedBy = "",
                            IsDeleted = false,
                            LinuxTimeZone = "America/Argentina/Buenos_Aires",
                            Timestamp = new byte[] { 0 },
                            WindowsTimeZone = "Argentina Standard Time"
                        },
                        new
                        {
                            Id = new Guid("b38139b2-1732-4f60-a0ee-02b7f260c6be"),
                            CreatedBy = "",
                            DeletedBy = "",
                            IsDeleted = false,
                            LinuxTimeZone = "America/Godthab",
                            Timestamp = new byte[] { 0 },
                            WindowsTimeZone = "Greenland Standard Time"
                        },
                        new
                        {
                            Id = new Guid("1137b09c-f374-4d12-83b0-738dd3df13db"),
                            CreatedBy = "",
                            DeletedBy = "",
                            IsDeleted = false,
                            LinuxTimeZone = "America/Montevideo",
                            Timestamp = new byte[] { 0 },
                            WindowsTimeZone = "Montevideo Standard Time"
                        },
                        new
                        {
                            Id = new Guid("6295312e-24c1-45f6-9d47-450cf1499b77"),
                            CreatedBy = "",
                            DeletedBy = "",
                            IsDeleted = false,
                            LinuxTimeZone = "America/Punta_Arenas",
                            Timestamp = new byte[] { 0 },
                            WindowsTimeZone = "Magallanes Standard Time"
                        },
                        new
                        {
                            Id = new Guid("a48e6175-2a6b-4e0d-8dfe-c42fe3ab8a9a"),
                            CreatedBy = "",
                            DeletedBy = "",
                            IsDeleted = false,
                            LinuxTimeZone = "America/Miquelon",
                            Timestamp = new byte[] { 0 },
                            WindowsTimeZone = "Saint Pierre Standard Time"
                        },
                        new
                        {
                            Id = new Guid("60c50feb-5910-4f52-9708-7c04b481be9a"),
                            CreatedBy = "",
                            DeletedBy = "",
                            IsDeleted = false,
                            LinuxTimeZone = "America/Bahia",
                            Timestamp = new byte[] { 0 },
                            WindowsTimeZone = "Bahia Standard Time"
                        },
                        new
                        {
                            Id = new Guid("794f7afb-10e4-4c44-a31c-f3aaa5abd3c1"),
                            CreatedBy = "",
                            DeletedBy = "",
                            IsDeleted = false,
                            LinuxTimeZone = "Etc/GMT+2",
                            Timestamp = new byte[] { 0 },
                            WindowsTimeZone = "UTC-02"
                        },
                        new
                        {
                            Id = new Guid("ed1ea194-4689-4ee4-b4a6-b546334a3489"),
                            CreatedBy = "",
                            DeletedBy = "",
                            IsDeleted = false,
                            LinuxTimeZone = "Etc/GMT+2",
                            Timestamp = new byte[] { 0 },
                            WindowsTimeZone = "Mid-Atlantic Standard Time"
                        },
                        new
                        {
                            Id = new Guid("96591d59-0c46-4c05-9c19-50c0be8400e9"),
                            CreatedBy = "",
                            DeletedBy = "",
                            IsDeleted = false,
                            LinuxTimeZone = "Atlantic/Azores",
                            Timestamp = new byte[] { 0 },
                            WindowsTimeZone = "Azores Standard Time"
                        },
                        new
                        {
                            Id = new Guid("b8c8fafe-4ffc-43be-a927-74122917e6c7"),
                            CreatedBy = "",
                            DeletedBy = "",
                            IsDeleted = false,
                            LinuxTimeZone = "Atlantic/Cape_Verde",
                            Timestamp = new byte[] { 0 },
                            WindowsTimeZone = "Cape Verde Standard Time"
                        },
                        new
                        {
                            Id = new Guid("5c2df02b-a1b2-4ac2-bdea-f325de70d890"),
                            CreatedBy = "",
                            DeletedBy = "",
                            IsDeleted = false,
                            LinuxTimeZone = "Etc/UTC",
                            Timestamp = new byte[] { 0 },
                            WindowsTimeZone = "UTC"
                        },
                        new
                        {
                            Id = new Guid("cfad21a5-94a9-4739-baf6-465e1491b152"),
                            CreatedBy = "",
                            DeletedBy = "",
                            IsDeleted = false,
                            LinuxTimeZone = "Africa/Casablanca",
                            Timestamp = new byte[] { 0 },
                            WindowsTimeZone = "Morocco Standard Time"
                        },
                        new
                        {
                            Id = new Guid("ddc8f45a-cc5d-443f-b098-0582a95f347a"),
                            CreatedBy = "",
                            DeletedBy = "",
                            IsDeleted = false,
                            LinuxTimeZone = "Europe/London",
                            Timestamp = new byte[] { 0 },
                            WindowsTimeZone = "GMT Standard Time"
                        },
                        new
                        {
                            Id = new Guid("1111ae41-cce8-4897-a605-851bfa68a70c"),
                            CreatedBy = "",
                            DeletedBy = "",
                            IsDeleted = false,
                            LinuxTimeZone = "Atlantic/Reykjavik",
                            Timestamp = new byte[] { 0 },
                            WindowsTimeZone = "Greenwich Standard Time"
                        },
                        new
                        {
                            Id = new Guid("aec5f57e-3f2c-4f20-9c7b-1b0d4a7ee578"),
                            CreatedBy = "",
                            DeletedBy = "",
                            IsDeleted = false,
                            LinuxTimeZone = "Europe/Berlin",
                            Timestamp = new byte[] { 0 },
                            WindowsTimeZone = "W. Europe Standard Time"
                        },
                        new
                        {
                            Id = new Guid("725d1053-cf48-4b6c-824d-47c9621bb3c3"),
                            CreatedBy = "",
                            DeletedBy = "",
                            IsDeleted = false,
                            LinuxTimeZone = "Europe/Budapest",
                            Timestamp = new byte[] { 0 },
                            WindowsTimeZone = "Central Europe Standard Time"
                        },
                        new
                        {
                            Id = new Guid("087d8bb4-b3b1-4d4c-9320-85529bef6851"),
                            CreatedBy = "",
                            DeletedBy = "",
                            IsDeleted = false,
                            LinuxTimeZone = "Europe/Paris",
                            Timestamp = new byte[] { 0 },
                            WindowsTimeZone = "Romance Standard Time"
                        },
                        new
                        {
                            Id = new Guid("26670d75-806a-4448-bcc7-d59f68bb934d"),
                            CreatedBy = "",
                            DeletedBy = "",
                            IsDeleted = false,
                            LinuxTimeZone = "Africa/Sao_Tome",
                            Timestamp = new byte[] { 0 },
                            WindowsTimeZone = "Sao Tome Standard Time"
                        },
                        new
                        {
                            Id = new Guid("88208c66-9143-4b05-a3ba-5d4eeb88e470"),
                            CreatedBy = "",
                            DeletedBy = "",
                            IsDeleted = false,
                            LinuxTimeZone = "Europe/Warsaw",
                            Timestamp = new byte[] { 0 },
                            WindowsTimeZone = "Central European Standard Time"
                        },
                        new
                        {
                            Id = new Guid("bca456e1-6369-44cc-b14b-5b224f887c55"),
                            CreatedBy = "",
                            DeletedBy = "",
                            IsDeleted = false,
                            LinuxTimeZone = "Africa/Lagos",
                            Timestamp = new byte[] { 0 },
                            WindowsTimeZone = "W. Central Africa Standard Time"
                        },
                        new
                        {
                            Id = new Guid("56a5ab66-5342-401c-b50d-5a91f42278db"),
                            CreatedBy = "",
                            DeletedBy = "",
                            IsDeleted = false,
                            LinuxTimeZone = "Asia/Amman",
                            Timestamp = new byte[] { 0 },
                            WindowsTimeZone = "Jordan Standard Time"
                        },
                        new
                        {
                            Id = new Guid("f8d3b72b-e9a8-419c-9661-8b93910e49f2"),
                            CreatedBy = "",
                            DeletedBy = "",
                            IsDeleted = false,
                            LinuxTimeZone = "Europe/Bucharest",
                            Timestamp = new byte[] { 0 },
                            WindowsTimeZone = "GTB Standard Time"
                        },
                        new
                        {
                            Id = new Guid("bbf8464b-3375-4806-8eb8-bc9d2dc55587"),
                            CreatedBy = "",
                            DeletedBy = "",
                            IsDeleted = false,
                            LinuxTimeZone = "Asia/Beirut",
                            Timestamp = new byte[] { 0 },
                            WindowsTimeZone = "Middle East Standard Time"
                        },
                        new
                        {
                            Id = new Guid("21622977-4a88-4871-9c6d-e74d27418213"),
                            CreatedBy = "",
                            DeletedBy = "",
                            IsDeleted = false,
                            LinuxTimeZone = "Africa/Cairo",
                            Timestamp = new byte[] { 0 },
                            WindowsTimeZone = "Egypt Standard Time"
                        },
                        new
                        {
                            Id = new Guid("9b00ecd4-6c61-448d-8ca1-b8f25e1c7a67"),
                            CreatedBy = "",
                            DeletedBy = "",
                            IsDeleted = false,
                            LinuxTimeZone = "Europe/Chisinau",
                            Timestamp = new byte[] { 0 },
                            WindowsTimeZone = "E. Europe Standard Time"
                        },
                        new
                        {
                            Id = new Guid("4bbce910-2fff-4c1d-80a0-9dfefa6b2b17"),
                            CreatedBy = "",
                            DeletedBy = "",
                            IsDeleted = false,
                            LinuxTimeZone = "Asia/Damascus",
                            Timestamp = new byte[] { 0 },
                            WindowsTimeZone = "Syria Standard Time"
                        },
                        new
                        {
                            Id = new Guid("1a99b116-247d-43d2-90eb-850c5f766583"),
                            CreatedBy = "",
                            DeletedBy = "",
                            IsDeleted = false,
                            LinuxTimeZone = "Asia/Hebron",
                            Timestamp = new byte[] { 0 },
                            WindowsTimeZone = "West Bank Standard Time"
                        },
                        new
                        {
                            Id = new Guid("045dd95b-7b47-4125-a85b-a38174edb2cd"),
                            CreatedBy = "",
                            DeletedBy = "",
                            IsDeleted = false,
                            LinuxTimeZone = "Africa/Johannesburg",
                            Timestamp = new byte[] { 0 },
                            WindowsTimeZone = "South Africa Standard Time"
                        },
                        new
                        {
                            Id = new Guid("5c0d4a10-b68f-4317-b9a4-458549eaea56"),
                            CreatedBy = "",
                            DeletedBy = "",
                            IsDeleted = false,
                            LinuxTimeZone = "Europe/Kiev",
                            Timestamp = new byte[] { 0 },
                            WindowsTimeZone = "FLE Standard Time"
                        },
                        new
                        {
                            Id = new Guid("7ba53547-8cf1-4ddd-b619-9cad56e3b7ca"),
                            CreatedBy = "",
                            DeletedBy = "",
                            IsDeleted = false,
                            LinuxTimeZone = "Asia/Jerusalem",
                            Timestamp = new byte[] { 0 },
                            WindowsTimeZone = "Israel Standard Time"
                        },
                        new
                        {
                            Id = new Guid("03a5871b-5e64-48c4-8ff5-54fd25fa91ed"),
                            CreatedBy = "",
                            DeletedBy = "",
                            IsDeleted = false,
                            LinuxTimeZone = "Europe/Kaliningrad",
                            Timestamp = new byte[] { 0 },
                            WindowsTimeZone = "Kaliningrad Standard Time"
                        },
                        new
                        {
                            Id = new Guid("ab0629db-64ae-4f40-b762-a94490a2ba7b"),
                            CreatedBy = "",
                            DeletedBy = "",
                            IsDeleted = false,
                            LinuxTimeZone = "Africa/Khartoum",
                            Timestamp = new byte[] { 0 },
                            WindowsTimeZone = "Sudan Standard Time"
                        },
                        new
                        {
                            Id = new Guid("6c325b2e-d5df-4bee-a949-fe04196b2f72"),
                            CreatedBy = "",
                            DeletedBy = "",
                            IsDeleted = false,
                            LinuxTimeZone = "Africa/Tripoli",
                            Timestamp = new byte[] { 0 },
                            WindowsTimeZone = "Libya Standard Time"
                        },
                        new
                        {
                            Id = new Guid("f8266866-d51f-467b-aa48-65b4d65d4035"),
                            CreatedBy = "",
                            DeletedBy = "",
                            IsDeleted = false,
                            LinuxTimeZone = "Africa/Windhoek",
                            Timestamp = new byte[] { 0 },
                            WindowsTimeZone = "Namibia Standard Time"
                        },
                        new
                        {
                            Id = new Guid("8579cdbc-63b1-4767-87a8-6dfc7c4458cc"),
                            CreatedBy = "",
                            DeletedBy = "",
                            IsDeleted = false,
                            LinuxTimeZone = "Asia/Baghdad",
                            Timestamp = new byte[] { 0 },
                            WindowsTimeZone = "Arabic Standard Time"
                        },
                        new
                        {
                            Id = new Guid("2f824e67-1085-4cbf-af61-d7c9f1700780"),
                            CreatedBy = "",
                            DeletedBy = "",
                            IsDeleted = false,
                            LinuxTimeZone = "Europe/Istanbul",
                            Timestamp = new byte[] { 0 },
                            WindowsTimeZone = "Turkey Standard Time"
                        },
                        new
                        {
                            Id = new Guid("0f9a1bed-59ee-4e32-8f9e-640990d937af"),
                            CreatedBy = "",
                            DeletedBy = "",
                            IsDeleted = false,
                            LinuxTimeZone = "Asia/Riyadh",
                            Timestamp = new byte[] { 0 },
                            WindowsTimeZone = "Arab Standard Time"
                        },
                        new
                        {
                            Id = new Guid("6824a9c3-554c-454f-aa10-3637556c7693"),
                            CreatedBy = "",
                            DeletedBy = "",
                            IsDeleted = false,
                            LinuxTimeZone = "Europe/Minsk",
                            Timestamp = new byte[] { 0 },
                            WindowsTimeZone = "Belarus Standard Time"
                        },
                        new
                        {
                            Id = new Guid("fe9ec1b0-6667-4b4b-90fe-d2b6ae8cbf29"),
                            CreatedBy = "",
                            DeletedBy = "",
                            IsDeleted = false,
                            LinuxTimeZone = "Europe/Moscow",
                            Timestamp = new byte[] { 0 },
                            WindowsTimeZone = "Russian Standard Time"
                        },
                        new
                        {
                            Id = new Guid("5a67d9ae-1912-4fd6-9bfa-0f21a6fb60bf"),
                            CreatedBy = "",
                            DeletedBy = "",
                            IsDeleted = false,
                            LinuxTimeZone = "Africa/Nairobi",
                            Timestamp = new byte[] { 0 },
                            WindowsTimeZone = "E. Africa Standard Time"
                        },
                        new
                        {
                            Id = new Guid("83566e45-b8b4-4a8c-9e17-6c42311cc4bf"),
                            CreatedBy = "",
                            DeletedBy = "",
                            IsDeleted = false,
                            LinuxTimeZone = "Asia/Tehran",
                            Timestamp = new byte[] { 0 },
                            WindowsTimeZone = "Iran Standard Time"
                        },
                        new
                        {
                            Id = new Guid("595a9de1-fdf1-4473-bdc2-504bfe293e7b"),
                            CreatedBy = "",
                            DeletedBy = "",
                            IsDeleted = false,
                            LinuxTimeZone = "Asia/Dubai",
                            Timestamp = new byte[] { 0 },
                            WindowsTimeZone = "Arabian Standard Time"
                        },
                        new
                        {
                            Id = new Guid("37a3ba97-de16-4f2c-99fc-580b911884f1"),
                            CreatedBy = "",
                            DeletedBy = "",
                            IsDeleted = false,
                            LinuxTimeZone = "Europe/Astrakhan",
                            Timestamp = new byte[] { 0 },
                            WindowsTimeZone = "Astrakhan Standard Time"
                        },
                        new
                        {
                            Id = new Guid("8703fe1c-31b0-4d08-bfd2-15c2c20c36ac"),
                            CreatedBy = "",
                            DeletedBy = "",
                            IsDeleted = false,
                            LinuxTimeZone = "Asia/Baku",
                            Timestamp = new byte[] { 0 },
                            WindowsTimeZone = "Azerbaijan Standard Time"
                        },
                        new
                        {
                            Id = new Guid("4b081bcd-9f69-4824-b3b4-3bbac9a93fd1"),
                            CreatedBy = "",
                            DeletedBy = "",
                            IsDeleted = false,
                            LinuxTimeZone = "Europe/Samara",
                            Timestamp = new byte[] { 0 },
                            WindowsTimeZone = "Russia Time Zone 3"
                        },
                        new
                        {
                            Id = new Guid("dc87b8ac-26e2-4b65-b514-c07664a16fb2"),
                            CreatedBy = "",
                            DeletedBy = "",
                            IsDeleted = false,
                            LinuxTimeZone = "Indian/Mauritius",
                            Timestamp = new byte[] { 0 },
                            WindowsTimeZone = "Mauritius Standard Time"
                        },
                        new
                        {
                            Id = new Guid("9de7c21d-dcaa-4a27-80c7-886c019ce484"),
                            CreatedBy = "",
                            DeletedBy = "",
                            IsDeleted = false,
                            LinuxTimeZone = "Europe/Saratov",
                            Timestamp = new byte[] { 0 },
                            WindowsTimeZone = "Saratov Standard Time"
                        },
                        new
                        {
                            Id = new Guid("b4e9d554-9f81-4be6-88c0-6614198737c2"),
                            CreatedBy = "",
                            DeletedBy = "",
                            IsDeleted = false,
                            LinuxTimeZone = "Asia/Tbilisi",
                            Timestamp = new byte[] { 0 },
                            WindowsTimeZone = "Georgian Standard Time"
                        },
                        new
                        {
                            Id = new Guid("c94209d0-5923-46fb-8df4-52e4cce462c6"),
                            CreatedBy = "",
                            DeletedBy = "",
                            IsDeleted = false,
                            LinuxTimeZone = "Asia/Yerevan",
                            Timestamp = new byte[] { 0 },
                            WindowsTimeZone = "Caucasus Standard Time"
                        },
                        new
                        {
                            Id = new Guid("4fadd29b-bd9d-4357-963a-d9a6c57e647c"),
                            CreatedBy = "",
                            DeletedBy = "",
                            IsDeleted = false,
                            LinuxTimeZone = "Asia/Kabul",
                            Timestamp = new byte[] { 0 },
                            WindowsTimeZone = "Afghanistan Standard Time"
                        },
                        new
                        {
                            Id = new Guid("e2536cc0-7be8-4246-af07-16f6cf10d3ad"),
                            CreatedBy = "",
                            DeletedBy = "",
                            IsDeleted = false,
                            LinuxTimeZone = "Asia/Tashkent",
                            Timestamp = new byte[] { 0 },
                            WindowsTimeZone = "West Asia Standard Time"
                        },
                        new
                        {
                            Id = new Guid("860ad695-c8f1-49fe-8a81-2de31b12884a"),
                            CreatedBy = "",
                            DeletedBy = "",
                            IsDeleted = false,
                            LinuxTimeZone = "Asia/Yekaterinburg",
                            Timestamp = new byte[] { 0 },
                            WindowsTimeZone = "Ekaterinburg Standard Time"
                        },
                        new
                        {
                            Id = new Guid("18a5100c-c6d6-4ba8-a395-04a2f1728a57"),
                            CreatedBy = "",
                            DeletedBy = "",
                            IsDeleted = false,
                            LinuxTimeZone = "Asia/Karachi",
                            Timestamp = new byte[] { 0 },
                            WindowsTimeZone = "Pakistan Standard Time"
                        },
                        new
                        {
                            Id = new Guid("756f7bdb-60ea-4cee-9499-72e9b9ef13fb"),
                            CreatedBy = "",
                            DeletedBy = "",
                            IsDeleted = false,
                            LinuxTimeZone = "Asia/Kolkata",
                            Timestamp = new byte[] { 0 },
                            WindowsTimeZone = "India Standard Time"
                        },
                        new
                        {
                            Id = new Guid("1ccc947b-13c8-4cd6-9aee-9944a70c2d6f"),
                            CreatedBy = "",
                            DeletedBy = "",
                            IsDeleted = false,
                            LinuxTimeZone = "Asia/Colombo",
                            Timestamp = new byte[] { 0 },
                            WindowsTimeZone = "Sri Lanka Standard Time"
                        },
                        new
                        {
                            Id = new Guid("d0ff9b09-2f72-445a-b1a4-ac8dbeb16914"),
                            CreatedBy = "",
                            DeletedBy = "",
                            IsDeleted = false,
                            LinuxTimeZone = "Asia/Kathmandu",
                            Timestamp = new byte[] { 0 },
                            WindowsTimeZone = "Nepal Standard Time"
                        },
                        new
                        {
                            Id = new Guid("e31588e4-9274-4b52-ae2b-581ab5691b9b"),
                            CreatedBy = "",
                            DeletedBy = "",
                            IsDeleted = false,
                            LinuxTimeZone = "Asia/Almaty",
                            Timestamp = new byte[] { 0 },
                            WindowsTimeZone = "Central Asia Standard Time"
                        },
                        new
                        {
                            Id = new Guid("c9ebd4ed-6c6c-4eba-9281-3b672520cc41"),
                            CreatedBy = "",
                            DeletedBy = "",
                            IsDeleted = false,
                            LinuxTimeZone = "Asia/Dhaka",
                            Timestamp = new byte[] { 0 },
                            WindowsTimeZone = "Bangladesh Standard Time"
                        },
                        new
                        {
                            Id = new Guid("2ef1534c-36de-4c25-97bf-e67c2592f1ec"),
                            CreatedBy = "",
                            DeletedBy = "",
                            IsDeleted = false,
                            LinuxTimeZone = "Asia/Omsk",
                            Timestamp = new byte[] { 0 },
                            WindowsTimeZone = "Omsk Standard Time"
                        },
                        new
                        {
                            Id = new Guid("fadde5c8-2f36-456a-a186-b0a04108ed4f"),
                            CreatedBy = "",
                            DeletedBy = "",
                            IsDeleted = false,
                            LinuxTimeZone = "Asia/Yangon",
                            Timestamp = new byte[] { 0 },
                            WindowsTimeZone = "Myanmar Standard Time"
                        },
                        new
                        {
                            Id = new Guid("b0445a01-7433-40e7-9684-4eb72f476680"),
                            CreatedBy = "",
                            DeletedBy = "",
                            IsDeleted = false,
                            LinuxTimeZone = "Asia/Bangkok",
                            Timestamp = new byte[] { 0 },
                            WindowsTimeZone = "SE Asia Standard Time"
                        },
                        new
                        {
                            Id = new Guid("f709a4fb-0df5-4121-9bd5-7d0470aff41f"),
                            CreatedBy = "",
                            DeletedBy = "",
                            IsDeleted = false,
                            LinuxTimeZone = "Asia/Barnaul",
                            Timestamp = new byte[] { 0 },
                            WindowsTimeZone = "Altai Standard Time"
                        },
                        new
                        {
                            Id = new Guid("d612b3d6-90e2-4149-8d4d-4d6ce443bc97"),
                            CreatedBy = "",
                            DeletedBy = "",
                            IsDeleted = false,
                            LinuxTimeZone = "Asia/Hovd",
                            Timestamp = new byte[] { 0 },
                            WindowsTimeZone = "W. Mongolia Standard Time"
                        },
                        new
                        {
                            Id = new Guid("80532b51-2ee3-40b9-98c4-57742a8ef684"),
                            CreatedBy = "",
                            DeletedBy = "",
                            IsDeleted = false,
                            LinuxTimeZone = "Asia/Krasnoyarsk",
                            Timestamp = new byte[] { 0 },
                            WindowsTimeZone = "North Asia Standard Time"
                        },
                        new
                        {
                            Id = new Guid("2fa0b1e0-a90f-45f6-9b89-1ab9e00c92d7"),
                            CreatedBy = "",
                            DeletedBy = "",
                            IsDeleted = false,
                            LinuxTimeZone = "Asia/Novosibirsk",
                            Timestamp = new byte[] { 0 },
                            WindowsTimeZone = "N. Central Asia Standard Time"
                        },
                        new
                        {
                            Id = new Guid("10ef3133-b2ef-4fe9-a03c-992a96a76e9c"),
                            CreatedBy = "",
                            DeletedBy = "",
                            IsDeleted = false,
                            LinuxTimeZone = "Asia/Tomsk",
                            Timestamp = new byte[] { 0 },
                            WindowsTimeZone = "Tomsk Standard Time"
                        },
                        new
                        {
                            Id = new Guid("430b49e8-9bf6-43ad-a2dd-2a12cade7289"),
                            CreatedBy = "",
                            DeletedBy = "",
                            IsDeleted = false,
                            LinuxTimeZone = "Asia/Shanghai",
                            Timestamp = new byte[] { 0 },
                            WindowsTimeZone = "China Standard Time"
                        },
                        new
                        {
                            Id = new Guid("bc85d639-d9be-4fef-aa23-300a8e0e31a8"),
                            CreatedBy = "",
                            DeletedBy = "",
                            IsDeleted = false,
                            LinuxTimeZone = "Asia/Irkutsk",
                            Timestamp = new byte[] { 0 },
                            WindowsTimeZone = "North Asia East Standard Time"
                        },
                        new
                        {
                            Id = new Guid("8f6b8895-d235-4759-afc6-4af6447f21d8"),
                            CreatedBy = "",
                            DeletedBy = "",
                            IsDeleted = false,
                            LinuxTimeZone = "Asia/Singapore",
                            Timestamp = new byte[] { 0 },
                            WindowsTimeZone = "Singapore Standard Time"
                        },
                        new
                        {
                            Id = new Guid("e1bddf3f-e60d-4c9e-add8-77bbf933e64f"),
                            CreatedBy = "",
                            DeletedBy = "",
                            IsDeleted = false,
                            LinuxTimeZone = "Australia/Perth",
                            Timestamp = new byte[] { 0 },
                            WindowsTimeZone = "W. Australia Standard Time"
                        },
                        new
                        {
                            Id = new Guid("cc9ad20c-d754-454f-8623-871eef6cdac6"),
                            CreatedBy = "",
                            DeletedBy = "",
                            IsDeleted = false,
                            LinuxTimeZone = "Asia/Taipei",
                            Timestamp = new byte[] { 0 },
                            WindowsTimeZone = "Taipei Standard Time"
                        },
                        new
                        {
                            Id = new Guid("db26063b-a3ed-4220-bb1b-ddabe33a96bd"),
                            CreatedBy = "",
                            DeletedBy = "",
                            IsDeleted = false,
                            LinuxTimeZone = "Asia/Ulaanbaatar",
                            Timestamp = new byte[] { 0 },
                            WindowsTimeZone = "Ulaanbaatar Standard Time"
                        },
                        new
                        {
                            Id = new Guid("8e680df0-62d5-474d-abaf-e77c38805ef5"),
                            CreatedBy = "",
                            DeletedBy = "",
                            IsDeleted = false,
                            LinuxTimeZone = "Asia/Pyongyang",
                            Timestamp = new byte[] { 0 },
                            WindowsTimeZone = "North Korea Standard Time"
                        },
                        new
                        {
                            Id = new Guid("62c1ec8d-fb5d-42f4-996b-b596b7067672"),
                            CreatedBy = "",
                            DeletedBy = "",
                            IsDeleted = false,
                            LinuxTimeZone = "Australia/Eucla",
                            Timestamp = new byte[] { 0 },
                            WindowsTimeZone = "Aus Central W. Standard Time"
                        },
                        new
                        {
                            Id = new Guid("e241b1ce-94ff-488f-a4d4-ceaf7427e6bd"),
                            CreatedBy = "",
                            DeletedBy = "",
                            IsDeleted = false,
                            LinuxTimeZone = "Asia/Chita",
                            Timestamp = new byte[] { 0 },
                            WindowsTimeZone = "Transbaikal Standard Time"
                        },
                        new
                        {
                            Id = new Guid("cc96a162-8ecb-4a7c-8849-0703a94e66a5"),
                            CreatedBy = "",
                            DeletedBy = "",
                            IsDeleted = false,
                            LinuxTimeZone = "Asia/Tokyo",
                            Timestamp = new byte[] { 0 },
                            WindowsTimeZone = "Tokyo Standard Time"
                        },
                        new
                        {
                            Id = new Guid("335b42b7-b500-44bd-9b0d-f63edf43f95e"),
                            CreatedBy = "",
                            DeletedBy = "",
                            IsDeleted = false,
                            LinuxTimeZone = "Asia/Seoul",
                            Timestamp = new byte[] { 0 },
                            WindowsTimeZone = "Korea Standard Time"
                        },
                        new
                        {
                            Id = new Guid("2f6b18ce-71e0-47b7-a231-929e1747f828"),
                            CreatedBy = "",
                            DeletedBy = "",
                            IsDeleted = false,
                            LinuxTimeZone = "Asia/Yakutsk",
                            Timestamp = new byte[] { 0 },
                            WindowsTimeZone = "Yakutsk Standard Time"
                        },
                        new
                        {
                            Id = new Guid("b3cd7fa6-8c85-4632-83d8-db27215285c9"),
                            CreatedBy = "",
                            DeletedBy = "",
                            IsDeleted = false,
                            LinuxTimeZone = "Australia/Adelaide",
                            Timestamp = new byte[] { 0 },
                            WindowsTimeZone = "Cen. Australia Standard Time"
                        },
                        new
                        {
                            Id = new Guid("fb3d8734-3f4b-4b78-8dfb-f7d2a2f6fedd"),
                            CreatedBy = "",
                            DeletedBy = "",
                            IsDeleted = false,
                            LinuxTimeZone = "Australia/Darwin",
                            Timestamp = new byte[] { 0 },
                            WindowsTimeZone = "AUS Central Standard Time"
                        },
                        new
                        {
                            Id = new Guid("e7aeba45-148f-4f62-a4e6-b219484edd22"),
                            CreatedBy = "",
                            DeletedBy = "",
                            IsDeleted = false,
                            LinuxTimeZone = "Australia/Brisbane",
                            Timestamp = new byte[] { 0 },
                            WindowsTimeZone = "E. Australia Standard Time"
                        },
                        new
                        {
                            Id = new Guid("817c73a2-de57-4317-8065-1ea1b1e488a3"),
                            CreatedBy = "",
                            DeletedBy = "",
                            IsDeleted = false,
                            LinuxTimeZone = "Australia/Sydney",
                            Timestamp = new byte[] { 0 },
                            WindowsTimeZone = "AUS Eastern Standard Time"
                        },
                        new
                        {
                            Id = new Guid("bbe24d96-bbae-4a44-8797-463393778913"),
                            CreatedBy = "",
                            DeletedBy = "",
                            IsDeleted = false,
                            LinuxTimeZone = "Pacific/Port_Moresby",
                            Timestamp = new byte[] { 0 },
                            WindowsTimeZone = "West Pacific Standard Time"
                        },
                        new
                        {
                            Id = new Guid("7d799c40-db4e-4a41-8b2e-6dde44b6796b"),
                            CreatedBy = "",
                            DeletedBy = "",
                            IsDeleted = false,
                            LinuxTimeZone = "Australia/Hobart",
                            Timestamp = new byte[] { 0 },
                            WindowsTimeZone = "Tasmania Standard Time"
                        },
                        new
                        {
                            Id = new Guid("2ce7b70e-682c-4918-b7f2-43d513a754e9"),
                            CreatedBy = "",
                            DeletedBy = "",
                            IsDeleted = false,
                            LinuxTimeZone = "Asia/Vladivostok",
                            Timestamp = new byte[] { 0 },
                            WindowsTimeZone = "Vladivostok Standard Time"
                        },
                        new
                        {
                            Id = new Guid("b10b704c-e106-440b-854e-10eb43ca42ff"),
                            CreatedBy = "",
                            DeletedBy = "",
                            IsDeleted = false,
                            LinuxTimeZone = "Australia/Lord_Howe",
                            Timestamp = new byte[] { 0 },
                            WindowsTimeZone = "Lord Howe Standard Time"
                        },
                        new
                        {
                            Id = new Guid("01cda1bb-af59-46c1-aed8-909291f05d17"),
                            CreatedBy = "",
                            DeletedBy = "",
                            IsDeleted = false,
                            LinuxTimeZone = "Pacific/Bougainville",
                            Timestamp = new byte[] { 0 },
                            WindowsTimeZone = "Bougainville Standard Time"
                        },
                        new
                        {
                            Id = new Guid("d5110a8a-b1d9-4802-99bf-f30921c3233a"),
                            CreatedBy = "",
                            DeletedBy = "",
                            IsDeleted = false,
                            LinuxTimeZone = "Asia/Srednekolymsk",
                            Timestamp = new byte[] { 0 },
                            WindowsTimeZone = "Russia Time Zone 10"
                        },
                        new
                        {
                            Id = new Guid("45151e3d-6ab2-402f-87b1-29fcc8fd4c01"),
                            CreatedBy = "",
                            DeletedBy = "",
                            IsDeleted = false,
                            LinuxTimeZone = "Asia/Magadan",
                            Timestamp = new byte[] { 0 },
                            WindowsTimeZone = "Magadan Standard Time"
                        },
                        new
                        {
                            Id = new Guid("77c2370d-967a-4a90-93b7-6276f9ef0d9e"),
                            CreatedBy = "",
                            DeletedBy = "",
                            IsDeleted = false,
                            LinuxTimeZone = "Pacific/Norfolk",
                            Timestamp = new byte[] { 0 },
                            WindowsTimeZone = "Norfolk Standard Time"
                        },
                        new
                        {
                            Id = new Guid("e3bc0f52-9b0b-4068-b3cf-3c55a3e1ba7f"),
                            CreatedBy = "",
                            DeletedBy = "",
                            IsDeleted = false,
                            LinuxTimeZone = "Asia/Sakhalin",
                            Timestamp = new byte[] { 0 },
                            WindowsTimeZone = "Sakhalin Standard Time"
                        },
                        new
                        {
                            Id = new Guid("eb158c7c-9435-48a6-9265-fa18d2573866"),
                            CreatedBy = "",
                            DeletedBy = "",
                            IsDeleted = false,
                            LinuxTimeZone = "Pacific/Guadalcanal",
                            Timestamp = new byte[] { 0 },
                            WindowsTimeZone = "Central Pacific Standard Time"
                        },
                        new
                        {
                            Id = new Guid("76490d08-74bc-424a-b17d-79172e2e05c6"),
                            CreatedBy = "",
                            DeletedBy = "",
                            IsDeleted = false,
                            LinuxTimeZone = "Asia/Kamchatka",
                            Timestamp = new byte[] { 0 },
                            WindowsTimeZone = "Russia Time Zone 11"
                        },
                        new
                        {
                            Id = new Guid("5ddad745-2f07-4f0c-a423-9018c7428675"),
                            CreatedBy = "",
                            DeletedBy = "",
                            IsDeleted = false,
                            LinuxTimeZone = "Pacific/Auckland",
                            Timestamp = new byte[] { 0 },
                            WindowsTimeZone = "New Zealand Standard Time"
                        },
                        new
                        {
                            Id = new Guid("df7551fe-0bf4-4e09-b7de-17eb4d0f2cc9"),
                            CreatedBy = "",
                            DeletedBy = "",
                            IsDeleted = false,
                            LinuxTimeZone = "Etc/GMT-12",
                            Timestamp = new byte[] { 0 },
                            WindowsTimeZone = "UTC+12"
                        },
                        new
                        {
                            Id = new Guid("8db6ce68-d142-4ae1-8ca6-ec1cfff1f9cd"),
                            CreatedBy = "",
                            DeletedBy = "",
                            IsDeleted = false,
                            LinuxTimeZone = "Pacific/Fiji",
                            Timestamp = new byte[] { 0 },
                            WindowsTimeZone = "Fiji Standard Time"
                        },
                        new
                        {
                            Id = new Guid("7429a91c-e629-43f1-86de-bec14ba0e9f8"),
                            CreatedBy = "",
                            DeletedBy = "",
                            IsDeleted = false,
                            LinuxTimeZone = "Asia/Kamchatka",
                            Timestamp = new byte[] { 0 },
                            WindowsTimeZone = "Kamchatka Standard Time"
                        },
                        new
                        {
                            Id = new Guid("b93c23af-4576-4c75-a38b-0a66ad7487e3"),
                            CreatedBy = "",
                            DeletedBy = "",
                            IsDeleted = false,
                            LinuxTimeZone = "Pacific/Chatham",
                            Timestamp = new byte[] { 0 },
                            WindowsTimeZone = "Chatham Islands Standard Time"
                        },
                        new
                        {
                            Id = new Guid("915ea2d2-ed24-44d9-87c8-4561ada2bfc2"),
                            CreatedBy = "",
                            DeletedBy = "",
                            IsDeleted = false,
                            LinuxTimeZone = "Etc/GMT-13",
                            Timestamp = new byte[] { 0 },
                            WindowsTimeZone = "UTC+13"
                        },
                        new
                        {
                            Id = new Guid("0a8d338b-afef-4857-a768-bf1112ea09f3"),
                            CreatedBy = "",
                            DeletedBy = "",
                            IsDeleted = false,
                            LinuxTimeZone = "Pacific/Tongatapu",
                            Timestamp = new byte[] { 0 },
                            WindowsTimeZone = "Tonga Standard Time"
                        },
                        new
                        {
                            Id = new Guid("771a3ccd-82fc-4076-928e-f656319b8dfc"),
                            CreatedBy = "",
                            DeletedBy = "",
                            IsDeleted = false,
                            LinuxTimeZone = "Pacific/Apia",
                            Timestamp = new byte[] { 0 },
                            WindowsTimeZone = "Samoa Standard Time"
                        },
                        new
                        {
                            Id = new Guid("e793b6b9-8db8-45d6-92e2-a3d496f9dd9b"),
                            CreatedBy = "",
                            DeletedBy = "",
                            IsDeleted = false,
                            LinuxTimeZone = "Pacific/Kiritimati",
                            Timestamp = new byte[] { 0 },
                            WindowsTimeZone = "Line Islands Standard Time"
                        });
                });

            modelBuilder.Entity("OpenBots.Server.Model.Webhooks.IntegrationEvent", b =>
                {
                    b.Property<Guid?>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime?>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeleteOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("DeletedBy")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Description")
                        .HasMaxLength(2048)
                        .HasColumnType("nvarchar(2048)");

                    b.Property<string>("EntityType")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool?>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<bool>("IsSystem")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("PayloadSchema")
                        .HasColumnType("nvarchar(max)");

                    b.Property<byte[]>("Timestamp")
                        .IsConcurrencyToken()
                        .IsRequired()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.Property<string>("UpdatedBy")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime?>("UpdatedOn")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("IntegrationEvents");

                    b.HasData(
                        new
                        {
                            Id = new Guid("744ba6f9-161f-41dc-b76e-c1602fc65d1b"),
                            CreatedBy = "",
                            DeletedBy = "",
                            Description = "A Queue has been updated",
                            EntityType = "Queue",
                            IsDeleted = false,
                            IsSystem = true,
                            Name = "Queues.QueueUpdated",
                            Timestamp = new byte[] { 0 }
                        },
                        new
                        {
                            Id = new Guid("b00eeecd-5729-4f82-9cd2-dcfafd946965"),
                            CreatedBy = "",
                            DeletedBy = "",
                            Description = "A Queue has been deleted",
                            EntityType = "Queue",
                            IsDeleted = false,
                            IsSystem = true,
                            Name = "Queues.QueueDeleted",
                            Timestamp = new byte[] { 0 }
                        },
                        new
                        {
                            Id = new Guid("e9f64119-edbf-4779-a796-21ad59f76534"),
                            CreatedBy = "",
                            DeletedBy = "",
                            Description = "A new Queue has been created",
                            EntityType = "Queue",
                            IsDeleted = false,
                            IsSystem = true,
                            Name = "Queues.NewQueueCreated",
                            Timestamp = new byte[] { 0 }
                        },
                        new
                        {
                            Id = new Guid("0719a4c3-2143-4b9a-92ae-8b5a93075b98"),
                            CreatedBy = "",
                            DeletedBy = "",
                            Description = "A QueueItem has been updated",
                            EntityType = "QueueItem",
                            IsDeleted = false,
                            IsSystem = true,
                            Name = "QueueItems.QueueItemUpdated",
                            Timestamp = new byte[] { 0 }
                        },
                        new
                        {
                            Id = new Guid("860689af-fd19-44ba-a5c7-53f6fed92065"),
                            CreatedBy = "",
                            DeletedBy = "",
                            Description = "A QueueItem has been deleted",
                            EntityType = "QueueItem",
                            IsDeleted = false,
                            IsSystem = true,
                            Name = "QueueItems.QueueItemDeleted",
                            Timestamp = new byte[] { 0 }
                        },
                        new
                        {
                            Id = new Guid("30a8dcb9-10cf-43c6-a08f-b45fe2125dae"),
                            CreatedBy = "",
                            DeletedBy = "",
                            Description = "A new QueueItem has been created",
                            EntityType = "QueueItem",
                            IsDeleted = false,
                            IsSystem = true,
                            Name = "QueueItems.NewQueueItemCreated",
                            Timestamp = new byte[] { 0 }
                        },
                        new
                        {
                            Id = new Guid("06dd9940-a483-4a21-9551-cf2e32eeccae"),
                            CreatedBy = "",
                            DeletedBy = "",
                            Description = "A new Job has been created",
                            EntityType = "Job",
                            IsDeleted = false,
                            IsSystem = true,
                            Name = "Jobs.NewJobCreated",
                            Timestamp = new byte[] { 0 }
                        },
                        new
                        {
                            Id = new Guid("9d8e576a-a69d-43cf-bbc9-18103105d0a0"),
                            CreatedBy = "",
                            DeletedBy = "",
                            Description = "A Job has been updated",
                            EntityType = "Job",
                            IsDeleted = false,
                            IsSystem = true,
                            Name = "Jobs.JobUpdated",
                            Timestamp = new byte[] { 0 }
                        },
                        new
                        {
                            Id = new Guid("82b8d08d-5ae2-4031-bdf8-5fba5597ac4b"),
                            CreatedBy = "",
                            DeletedBy = "",
                            Description = "A Job has been deleted",
                            EntityType = "Job",
                            IsDeleted = false,
                            IsSystem = true,
                            Name = "Jobs.JobsDeleted",
                            Timestamp = new byte[] { 0 }
                        },
                        new
                        {
                            Id = new Guid("04cf6a7a-ca72-48bc-887f-666ef580d198"),
                            CreatedBy = "",
                            DeletedBy = "",
                            Description = "A new File has been created",
                            EntityType = "File",
                            IsDeleted = false,
                            IsSystem = true,
                            Name = "Files.NewFileCreated",
                            Timestamp = new byte[] { 0 }
                        },
                        new
                        {
                            Id = new Guid("3ff9b456-7832-4499-b263-692c021e7d80"),
                            CreatedBy = "",
                            DeletedBy = "",
                            Description = "A File has been updated",
                            EntityType = "File",
                            IsDeleted = false,
                            IsSystem = true,
                            Name = "Files.FileUpdated",
                            Timestamp = new byte[] { 0 }
                        },
                        new
                        {
                            Id = new Guid("32d63e9d-aa6e-481f-b928-541ddf979bdf"),
                            CreatedBy = "",
                            DeletedBy = "",
                            Description = "A File has been deleted",
                            EntityType = "File",
                            IsDeleted = false,
                            IsSystem = true,
                            Name = "Files.FileDeleted",
                            Timestamp = new byte[] { 0 }
                        },
                        new
                        {
                            Id = new Guid("76f6ab13-c430-46ad-b859-3d2dfd802e84"),
                            CreatedBy = "",
                            DeletedBy = "",
                            Description = "A new Credential has been created",
                            EntityType = "Credential",
                            IsDeleted = false,
                            IsSystem = true,
                            Name = "Credentials.NewCredentialCreated",
                            Timestamp = new byte[] { 0 }
                        },
                        new
                        {
                            Id = new Guid("efd1d688-1881-4d5e-aed7-81528d54d7ef"),
                            CreatedBy = "",
                            DeletedBy = "",
                            Description = "A Credential has been updated",
                            EntityType = "Credential",
                            IsDeleted = false,
                            IsSystem = true,
                            Name = "Credentials.CredentialUpdated",
                            Timestamp = new byte[] { 0 }
                        },
                        new
                        {
                            Id = new Guid("ecced501-9c35-4b37-a7b2-b6b901f91234"),
                            CreatedBy = "",
                            DeletedBy = "",
                            Description = "A Credential has been deleted",
                            EntityType = "Credential",
                            IsDeleted = false,
                            IsSystem = true,
                            Name = "Credentials.CredentialDeleted",
                            Timestamp = new byte[] { 0 }
                        },
                        new
                        {
                            Id = new Guid("93416738-3284-4bb0-869e-e2f191446b44"),
                            CreatedBy = "",
                            DeletedBy = "",
                            Description = "A new Process has been created",
                            EntityType = "Automation",
                            IsDeleted = false,
                            IsSystem = true,
                            Name = "Automations.NewAutomationCreated",
                            Timestamp = new byte[] { 0 }
                        },
                        new
                        {
                            Id = new Guid("8437fa1f-777a-4905-a169-feb32214c0c8"),
                            CreatedBy = "",
                            DeletedBy = "",
                            Description = "A Process has been updated",
                            EntityType = "Automation",
                            IsDeleted = false,
                            IsSystem = true,
                            Name = "Automations.AutomationUpdated",
                            Timestamp = new byte[] { 0 }
                        },
                        new
                        {
                            Id = new Guid("90f9f691-90e5-41d0-9b2c-1e8437bc85d3"),
                            CreatedBy = "",
                            DeletedBy = "",
                            Description = "A Process has been deleted",
                            EntityType = "Automation",
                            IsDeleted = false,
                            IsSystem = true,
                            Name = "Automations.AutomationDeleted",
                            Timestamp = new byte[] { 0 }
                        },
                        new
                        {
                            Id = new Guid("f1b111cc-1f26-404d-827c-e30305c2ecc4"),
                            CreatedBy = "",
                            DeletedBy = "",
                            Description = "A new Asset has been created",
                            EntityType = "Asset",
                            IsDeleted = false,
                            IsSystem = true,
                            Name = "Assets.NewAssetCreated",
                            Timestamp = new byte[] { 0 }
                        },
                        new
                        {
                            Id = new Guid("4ce67735-2edc-4b7f-849a-5575740a496f"),
                            CreatedBy = "",
                            DeletedBy = "",
                            Description = "An Asset has been updated",
                            EntityType = "Asset",
                            IsDeleted = false,
                            IsSystem = true,
                            Name = "Assets.AssetUpdated",
                            Timestamp = new byte[] { 0 }
                        },
                        new
                        {
                            Id = new Guid("6e0c741c-34b0-471e-a491-c7ec61782e94"),
                            CreatedBy = "",
                            DeletedBy = "",
                            Description = "An Asset has been deleted",
                            EntityType = "Asset",
                            IsDeleted = false,
                            IsSystem = true,
                            Name = "Assets.AssetDeleted",
                            Timestamp = new byte[] { 0 }
                        },
                        new
                        {
                            Id = new Guid("35fd2aa3-6c77-4995-9ed8-9b262e5afdfc"),
                            CreatedBy = "",
                            DeletedBy = "",
                            Description = "An Agent has reported an unhealthy status",
                            EntityType = "Agent",
                            IsDeleted = false,
                            IsSystem = true,
                            Name = "Agents.UnhealthyReported",
                            Timestamp = new byte[] { 0 }
                        },
                        new
                        {
                            Id = new Guid("6ce8b3da-0373-4da2-bc77-ea845212855d"),
                            CreatedBy = "",
                            DeletedBy = "",
                            Description = "A new agent has been created",
                            EntityType = "Agent",
                            IsDeleted = false,
                            IsSystem = true,
                            Name = "Agents.NewAgentCreated",
                            Timestamp = new byte[] { 0 }
                        },
                        new
                        {
                            Id = new Guid("2b4bd195-62ac-4111-97ca-d6df6dd3f0fb"),
                            CreatedBy = "",
                            DeletedBy = "",
                            Description = "An Agent has been updated",
                            EntityType = "Agent",
                            IsDeleted = false,
                            IsSystem = true,
                            Name = "Agents.AgentUpdated",
                            Timestamp = new byte[] { 0 }
                        },
                        new
                        {
                            Id = new Guid("6ce0bb0e-cda1-49fa-a9e4-b67d904f826e"),
                            CreatedBy = "",
                            DeletedBy = "",
                            Description = "An Agent has been deleted",
                            EntityType = "Agent",
                            IsDeleted = false,
                            IsSystem = true,
                            Name = "Agents.AgentDeleted",
                            Timestamp = new byte[] { 0 }
                        },
                        new
                        {
                            Id = new Guid("53b4365e-d103-4e74-a72c-294d670abdbd"),
                            CreatedBy = "",
                            DeletedBy = "",
                            Description = "A new Folder has been created",
                            EntityType = "File",
                            IsDeleted = false,
                            IsSystem = true,
                            Name = "Files.NewFolderCreated",
                            Timestamp = new byte[] { 0 }
                        },
                        new
                        {
                            Id = new Guid("d10616c6-53c4-4137-8cd0-70a5c7409938"),
                            CreatedBy = "",
                            DeletedBy = "",
                            Description = "A Folder has been updated",
                            EntityType = "File",
                            IsDeleted = false,
                            IsSystem = true,
                            Name = "Files.FolderUpdated",
                            Timestamp = new byte[] { 0 }
                        },
                        new
                        {
                            Id = new Guid("e4a9ceaa-88e2-4c03-a203-7a419749c613"),
                            CreatedBy = "",
                            DeletedBy = "",
                            Description = "A Folder has been deleted",
                            EntityType = "File",
                            IsDeleted = false,
                            IsSystem = true,
                            Name = "Files.FolderDeleted",
                            Timestamp = new byte[] { 0 }
                        },
                        new
                        {
                            Id = new Guid("fa264362-998e-473d-8645-e6fdf86bc79f"),
                            CreatedBy = "",
                            DeletedBy = "",
                            Description = "A new Drive has been created",
                            EntityType = "File",
                            IsDeleted = false,
                            IsSystem = true,
                            Name = "Files.NewDriveCreated",
                            Timestamp = new byte[] { 0 }
                        },
                        new
                        {
                            Id = new Guid("513bb79b-3f2e-4846-a804-2c5b9a6792d0"),
                            CreatedBy = "",
                            DeletedBy = "",
                            Description = "Local Drive has been updated",
                            EntityType = "File",
                            IsDeleted = false,
                            IsSystem = true,
                            Name = "Files.DriveUpdated",
                            Timestamp = new byte[] { 0 }
                        },
                        new
                        {
                            Id = new Guid("2c5b29c7-2fed-42b6-afcb-b7d8a41aacb5"),
                            CreatedBy = "",
                            DeletedBy = "",
                            Description = "A new AgentGroup has been created",
                            EntityType = "AgentGroup",
                            IsDeleted = false,
                            IsSystem = true,
                            Name = "AgentGroups.NewAgentGroupCreated",
                            Timestamp = new byte[] { 0 }
                        },
                        new
                        {
                            Id = new Guid("e096bb0f-850c-4001-946a-88a7f8692d5a"),
                            CreatedBy = "",
                            DeletedBy = "",
                            Description = "An AgentGroup has been updated",
                            EntityType = "AgentGroup",
                            IsDeleted = false,
                            IsSystem = true,
                            Name = "AgentGroups.AgentGroupUpdated",
                            Timestamp = new byte[] { 0 }
                        },
                        new
                        {
                            Id = new Guid("3789f1ae-2693-4ad7-8696-723bd551199f"),
                            CreatedBy = "",
                            DeletedBy = "",
                            Description = "An AgentGroup has been deleted",
                            EntityType = "AgentGroup",
                            IsDeleted = false,
                            IsSystem = true,
                            Name = "AgentGroups.AgentGroupDeleted",
                            Timestamp = new byte[] { 0 }
                        },
                        new
                        {
                            Id = new Guid("76910164-6fda-4861-b1b5-7737370a8461"),
                            CreatedBy = "",
                            DeletedBy = "",
                            Description = "An Agent has been added to the AgentGroup",
                            EntityType = "AgentGroup",
                            IsDeleted = false,
                            IsSystem = true,
                            Name = "AgentGroups.AgentGroupMemberUpdated",
                            Timestamp = new byte[] { 0 }
                        });
                });

            modelBuilder.Entity("OpenBots.Server.Model.Webhooks.IntegrationEventLog", b =>
                {
                    b.Property<Guid?>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime?>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeleteOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("DeletedBy")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<Guid?>("EntityID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("EntityType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("IntegrationEventName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool?>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("Message")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("OccuredOnUTC")
                        .IsRequired()
                        .HasColumnType("datetime2");

                    b.Property<string>("PayloadJSON")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SHA256Hash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Status")
                        .HasColumnType("nvarchar(max)");

                    b.Property<byte[]>("Timestamp")
                        .IsConcurrencyToken()
                        .IsRequired()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.Property<string>("UpdatedBy")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime?>("UpdatedOn")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("IntegrationEventLogs");
                });

            modelBuilder.Entity("OpenBots.Server.Model.Webhooks.IntegrationEventSubscription", b =>
                {
                    b.Property<Guid?>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime?>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeleteOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("DeletedBy")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<Guid?>("EntityID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("EntityName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("EntityType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("HTTP_AddHeader_Key")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("HTTP_AddHeader_Value")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("HTTP_URL")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("IntegrationEventName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool?>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<int?>("Max_RetryCount")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<Guid?>("QUEUE_QueueID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<byte[]>("Timestamp")
                        .IsConcurrencyToken()
                        .IsRequired()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.Property<int>("TransportType")
                        .HasColumnType("int");

                    b.Property<string>("UpdatedBy")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime?>("UpdatedOn")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("IntegrationEventSubscriptions");
                });

            modelBuilder.Entity("OpenBots.Server.Model.Webhooks.IntegrationEventSubscriptionAttempt", b =>
                {
                    b.Property<Guid?>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int?>("AttemptCounter")
                        .HasColumnType("int");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime?>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeleteOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("DeletedBy")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<Guid?>("EventLogID")
                        .IsRequired()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("IntegrationEventName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("IntegrationEventSubscriptionID")
                        .IsRequired()
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool?>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("Status")
                        .HasColumnType("nvarchar(max)");

                    b.Property<byte[]>("Timestamp")
                        .IsConcurrencyToken()
                        .IsRequired()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.Property<string>("UpdatedBy")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime?>("UpdatedOn")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("IntegrationEventSubscriptionAttempts");
                });

            modelBuilder.Entity("OpenBots.Server.Security.AspNetUsers", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("ForcedPasswordChange")
                        .HasColumnType("bit");

                    b.Property<bool?>("IsUserConsentRequired")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NormalizedEmail")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NormalizedUserName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("PersonId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("AspNetUsers");
                });

            modelBuilder.Entity("OpenBots.Server.Model.File.FileAttribute", b =>
                {
                    b.HasOne("OpenBots.Server.Model.File.StorageFile", null)
                        .WithMany("FileAttributes")
                        .HasForeignKey("StorageFileId");
                });

            modelBuilder.Entity("OpenBots.Server.Model.Identity.EmailVerification", b =>
                {
                    b.HasOne("OpenBots.Server.Model.Identity.Person", "Person")
                        .WithMany("EmailVerifications")
                        .HasForeignKey("PersonId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Person");
                });

            modelBuilder.Entity("OpenBots.Server.Model.Identity.PersonCredential", b =>
                {
                    b.HasOne("OpenBots.Server.Model.Identity.Person", "Person")
                        .WithMany("Credentials")
                        .HasForeignKey("PersonId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Person");
                });

            modelBuilder.Entity("OpenBots.Server.Model.Identity.PersonEmail", b =>
                {
                    b.HasOne("OpenBots.Server.Model.Identity.Person", "Person")
                        .WithMany("Emails")
                        .HasForeignKey("PersonId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Person");
                });

            modelBuilder.Entity("OpenBots.Server.Model.Identity.UserConsent", b =>
                {
                    b.HasOne("OpenBots.Server.Model.Identity.Person", "Person")
                        .WithMany()
                        .HasForeignKey("PersonId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("OpenBots.Server.Model.Identity.UserAgreement", "UserAgreements")
                        .WithMany()
                        .HasForeignKey("UserAgreementID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Person");

                    b.Navigation("UserAgreements");
                });

            modelBuilder.Entity("OpenBots.Server.Model.Membership.AccessRequest", b =>
                {
                    b.HasOne("OpenBots.Server.Model.Membership.Organization", "Organization")
                        .WithMany("AccessRequests")
                        .HasForeignKey("OrganizationId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("OpenBots.Server.Model.Identity.Person", "Person")
                        .WithMany()
                        .HasForeignKey("PersonId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Organization");

                    b.Navigation("Person");
                });

            modelBuilder.Entity("OpenBots.Server.Model.Membership.OrganizationMember", b =>
                {
                    b.HasOne("OpenBots.Server.Model.Membership.Organization", null)
                        .WithMany("Members")
                        .HasForeignKey("OrganizationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("OpenBots.Server.Model.Identity.Person", "Person")
                        .WithMany()
                        .HasForeignKey("PersonId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Person");
                });

            modelBuilder.Entity("OpenBots.Server.Model.Membership.OrganizationSetting", b =>
                {
                    b.HasOne("OpenBots.Server.Model.Membership.Organization", "Organization")
                        .WithMany("Settings")
                        .HasForeignKey("OrganizationId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("Organization");
                });

            modelBuilder.Entity("OpenBots.Server.Model.Membership.OrganizationUnit", b =>
                {
                    b.HasOne("OpenBots.Server.Model.Membership.Organization", "Organization")
                        .WithMany("Units")
                        .HasForeignKey("OrganizationId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Organization");
                });

            modelBuilder.Entity("OpenBots.Server.Model.Membership.OrganizationUnitMember", b =>
                {
                    b.HasOne("OpenBots.Server.Model.Membership.Organization", "Organization")
                        .WithMany()
                        .HasForeignKey("OrganizationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("OpenBots.Server.Model.Membership.OrganizationUnit", "OrganizationUnit")
                        .WithMany("Members")
                        .HasForeignKey("OrganizationUnitId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("OpenBots.Server.Model.Identity.Person", "Person")
                        .WithMany()
                        .HasForeignKey("PersonId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Organization");

                    b.Navigation("OrganizationUnit");

                    b.Navigation("Person");
                });

            modelBuilder.Entity("OpenBots.Server.Model.File.StorageFile", b =>
                {
                    b.Navigation("FileAttributes");
                });

            modelBuilder.Entity("OpenBots.Server.Model.Identity.Person", b =>
                {
                    b.Navigation("Credentials");

                    b.Navigation("Emails");

                    b.Navigation("EmailVerifications");
                });

            modelBuilder.Entity("OpenBots.Server.Model.Membership.Organization", b =>
                {
                    b.Navigation("AccessRequests");

                    b.Navigation("Members");

                    b.Navigation("Settings");

                    b.Navigation("Units");
                });

            modelBuilder.Entity("OpenBots.Server.Model.Membership.OrganizationUnit", b =>
                {
                    b.Navigation("Members");
                });
#pragma warning restore 612, 618
        }
    }
}
